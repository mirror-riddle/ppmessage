( function() {

    if ( window ) {

        if ( window.ppconsole === undefined ) {
            
            window.ppconsole = {
                
                /**
                 * major.minor.status.revision
                 * 
                 * 0.0.0.1 ppmessage.cn
                 * 0.0.0.2 github/ppmessage.com
                 * 0.0.0.3 position of PPCOM
                 *
                 */
                version : '0.0.0.3'
                
            };
            
        }

    }
    
} )();

// Avoid `console` errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

// the [] is must, otherwise it is a ref not define
angular.module("this_app.constants", [])
    .constant("yvConstants", {

        PPCONSOLE_API: {
            uuid:    "{ppconsole_api_uuid}",
            key:     "{ppconsole_api_key}",
            secret:  "{ppconsole_api_secret}"
        },

        PPMESSAGE_APP: {
            uuid:    "{ppmessage_app_uuid}"
        },

        COOKIE_KEY: {
            LOGINED_USER_UUID: 'cookie_ppconsole_user_logined_user_uuid',
            ACTIVE_USER_UUID: 'cookie_ppconsole_user_user_uuid',
            ACCESS_TOKEN: 'cookie_ppconsole_user_access_token',
        },

        BROADCAST_EVENT_KEY: {
            LOGIN_FINISHED: 'event:login:finished',
            REFRESH_PAGE: 'event:refreshpage'
        },

        MAX_TEXT_LEN: 128,

        TEMPLATE_PREFIX: "templates/",
        STATIC_PREFIX: "/ppconsole/static/",
        DEFAULT_USER_ICON: "/ppconsole/static/img/default-user.png",

        MESSAGE_TYPE: {
            NOTI: "NOTI",
        },

        MESSAGE_SUBTYPE: {
            AUDIO:  "AUDIO",
            VIDEO:  "VIDEO",
            DOCUMENT: "DOCUMENT",
            FILE:   "FILE",
            TEXT:   "TEXT",
            IMAGE:  "IMAGE",
            SINGLE_CARD:   "SINGLE_CARD",
            MULTIPLE_CARD: "MULTIPLE_CARD",
            TXT:    "TXT",
            MENU:   "MENU",
            EVENT:  "EVENT",
            GPS_LOCATION: "GPS_LOCATION",
            INVITE_CONTACT: "INVITE_CONTACT",
            ACCEPT_CONTACT: "ACCEPT_CONTACT",
            REMOVE_CONTACT: "REMOVE_CONTACT",
            DG_INVITED: "DG_INVITED",
            DG_REMOVED: "DG_REMOVED",
            REQUEST_JOIN_OG: "REQUEST_JOIN_OG",
            APPROVE_JOIN_OG: "APPROVE_JOIN_OG",
            LOGOUT: "LOGOUT"
        },

        YVOBJECT: {
            DU: "DU",
            AU: "AU",
            AG: "AG",
            OG: "OG",
        },

        OS: {
            IOS: "IOS",
            AND: "AND",
            WP: "WP",
            CHROME: "CHROME",
            MAC: "MAC",
            WIN: "WIN",
        },

        SEND_STATUS: {
            SEND_PENDING:   "SEND_PENDING",
            SEND_CHECKING:  "SEND_CHECKING",
            SEND_UPLOADING: "SEND_UPLOADING",
            SEND_SENDING:   "SEND_SENDING",
            SEND_SUCCESS:   "SEND_SUCCESS",
            SEND_ERROR:     "SEND_ERROR"
        },

        MESSAGE_DIR: {
            DIR_IN:  "DIR_IN",
            DIR_OUT: "DIR_OUT"
        },

        // according this to jump certain url
        USER_STATUS: {
            OWNER_0: "app.main",
            OWNER_1: "app.main",
            OWNER_2: "app.settings.overview",
            // OWNER_3: "",
            // SERVICE: "",
            ANONYMOUS: "app.main",
            THIRDPARTY: "app.main",
        },

    });

/*
 *  guijin.ding@yvertical.com
 *  Copyright (c) 2010-2017
 */

angular.module("this_app.i18n", ["pascalprecht.translate"])
    .constant("yvTransTags", {
        en: {

            COPYRIGHT_PPMESSAGE: "PPMESSAGE.",

            action: {
                ADD_TAG: "Add",

                CANCEL_TAG: "Cancel",

                CONFIRM_TAG: "Confirm",

                CREATE_TAG: "Create",

                DELETE_TAG: "Delete",

                EDIT_TAG: "Edit",
                
                PREVIEW_TAG: "Preview",
                
                SAVE_TAG: "Save",

                SEARCH_TAG: "Search",

                SELECT_ALL_TAG: "Select all",

                SUBMIT_TAG: "Submit",

            },

            field: {
                CURRENT_PASSWORD_TAG: "Current password",

                MEMBERS_TAG: "members",
                
                NEW_PASSWORD_TAG: "New password",

                OWNER_TAG: "Owner",
                
                REPEAT_NEW_PASSWORD_TAG: "Repeat new password",

                SERVICE_GROUP_NAME_TAG: "Group name",
                SERVICE_GROUP_DESC_TAG: "Group description",

                SERVICE_USER_TAG: "Service user",
                
                TEAM_NAME_TAG: "Team name",
                
                USER_FULLNAME_TAG: "User fullname",
                
                USER_EMAIL_TAG: "User email",

                USER_PASSWORD_TAG: "User password",

            },
            
            error: {
                ADD_FAILED_TAG: "Add failed.",

                ALREADY_IS_SERVICE_USER_TAG: "Already is a service user",

                CREATE_FAILED_TAG: "Create failed.",

                DELETE_FAILED_TAG: "Failed to delete",

                ILLEGAL_CHARACTER_FOUND_TAG: "Illegal character found.",
                
                EMAIL_TAKEN_TAG: "This email already has been taken.",
                
                NEWPASSWORD_MISMATCH_TAG: "New password and repeat not equal.",
                NOTHING_CHANGED_TAG: "Nothing changed.",

                OLDPASSWORD_MISMATCH_TAG: "Old password mismatch.",
                OUT_OF_LENGTH_TAG: "Out of length.",

                PARAMS_MISS_TAG: "Parameters missed.",
                PASSWORD_NOT_MATCHED_TAG: "Password not matched",

                REMOVE_FAILED_TAG: "Remove failed.",
                
                SIGNIN_FAILED_TAG: "Sign in failed.",
                UPDATE_FAILED_TAG: "Failed to update.",

            },

            success: {
                ADD_SUCCESSFULLY_TAG: "Add successfully.",

                CHANGE_PASSWORD_SUCCESS_TAG: "Change password successfully.",

                CHANGE_PASSWORD_FAIL_TAG: "Change password failed.",

                CREATE_SUCCESSFULLY_TAG: "Create successfully.",

                DELETE_SUCCESSFULLY_TAG: "Delete successfully.",

                REMOVE_SUCCESSFULLY_TAG: "Remove successfully.",

                UPDATE_SUCCESSFULLY_TAG: "Update successfully.",
         
            },

            global: {
                ADD_GROUP_USER_TAG: "Add user to this group",
                
                CHANGE_PASSWORD_TAG: "Change Password",
                
                COLOR_PICKED_NOT_RIGHT_TAG: "color picked is unregualr value",           

                COLOR_TAG: "Color",

                COPY_CODE_TO_BODY_TAG: "Copy the code below, and paste it into html body.",
                
                CREATE_TEAM_TAG: "Create Team",

                CREATE_SERVICE_GROUP_TAG: "Create Service Group",
                
                CREATE_SERVICE_USER_TAG: "Create Service User",
                
                DELETE_SERVICE_GROUP_TAG: "Delete Service Group",

                DELETE_SERVICE_GROUP_INFO_TAG: "Confirm delete the following groups:",

                DEMO_DEPLOY_TO_TAG: "PPMessage has been deployed to this link for preview and test.",

                EDIT_SERVICE_GROUP_TAG: "Edit Service Group",
                
                PRIVATE_SETTINGS_TAG: "Private settings",
                
                RESET_PASSWORD_TAG: "Reset Password",

                SERVICE_TEAM_TAG: "Service Team",
                
                SIGNUP_TAG: "Sign up",
                SIGNIN_TAG: "Sign in",
                SIGNOUT_TAG: "Sign out",

                SLOGAN_TAG: "Open Source Plug & Play Enterprise Message Communication Platform",
                
                START_SERVICE_TAG: "Start service",

                TEAM_CONFIG_TAG: "Team settings",

                TEST_URL_TAG: "Test URL",
                
                USER_ACCOUNT_TAG: "User Account",

                WELCOME_TAG: "Welcome",
                
            },
            
            calendar:{
                TODAY_TAG: "Today",
                YESTERDAY_TAG: "Yesterday",
                LAST_7_DAYS_TAG:"Last 7 Days",
                LAST_30_DAYS_TAG:"Last 30 Days",
                THIS_MONTH_TAG:"This Month",
                LAST_MONTH_TAG:"Last Month",
                APPLY_LABEL_TAG:"Apply",
                CANCEL_LABEL_TAG:"Cancel",
                FROM_LABEL_TAG:"From",
                TO_LABEL_TAG:"To",
                CUSTOM_RANGE_LABEL_TAG:"Custom Range",
                monthname:{
                    JANUARY_TAG:"January",
                    FEBRUARY_TAG:"February",
                    MARCH_TAG:"March",
                    APRIL_TAG:"April",
                    MAY_TAG:"May",
                    JUNE_TAG:"June",
                    JULY_TAG:"July",
                    AUGUST_TAG:"August",
                    SEPTEMBER_TAG:"September",
                    OCTOBER_TAG:"October",
                    NOVEMBER_TAG:"November",
                    DECEMBER_TAG:"December",
                },
            },//calendar end


            settings: {
                menu: {
                    DATA_ANALYSIS_TAG: "Data analysis",
                    DATA_OVERVIEW_TAG: "Data overview",
                    HISTORY_MSG_TAG: "Message history",
                    TEAM_CONFIG_TAG: "Team settings",
                    BASIC_CONFIG_TAG: "Basic info",
                    USER_INTERFACE_TAG: "User interface",
                    MESSAGE_DISPATCH_TAG: "Message dispatch",
                    SERVICE_USER_TAG: "Service users",
                    SERVICE_GROUP_TAG: "Service groups",
                    APP_INTEGRATE_TAG: "App integrate",
                    ACCOUT_CONFIG_TAG: "Account settings",
                    ADVANCED_CONFIG_TAG: "Advanced settings",
                    PUSH_CONFIG_TAG: "Push settings",
                },                
            },
            
            statistics: {

                overview: {
                    OVERVIEW_TAG: 'Overview',
                    TODAY_CUSTOMER_TAG: 'Today customer',
                    YESTERDAY_CUSTOMER_TAG: 'Yesterday customer',
                    ALL_CUSTOMER_TAG: 'All customer',
                    ALL_MESSAGE_TAG: 'All message',
                    REALTIME_DATA_TAG: 'Today data',
                    REALTIME_CUSTOMER_TAG: 'Customer',
                    REALTIME_SERVICE_TAG: 'Service',
                    REALTIME_MESSAGE_TAG: 'Message',
                    HISTORY_DATA_TAG: 'History data',
                    HISTORY_CUSTOMER_TAG: 'Customer',
                    HISTORY_SERVICE_TAG: 'Service',
                    HISTORY_MESSAGE_TAG: 'Message',
                    MAX_RANGE_TAG: 'Less than 30 days',
                },
                
                historymessages: {
                    MESSAGE_FILE_TYPE_TAG: 'File',
                    MESSAGE_IMAGE_TYPE_TAG: 'Image',
                    MESSAGE_TXT_TYPE_TAG: 'Large text',
                    MESSAGE_GET_ERROR_TAG: "Get history message error.",

                    SEARCH_TAG: "Search",
                    MESSAGE_LIST_TAG: "Messages",
                    EMPTY_LIST_TAG: "Empty",
                    MESSAGES: "Messages",
                    MESSAGES_PREVIEW: "Messages preview",
                    
                },
                
            }

        },

        cn: {
            COPYRIGHT_PPMESSAGE: "皮皮消息.",

            action: {
                ADD_TAG: "添加",
                
                CANCEL_TAG: "取消",
                CONFIRM_TAG: "确认",
                CREATE_TAG: "创建",

                DELETE_TAG: "删除",

                EDIT_TAG: '编辑',
                
                PREVIEW_TAG: "预览",
                
                SAVE_TAG: "保存",
                SEARCH_TAG: "搜索",
                SELECT_ALL_TAG: "全选",

                SUBMIT_TAG: "提交"
            },

            field: {
                CURRENT_PASSWORD_TAG: "当前密码",
                
                NEW_PASSWORD_TAG: "新密码",

                OWNER_TAG: "拥有者",

                SERVICE_GROUP_NAME_TAG: "组名字",
                SERVICE_GROUP_DESC_TAG: "组描述",

                SERVICE_USER_TAG: "客服人员",
                
                TEAM_NAME_TAG: "团队名称",
                
                USER_FULLNAME_TAG: "用户姓名",
                
                USER_EMAIL_TAG: "用户邮箱",

                USER_PASSWORD_TAG: "用户密码",

                MEMBERS_TAG: "成员"
            },
            
            error: {
                ADD_FAILED_TAG: "添加成功",

                EMAIL_TAKEN_TAG: "这个 Email 地址已经被别人使用了",

                ILLEGAL_CHARACTER_FOUND_TAG: "发现了非法字符",
                NEWPASSWORD_MISMATCH_TAG: "新密码和重复新密码不一致",
                NOTHING_CHANGED_TAG: "什么都没有改变",

                OLDPASSWORD_MISMATCH_TAG: "旧密码错误",
                OUT_OF_LENGTH_TAG: "超出长度限制",

                PARAMS_MISS_TAG: "缺参数",
                PASSWORD_NOT_MATCHED_TAG: "密码不匹配",
                
                SIGNIN_FAILED_TAG: "登入失败",
                
                UPDATE_FAILED_TAG: "更新失败",

                CREATE_FAILED_TAG: "创建失败",
            },

            success: {

                ADD_SUCCESSFULLY_TAG: "添加成功",
                
                CHANGE_PASSWORD_SUCCESS_TAG: "改密码成功",
                CHANGE_PASSWORD_FAIL_TAG: "改密码失败",

                REMOVE_SUCCESSFULLY_TAG: "删除成功",
                UPDATE_SUCCESSFULLY_TAG: "更新成功",

                CREATE_SUCCESSFULLY_TAG: "创建成功",

            },

            global: {
                ADD_GROUP_USER_TAG: "添加用户到此组",

                CHANGE_PASSWORD_TAG: "更改密码",
                
                COLOR_PICKED_NOT_RIGHT_TAG: "选取颜色异常",           
                COLOR_TAG: "颜色",

                COPY_CODE_TO_BODY: "复制下面的代码并置于您自己网站的 HTML 文件之中，确保在 <body> ... </body> 元素之间",
                
                CREATE_TEAM_TAG: "创建客服团队",

                CREATE_SERVICE_GROUP_TAG: "创建客服分组",

                DELETE_SERVICE_GROUP_TAG: "删除客服分组",

                DELETE_SERVICE_GROUP_INFO_TAG: "确认删除以下客服分组：",
                
                DEMO_DEPLOY_TO: "在这个网页可以查看部署效果",

                EDIT_SERVICE_GROUP_TAG: "编辑客服分组",
                
                PRIVATE_SETTINGS_TAG: "个人设置",
                
                RESET_PASSWORD_TAG: "重设密码",

                SERVICE_TEAM_TAG: "客服团队",
                
                SIGNUP_TAG: "注册",
                SIGNIN_TAG: "登入",
                SIGNOUT_TAG: "登出",

                SLOGAN_TAG: "Open Source Plug & Play Enterprise Message Communication Platform",
                
                START_SERVICE_TAG: "开始服务",

                TEAM_CONFIG_TAG: "团队设置",

                USER_ACCOUNT_TAG: "用户账户",

                WELCOME_INFO_TAG: "欢迎信息",
                
            },

            calendar:{
                TODAY_TAG: "今天",
                YESTERDAY_TAG:"昨天",
                LAST_7_DAYS_TAG:"最近7天",
                LAST_30_DAYS_TAG:"最近30天",
                THIS_MONTH_TAG:"本月",
                LAST_MONTH_TAG:"上一个月",
                /*按钮文本开始*/
                APPLY_LABEL_TAG:"应用",
                CANCEL_LABEL_TAG:"取消",
                FROM_LABEL_TAG:"从",
                TO_LABEL_TAG:"到",
                CUSTOM_RANGE_LABEL_TAG:"定制范围",
                monthname:{
                    JANUARY_TAG:"一月",
                    FEBRUARY_TAG:"二月",
                    MARCH_TAG:"三月",
                    APRIL_TAG:"四月",
                    MAY_TAG:"五月",
                    JUNE_TAG:"六月",
                    JULY_TAG:"七月",
                    AUGUST_TAG:"八月",
                    SEPTEMBER_TAG:"九月",
                    OCTOBER_TAG:"十月",
                    NOVEMBER_TAG:"十一月",
                    DECEMBER_TAG:"十二月",
                },
                /*按钮文本定义结束*/
            },//calendar   

            settings: {
                menu: {
                    DATA_ANALYSIS_TAG: "数据分析",
                    DATA_OVERVIEW_TAG: "数据总览",
                    HISTORY_MSG_TAG: "历史消息",
                    TEAM_CONFIG_TAG: "团队设置",
                    BASIC_CONFIG_TAG: "基本信息",
                    USER_INTERFACE_TAG: "用户界面",
                    MESSAGE_DISPATCH_TAG: "消息分流",
                    SERVICE_USER_TAG: "客服人员",
                    SERVICE_GROUP_TAG: "客服分组",
                    APP_INTEGRATE_TAG: "应用集成",
                    ACCOUT_CONFIG_TAG: "账户设置",
                    ADVANCED_CONFIG_TAG: "高级设置",
                    PUSH_CONFIG_TAG: "推送设置",
                },                                
            },

            statistics: {

                overview: {
                    OVERVIEW_TAG: '数据总览',
                    TODAY_CUSTOMER_TAG: '今日访客',
                    YESTERDAY_CUSTOMER_TAG: '昨日访客',
                    ALL_CUSTOMER_TAG: '累计访客',
                    ALL_MESSAGE_TAG: '累计消息',
                    REALTIME_DATA_TAG: '实时统计',
                    REALTIME_CUSTOMER_TAG: '访客',
                    REALTIME_SERVICE_TAG: '客服',
                    REALTIME_MESSAGE_TAG: '消息',
                    HISTORY_DATA_TAG: '历史统计',
                    HISTORY_CUSTOMER_TAG: '访客',
                    HISTORY_SERVICE_TAG: '客服',
                    HISTORY_MESSAGE_TAG: '消息',
                    MAX_RANGE_TAG: '最多30天',
                },

                historymessages: {
                    MESSAGE_FILE_TYPE_TAG: '文件',
                    MESSAGE_IMAGE_TYPE_TAG: '图片',
                    MESSAGE_TXT_TYPE_TAG: '文本消息',
                    MESSAGE_GET_ERROR_TAG: "获取历史信息错误",

                    MESSAGE_LIST_TAG: "消息列表",
                    EMPTY_LIST_TAG: "没有任何匹配的会话",
                    MESSAGES: "条消息",
                    MESSAGES_PREVIEW: "消息预览",
                    
                },
                
            }

        },

    })

    .config(function($translateProvider, yvTransTags) {

        $translateProvider.translations("en", yvTransTags.en);
        $translateProvider.translations("zh-CN", yvTransTags.cn);

        $translateProvider.registerAvailableLanguageKeys(["en", "zh-CN"], {
            "en": "en",
            "en-US": "en",
            "en-UK": "en",
            "zh-CN": "zh-CN"
        });

        $translateProvider.determinePreferredLanguage(function() {
            return window.navigator.userLanguage || window.navigator.language;
        });

        $translateProvider.fallbackLanguage("en", "zh-CN");

        //$translateProvider.useSanitizeValueStrategy('sanitize');
        $translateProvider.useSanitizeValueStrategy('escape');

    });

angular.module("this_app.route", ["ui.router", "this_app.constants"])

    .config(function($stateProvider, $urlRouterProvider, yvConstants, blockUIConfig) {
        blockUIConfig.autoInjectBodyBlock = false;

        $stateProvider

            .state("app", {
                abstract: true,
                url: "/app",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "app.html",
                controller: "AppCtrl"
            })

            .state("app.signin", {
                url: "/signin",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "signin.html",
                controller: "SignInCtrl"
            })

            .state("app.error", {
                url: "/error",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "404.html",
                controller: "ErrorCtrl"
            })

            .state("app.createaccount", {
                url: "/createaccount/:account",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "createaccount.html",
                controller: "CreateAccountCtrl"
            })

            .state("app.settings.teamprofile", {
                url: "/teamprofile",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/teamprofile.html",
                controller: "ApplicationProfileCtrl"
            })

            .state("app.settings.configuration", {
                url: "/configuration",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/welcome.html",
                controller: "ApplicationWelcomeCtrl"
            })
        
            .state("app.glance", {
                url: "/glance",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/glance.html",
                controller: "GlanceCtrl"
            })
        
            .state("app.settings.teampeople", {
                url: "/teampeople",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/people.html",
                controller: "ApplicationPeopleCtrl"
            })

            .state("app.settings.overview", {
                url: "/overview",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/overview.html",
                controller: "StatisticsOverviewCtrl"
            })

            .state("app.settings.historymessage", {
                url: "/historymessage",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/historymessage.html",
                controller: "StatisticsHistoryMessageCtrl"
            })

            .state("app.settings.integrate", {
                url: "/integrate",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/integrate.html",
                controller: "IntegrateCtrl"
            })

            .state("app.settings", {
                abstract: true,
                url: "/settings",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/settings.html",
                controller: "SettingsCtrl"
            })

            .state("app.settings.profile", {
                url: "/profile",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/userprofile.html",
                controller: "SettingsProfileCtrl"
            })

            .state("app.settings.account", {
                url: "/account",
                templateUrl: yvConstants.TEMPLATE_PREFIX + "settings/account.html",
                controller: "SettingsAccountCtrl"
            })

        ;
      
        $urlRouterProvider.otherwise("/app/signin");

    });


angular.module("this_app.services", []);

angular.module("this_app", [
    "base64",
    "ngCookies",
    "toastr",
    "blockUI",
    "angularUtils.directives.dirPagination",
    "angularFileUpload",
    "ui.router",
    "ngMaterial",
    "ngFileUpload",
    "this_app.constants",
    "this_app.i18n",
    "this_app.route",
    "this_app.services",
])

    .run(function($rootScope, $location, $timeout) {
        // if (window.PP) {
        //     PP.boot({
        //         app_uuid: 'a600998e-efff-11e5-9d9f-02287b8c0ebf', 
        //     }, function(isSuccess, errorCode) {
        //         console.log("PPCOM boot: ", errorCode);
        //     });
        // }        
    })

;

// @description
//     - filter by filter_keys
//     - sort by sort_key (default updatetime)
//     - front-end pagination
//
// @param settings
// {
//     page_size: default 12
//     page_offset: 0 ~ +Infinity
//
//     members: which to be pagination
//     filter_keys: member[key] to be filtered
//     filter_value: `your keyword`, default is ''
//     sort_key: default updatetime
//     sort: `true/false`, default is `true`, sort by `updatetime` in Desending order
// }
//
// @return
// {
//     page: [ memberA, memberB, ... ], // current page
//     total: totalNumber // total user's count after filtered
// }

angular.module("this_app.services").factory("yvPagination", $yvPaginationService);

$yvPaginationService.$inject = [];

function $yvPaginationService() {
    
    var _page = function(settings, members) {
        var startIndex = settings.page_offset * settings.page_size,
            endIndex = startIndex + settings.page_size,
            i = startIndex,
            result = [];

        var member;
        while ( (member = members[i++]) !== undefined && i <= endIndex ) {
            result.push(member);
        }
        return result;
    };

    var _sort = function(settings, members) {
        if ( !settings.sort ) return members;

        return members.sort(compare);
        
        function compare(a, b) {
            return a[settings.sort_key] > b[settings.sort_key] ? -1 : 1;
        }
    }

    var _filter = function(settings) {
        if (settings.filter_value === '') {
            return settings.members || [];
        }
        
        var keyword = settings.filter_value,
            regex = new RegExp( '.*' + keyword + '.*', 'g' ),
            result = [];
            
        angular.forEach(settings.members, function(value, index) {
            for (var i = 0; i < settings.filter_keys.length; i++) {
                if (regex.test(value[settings.filter_keys[i]])) {
                    result.push( value );
                    break;
                }
            }
        });
        return result;
    };
    
    var _pagination = function(settings) {
        var PAGE_SIZE = 12;
        var _settings = angular.extend({
            filter_value: '',
            page_size: PAGE_SIZE,
            page_offset: 0,
            sort_key: 'updatetime',
            sort: true
        }, settings),
            _filtered = _filter(_settings),
            _total = _filtered.length,
            _one = _page(_settings, _sort(_settings, _filtered));

        return {total: _total, page: _one};
    };

    return {
        pagination: function(settings) {
            return _pagination(settings);
        }
    };
}

$yvAjaxService.$inject = ["$state", "$timeout", "$http", "$cookies", "yvUser", "yvConstants", "yvUtil", "yvLog", "yvDebug"];
function $yvAjaxService($state, $timeout, $http, $cookieStore, yvUser, yvConstants, yvUtil, yvLog, yvDebug) {

    var _admin = {
        session_uuid: null,
        uuid: null,
        name: null,
        fullname: null,
        icon: null,
    };

    var _base_post_auth = function( authString ) {
        var _auth_url = "/ppauth/token";
        var _auth_data = authString;
        var _auth_config = {};
        
        _auth_config.url = _auth_url;
        _auth_config.method = "POST";
        _auth_config.data = _auth_data;
        _auth_config.headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        };
        yvLog.d("AUTH POST url: %s, data: %o.", _auth_config.url, _auth_config.data);
        return $http(_auth_config);
    };

    var _post_auth = function(_data) {
        var _auth_data = "grant_type=password&user_email=" + _data.user_email
            + "&user_password=" + _data.user_password
            + "&client_id=" + yvConstants.PPCONSOLE_API.key;
        return _base_post_auth( _auth_data );
    };

    var _get_credentials_token = function() {
        var _auth_data = "grant_type=client_credentials"
            + "&client_secret=" + yvConstants.PPCONSOLE_API.secret
            + "&client_id=" + yvConstants.PPCONSOLE_API.key;
        return _base_post_auth( _auth_data );
    };

    var _apiPostWithToken = function(_url, _data, _token) {
        _data = _data || {};

        var apiUrl = '/api' + _url;
        var accessToken = _token;
        accessToken = accessToken.replace(/\"/g, "");
        
        return $http({
            headers: {
                "Content-Type": "application/json;charset=utf-8",
                "Authorization": "OAuth " + accessToken,
            },
            method: 'POST',
            cache: false,
            url: apiUrl,
            data: _data
        });
    };
    
    var _apiPost = function(_url, _data) {
        return _apiPostWithToken(_url, _data, $cookieStore.get(yvConstants.COOKIE_KEY.ACCESS_TOKEN));
    };

    // @see mdm/mdm/api/error.py API_ERR
    var API_ERR = {
        NO_ERR: 0,
        NO_PARA: 6,
        EX_USER: 22
    };

    return {
        login: function(user) {
            return _post_auth(user);
        },

        ppconsole_get_overview_number : function(app_uuid) {
            return _apiPost("/PPCONSOLE_GET_OVERVIEW_NUMBER", {app_uuid: app_uuid});
        },

        ppconsole_get_real_time_customer_number : function(app_uuid) {
            return _apiPost("/PPCONSOLE_GET_REAL_TIME_CUSTOMER_NUMBER", {app_uuid: app_uuid});
        },

        ppconsole_get_real_time_service_number : function(app_uuid) {
            return _apiPost("/PPCONSOLE_GET_REAL_TIME_SERVICE_NUMBER", {app_uuid: app_uuid});
        },

        ppconsole_get_real_time_message_number : function(app_uuid) {
            return _apiPost("/PPCONSOLE_GET_REAL_TIME_MESSAGE_NUMBER", {app_uuid: app_uuid});
        },

        ppconsole_get_service_number_by_range : function(app_uuid, begin, end) {
            return _apiPost("/PPCONSOLE_GET_SERVICE_NUMBER_BY_RANGE", {app_uuid: app_uuid, begin_date: begin, end_date: end});
        },

        ppconsole_get_customer_number_by_range : function(app_uuid, begin, end) {
            return _apiPost("/PPCONSOLE_GET_CUSTOMER_NUMBER_BY_RANGE", {app_uuid: app_uuid, begin_date: begin, end_date: end});
        },

        ppconsole_get_message_number_by_range : function(app_uuid, begin, end) {
            return _apiPost("/PPCONSOLE_GET_MESSAGE_NUMBER_BY_RANGE", {app_uuid: app_uuid, begin_date: begin, end_date: end});
        },
        
        logout: function(user_uuid) {
            return _apiPost("/PPCONSOLE_LOGOUT", {user_uuid: user_uuid});
        },

        get_user_detail: function(user_uuid) {
            return _apiPost("/PP_GET_USER_DETAIL", {user_uuid: user_uuid});
        },

        get_user_detail_with_password: function(user_uuid) {
            return _apiPost("/PP_GET_USER_DETAIL", {user_uuid: user_uuid, return_password: true});
        },

        get_admin_detail: function(user_uuid) {
            return _apiPost("/PP_GET_ADMIN_DETAIL", {user_uuid: user_uuid});
        },

        get_admin_detail_with_password: function(user_uuid) {
            return _apiPost("/PP_GET_ADMIN_DETAIL", {user_uuid: user_uuid, return_password: true});
        },

        is_email_valid: function(requestParams) {
            return _apiPost("/PP_IS_EMAIL_VALID", requestParams);
        },

        get_app_info: function(requestParams) {
            return _apiPost('/PP_GET_APP_INFO', requestParams);
        },

        update_app_info: function(requestParams) {
            return _apiPost('/PP_UPDATE_APP_INFO', requestParams);
        },

        create_user: function(requestParams) {
            return _apiPost("/PP_CREATE_USER", requestParams);
        },

        update_user: function(requestParams) {
            return _apiPost('/PP_UPDATE_USER', requestParams);
        },

        remove_user: function(p) {
            return _apiPost("/PP_REMOVE_USER", p);
        },

        get_conversation_list: function(requestParams) {
            return _apiPost('/PP_GET_CONVERSATION_LIST', requestParams);
        },

        // get single conversation's history messages
        get_history_messages: function(requestParams) {
            return _apiPost('/PP_PAGE_HISTORY_MESSAGE', requestParams);
        },

        get_service_user_list: function() {
            return _apiPost('/PP_GET_SERVICE_USER_LIST', {});
        },

        get_api_info: function(requestParams) {
            return _apiPost('/PP_GET_API_INFO', requestParams);
        },

        get_credentials_token: function() {
            return _get_credentials_token();
        },

        signup: function(requestParams, credentials_token) {
            return _apiPostWithToken('/PPCONSOLE_SIGNUP', requestParams, credentials_token);
        },

        send_new_password: function(requestParams, credentials_token) {
            return _apiPostWithToken('/PPCONSOLE_SEND_NEW_PASSWORD', requestParams, credentials_token);
        },

        auth: function(user) {
            return _post_auth(user);
        },

        ///////////// API_ERR_CODE ////////////////
        API_ERR: API_ERR
        
    };
} // end $yvAjaxService

angular.module("this_app.services").factory("yvAjax", $yvAjaxService);

$yvUserService.$inject = [];
function $yvUserService() {

    var _user = {
        uuid: null,
        
        app_uuid: null,
        session_uuid: null,
        
        email: null,
        fullname: null,
        
        icon: null,
        lang: null,
        role: null,
        logined: false,
        password: null,

        status: null,

        firstname: null,
        lastname: null,

        company: null,
        team: null,

        access_token: null,
    };

    return {
        get: function (attribute) {
            if (arguments.length === 0) {
                return _user;
            }
            if (_user.hasOwnProperty(attribute)) {
                return _user[attribute];
            }
            return null;
        },

        set: function (attribute, value) {
            if (_user.hasOwnProperty(attribute)) {
                _user[attribute] = value;
            }
        },

        is_admin_user: function() {
            return _user && _user.status === 'ADMIN';
        },

        set_company: function(_company) {
            _user.company = _company;
        },

        get_company: function() {
            return _user.company;
        },

        set_lastname: function(_name) {
            _user.lastname = _name;
        },
        
        get_lastname: function() {
            return _user.lastname;
        },

        set_firstname: function(_name) {
            _user.firstname = _name;
        },
        
        get_firstname: function() {
            return _user.firstname;
        },
        
        set_status: function(_status) {
            _user.status = _status;
        },

        get_status: function() {
            return _user.status;
        },
        
        get_password: function() {
            return _user.password;
        },

        set_password: function(password) {
            _user.password = password;
        },
        
        get_session: function() {
            return _user.session_uuid;
        },

        set_session: function(_id) {
            _user.session_uuid = _id;
        },

        set_email: function(_email) {
            _user.email = _email;
        },

        get_email: function() {
            return _user.email;
        },
        
        set_fullname: function(_name) {
            _user.fullname = _name;
        },

        get_fullname: function() {
            return _user.fullname;
        },
        
        set_icon: function(_icon) {
            _user.icon = _icon;
        },

        get_icon: function() {
            return _user.icon;
        },
                
        set_uuid: function(_uuid) {
            _user.uuid = _uuid;
        },

        get_uuid: function() {
            return _user.uuid;
        },
        
        set_language: function(_l) {
            _user.lang = _l;
        },

        get_language: function() {
            return _user.lang;
        },
        
        set_role: function(_role) {
            _user.role = _role;
        },

        get_role: function() {
            return _user.role;
        },
        
        set_logined: function(_logined) {
            _user.logined = _logined;
        },

        get_logined: function() {
            return _user.logined;
        },

        set_app_uuid: function(_uuid) {
            _user.app_uuid = _uuid;
        },

        get_app_uuid: function() {
            return _user.app_uuid;
        },

        set_team: function(_team) {
            if (_user.team == null) {
                _user.team = {};
            }
            if ( !_team ) {
                _user.team = _team;
            }
            for (var _i in _team) {
                if (_team.hasOwnProperty(_i)) {
                    _user.team[_i] = _team[_i];
                }
            }
            return;
        },

        get_team: function() {
            return _user.team;
        },

        set_team_agent: function(_agent_num) {
            _user.team.agent_num = _agent_num;
        },

        get_team_agent: function() {
            return _user.team.agent_num;
        },

        set_login_data: function(data) {
            console.log(">>>>>>>>>>>>>><<<<<<<<<<<<<<< data:%o", data);
            this.set_logined(true);
            angular.forEach(data, function(v, k) {
                _user[k] = v;
            });
            return;
        },

        //clean up all data and status
        logout: function() {
            for (var _i in _user) {
                _user[_i] = null;
            };
            _user["logined"] = false;
            console.log("===",this.get());
            return;
        },
    };
}

angular.module("this_app.services")
    .factory("yvUser", $yvUserService);

/*
 * guijin.ding@yvertical.com
 * copyright @ 2010-2015 
 * all rights reserved
 *
 */

$yvMime.$inject = [];
function $yvMime() {

    /*
      .doc     application/msword
      .docx    application/vnd.openxmlformats-officedocument.wordprocessingml.document
      .rtf     application/rtf
      .xls     application/vnd.ms-excel	application/x-excel
      .xlsx    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      .ppt     application/vnd.ms-powerpoint
      .pptx    application/vnd.openxmlformats-officedocument.presentationml.presentation
      .pps     application/vnd.ms-powerpoint
      .ppsx    application/vnd.openxmlformats-officedocument.presentationml.slideshow
      .pdf     application/pdf
      .swf     application/x-shockwave-flash
      .dll     application/x-msdownload
      .exe     application/octet-stream
      .msi     application/octet-stream
      .chm     application/octet-stream
      .cab     application/octet-stream
      .ocx     application/octet-stream
      .rar     application/octet-stream
      .tar     application/x-tar
      .tgz     application/x-compressed
      .zip     application/x-zip-compressed
      .z       application/x-compress
      .wav     audio/wav
      .wma     audio/x-ms-wma
      .wmv     video/x-ms-wmv
      .mp3 .mp2 .mpe .mpeg .mpg     audio/mpeg
      .rm      application/vnd.rn-realmedia
      .mid .midi .rmi     audio/mid
      .bmp     image/bmp
      .gif     image/gif
      .png     image/png
      .tif .tiff  image/tiff
      .jpe .jpeg .jpg     image/jpeg
      .txt      text/plain
      .xml      text/xml
      .html     text/html
      .css      text/css
      .js       text/javascript
      .mht .mhtml   message/rfc822
    */
    
    
    var _mime_icon = function(_mime) {
        var _prefix = "../img/";
        var _word = _prefix + "document-word.png";
        var _xsl = _prefix + "document-xls.png";
        var _pdf = _prefix + "document-pdf.png";
        var _ppt = _prefix + "document-ppt.png";
        var _plain = _prefix + "document-plain.png";
        
        var _map = {
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" : _word,
            "application/msword": _word,
            "application/vnd.ms-excel" : _xsl,
	        "application/x-excel": _xsl,
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : _xsl,
            "application/vnd.ms-powerpoint" : _ppt,
            "application/vnd.openxmlformats-officedocument.presentationml.presentation" : _ppt,
            "application/vnd.ms-powerpoint" : _ppt,
            "application/vnd.openxmlformats-officedocument.presentationml.slideshow" : _ppt,
            "application/pdf" : _pdf,
        };
        
        if (_map.hasOwnProperty(_mime)) {
            return _map[_mime];
        }
        
        return _plain;
    };


    return {
        mime_icon: function(_mime) {
            return _mime_icon(_mime);
        },
    };
}

angular.module("this_app").factory('yvMime', $yvMime);

$yvUtilService.$inject = ["$rootScope", "$translate", "$http", "$base64", "yvConstants", "yvLog"];
function $yvUtilService($rootScope, $translate, $http, $base64, yvConstants, yvLog) {

    var _is_test_host = function(host) {
        if (host.indexOf("ppmessage.cn") == -1) {
            return true;
        }
        return false;
    },

        // Message util
        messageUtil = (function() {

            return {
                getMessageSummary: function(lang, type, messageBody) {
                    
                    if (!lang || !type || !messageBody) return '';

                    var typeArray = lang;
                    
                    switch (type) {
                    case 'TEXT':
                        return messageBody;

                    case 'FILE':
                        return '[' + typeArray['statistics.historymessages.MESSAGE_FILE_TYPE_TAG'] + '] ' + JSON.parse(messageBody).name;

                    case 'IMAGE':
                        return '[' + typeArray['statistics.historymessages.MESSAGE_IMAGE_TYPE_TAG'] + ']';

                    case 'TXT':
                        return '[' + typeArray['statistics.historymessages.MESSAGE_TXT_TYPE_TAG'] + ']';

                    default:
                        return '';
                    }
                },

                getMessageFormatedDate: function(messageJsonBody) {
                    if (!messageJsonBody) return '';

                    if ( messageJsonBody.message_body &&
                         typeof messageJsonBody.message_body === 'string' ) {
                        var jsonMsg = JSON.parse( messageJsonBody.message_body );
                        return moment.unix( jsonMsg.ts ).format( 'YYYY-MM-DD HH:mm' );
                    }

                    return dateUtil.moment(messageJsonBody.updatetime).format('YYYY-MM-DD HH:mm');
                },

                getConversationUpdateTsInSeconds: function( conversation ) {
                    if ( !conversation ) return 0;
                    
                    if ( conversation.latest_message ) {
                        var msgStringBody = conversation.latest_message.message_body;
                        if ( msgStringBody && typeof msgStringBody === 'string' ) {
                            return JSON.parse( msgStringBody ).ts;
                        }
                    }
                    
                    return dateUtil.moment( conversation.updatetime ).unix();
                }
            }
            
        })(),

        // Icon Util
        iconUtil = (function() {

            var DEFAULT = yvConstants.DEFAULT_USER_ICON;

            return {

                // iconUtil.getIcon(); // return `yvConstants.DEFAULT_USER_ICON`
                // iconUtil.getIcon('xxx-xxx-xxx-xxx-xx'); // return '/download/xxx-xxx-xxx-xxx-xx';
                // iconUtil.getIcon('http://abc.com/logo.png'); // return 'http://abc.com/logo.png';
                getIcon : function(icon) {

                    if (!icon) return DEFAULT;

                    var isHttpLink = /(^https?:\/\/)|(^w{3})/.test(icon);
                    return isHttpLink ? icon : fileUtil.getFileDownloadUrl(icon);
                    
                }
                
            }
            
        })(),

        // Date util
        dateUtil = (function() {
            return {
                // `time`: '2015-12-03 11:12:02 123432'
                moment: function(time) {
                    return moment(time, 'YYYY-MM-DD HH:mm:ss SSS');
                }
            }
        })(),

        // File util
        fileUtil = (function() {

            return {
                
                getFileDownloadUrl: function(fid, fname) {
                    var url = '/download/download/' + fid;
                    fname && (url += "?file_name=" + fname);
                    return url;
                },

                // download large txt content
                getRemoteTextFileContent: function(url, successCallback, errorCallback) {
                    return $http({
                        method: "GET",
                        cache: false,
                        url: url,
                        cache: false,
                    }).then(function(response) {
                        if (successCallback) successCallback(response.data);
                    }, function(error) {
                        if (errorCallback) errorCallback(error);
                    });
                }
            }
            
        })(),

        validator = ( function() {

            var MIN_LENGTH = 1,
                MAX_LENGTH = 16,
                ERR_CODE = {
                    OK: 0, // everything is ok
                    MIN_LENGTH_LIMIT: 1, // password is too short
                    MAX_LENGTH_LIMIT: 2, // password is too long
                    CONTAIN_WHITESPACE_AT_HEAD_OR_TAIL: 3, // password can not contains whitespace at head and tail
                    REPEAT_PASSWORD_MIS_MATCH : 4 // second password miss match the first one
                };
            
            return {

                ERR_CODE: ERR_CODE,

                // @param password : your password
                validatePassword: function( password ) {
                    if ( !password || password.length < MIN_LENGTH ) return ERR_CODE.MIN_LENGTH_LIMIT;
                    if ( password.length > MAX_LENGTH ) return ERR_CODE.MAX_LENGTH_LIMIT;
                    if ( /(^\s+)|(\s+$)/g.test( password ) ) return ERR_CODE.CONTAIN_WHITESPACE_AT_HEAD_OR_TAIL;
                    return ERR_CODE.OK;
                },

                // @param password : your password
                // @param @optional repeatPassword : your repeat password
                validateRepeatPassword: function( password, repeatPassword ) {
                    var errorCode = this.validatePassword( password );
                    if ( errorCode !== ERR_CODE.OK ) return errorCode;
                    if ( password !== repeatPassword ) return ERR_CODE.REPEAT_PASSWORD_MIS_MATCH;
                    return ERR_CODE.OK;
                }
            }
            
        } )();

    return {
        
        translate: function(scope, var_name, langs, on_trans) {
            var _trans = function() {
                $translate(langs).then(function(_t) {
                    scope[var_name] = _t;
                    if (on_trans)
                        on_trans();
                });
            };

            var _remove_trans = $rootScope.$on('$translateChangeSuccess', _trans);
            _trans();

            scope.$on("$destroy", function() {
                _remove_trans();
            });
        },

        noti: function(nstring, success) {
            var _t = "danger";
            if (success) {
                _t = "success";
            }
            
            $.bootstrapGrowl(nstring, {
                ele: 'body', // which element to append to
                type: _t, // (null, 'info', 'danger', 'success')
                offset: {from: 'top', amount: 20}, // 'top', or 'bottom'
                align: 'center', // ('left', 'right', or 'center')
                width: 400, // (integer, or 'auto')
                delay: 4000, // Time while the message will be displayed. It's not equivalent to the *demo* timeOut!
                allow_dismiss: true, // If true then will display a cross to close the popup.
                stackup_spacing: 10 // spacing between consecutively stacked growls.
            });
        },

        uuid: function() {
            var d = new Date().getTime();
            var id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = (d + Math.random()*16)%16 | 0;
                d = Math.floor(d/16);
                return (c=='x' ? r : (r&0x7|0x8)).toString(16);
            });
            return id;
        },

        get_view_port: function() {
            var e = window,
                a = 'inner';
            if (!('innerWidth' in window)) {
                a = 'client';
                e = document.documentElement || document.body;
            }
            
            return {
                width: e[a + 'Width'],
                height: e[a + 'Height']
            };
        },

        is_valid_email: function (email) {
            var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
            return re.test(email);
        },

        base64_decode: function(input) {
            return $base64.decode(input);
        },

        base64_encode: function(input) {
            return $base64.encode(input);
        },
        
        http_protocol: function(host) {
            if(_is_test_host(host)) {
                return "http://";
            }
            return "https://";
        },

        ws_protocol: function(host) {
            if(_is_test_host(host)) {
                return "ws://";
            }
            return "wss://";
        },

        // check if a string contain unregular words
        regexp_check: function(str) {
            var pattern = RegExp("[\\u4E00-\\u9FFF\\dA-z@\-\_\\s*]+","i");
            if( !str || !str.match(pattern)) {
                return false;
            };
            var reg_length = str.match(pattern).toString().length;
            if (reg_length == str.length)
                return true;
            else
                return false;
        },

        formateTimestamp: function(time) {
            var dateString = moment(time).format('YYYY-MM-DD HH:mm:ss');
            return dateString;
        },
        
        // ---------------
        // Message Utils
        // ---------------

        messageUtil: messageUtil,

        // ---------------
        // Icon Utils
        // ---------------

        iconUtil: iconUtil,

        // ---------------
        // Moment Utils
        // ---------------

        dateUtil: dateUtil,

        // ---------------
        // File Utils
        // ---------------
        fileUtil: fileUtil,

        // ---------------
        // Validator Utils
        // ---------------
        validator: validator,

        isNull: function( any ) {
            return any === undefined || any === null;
        }
        
    };
}

angular.module("this_app.services")
    .factory("yvUtil", $yvUtilService);

angular.module("this_app").
   factory("yvType", [
    "yvConstants",
function (yvConstants) {

    function _get_subtype(message) {
        // message query from db
        if (message.message_subtype) {
            return message.message_subtype;
        }
        // incoming message message subtype
        if (message.ms) {
            return message.ms;
        }

        return null;
    }

    return {
        is_logout: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.LOGOUT) {
                return true;
            }
            return false;
        },

        is_document: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.DOCUMENT) {
                return true;
            }
            return false;
        },

        is_file: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.DOCUMENT) {
                return true;
            }
            if (subtype === yvConstants.MESSAGE_SUBTYPE.FILE) {
                return true;
            }
            return false;
        },

        is_video: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.VIDEO) {
                return true;
            }
            return false;
        },


        is_single_card: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.SINGLE_CARD) {
                return true;
            }
            return false;
        },

        is_multiple_card: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.MULTIPLE_CARD) {
                return true;
            }
            return false;
        },

        is_text: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.TEXT) {
                return true;
            }
            return false;
        },

        is_txt: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.TXT) {
                return true;
            }
            return false;
        },

        is_image: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.IMAGE) {
                return true;
            }
            return false;
        },

        is_gps_location: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.GPS_LOCATION) {
                return true;
            }
            return false;
        },

        is_audio: function (message) {
            var subtype = _get_subtype(message);
            if (subtype === yvConstants.MESSAGE_SUBTYPE.AUDIO) {
                return true;
            }
            return false;
        },

        is_left: function (message) {
            if (message.message_direction === yvConstants.MESSAGE_DIR.DIR_IN) {
                return true;
            }
            return false;
        },

        is_right: function (message) {
            if (message.message_direction === yvConstants.MESSAGE_DIR.DIR_OUT) {
                return true;
            }
            return false;
        },

        is_left_audio: function (message) {
            if (this.is_left(message) && this.is_audio(message)) {
                return true;
            }
            return false;
        },

        is_right_audio: function (message) {
            if (this.is_right(message) && this.is_audio(message)) {
                return true;
            }
            return false;
        }
    };
}]);

// convenience to manager log
// let you easily find you log messages !

// Copy and modified from ppcom/jquery/src/service/pp-service-debug.js
// @author kun.zhao@yvertical.com
//
// How to use:
//
// yvLog.h().d(obj1, obj2, obj3, ...);
//

$yvLog.$inject = [];
function $yvLog() {

    var DEBUG = true, // open or close debug
        DEBUG_WARNING = true, // debug `warning` info
        
        supportConsole = !(typeof console === "undefined" || typeof console.log === "undefined"),
        supportConsoleApply = supportConsole && !(typeof console.log.apply === "unknown" || typeof console.log.apply === "undefined");

    // Highlight
    function h() {
        var cssStr = "%c" + '↓↓↓↓↓↓↓↓↓↓';
        d(cssStr, "font-size:28px; color:blue;");
        return this;
    }

    // Debug
    function d() {
        if (DEBUG) {
            var args = Array.prototype.slice.call(arguments);
            supportConsoleApply ? console.log.apply(console, args) : console.log(args);
        }
        return this;
    }

    function w() {
        if ( DEBUG_WARNING ) {
            var args = Array.prototype.slice.call(arguments);
            supportConsoleApply ? console.log.apply(console, args) : console.log(args);
        }
        return this;
    }
    
    return {
        h: h,
        d: d,
        w: w
    }
}

angular.module("this_app.services")
    .factory("yvLog", $yvLog);

//////////// MAIN GOLE: HELP US TO DEBUG FROM CONSOLE ///////////////////////////
(function() {

    yvDebug.$inject = [ 'yvLog' ];
    function yvDebug( yvLog ) {

        var ON = true,

            api = {
                attach: attach,

                h: yvLog.h,
                d: yvLog.d,
                w: yvLog.w
            };
        
        return api;

        // attach `func` to `window` obj to help us to see the inner world of our app from `console`
        function attach( name, func ) {
            // `Function.name` is part of ES6
            if ( window !== undefined && ON && name !== undefined ) window [ name ] = func;
            return api;
        }
        
    }

    angular.module( "this_app.services" ).factory( "yvDebug", yvDebug );

})();

/**
 * Prepare info for each page when init
 *
 * - For each page, on `_init` method, you should call `yvLogin.prepare` to prepare `active user` and `active user_team` info
 *
 * ```javascript
 * yvLogin.prepare( function() { // prepare ok ... }, { $scope: $scope, onRefresh: function() { // refresh page ... } } );
 * ```
 * 
 * - Difference between `activeUser` and `yvLoginedUser`. 
 *
 *   for `Non-Admin` user, `yvLoginedUser` is equal to `yvActiveUser`; 
 *
 *   for `Admin` user, `yvLoginedUser` is `Admin User`, and `yvActiveUser` is current active user which associated with current
 *   selected app. if you pass `{ $scope: xxx, onRefresh: xxx }` param in `yvLogin.prepare` method, then `yvLogin` will try to 
 *   bind `$destroy` and `yvConstants.BROADCAST_EVENT_KEY.REFRESH_PAGE` event to `$scope`, when a new app is selected, then you 
 *   will receive a notify callback to let you `refresh page`;
 * 
 * ----------------------------------------------------
 * |                               ( yvLoginedUser )  | <= `website header`
 * ----------------------------------------------------
 * |                                                  | 
 * |                                                  |
 * |                                                  |
 * |           ( activeUser: yvUser )                 | <= `website content`
 * |                                                  |
 * |                                                  |
 * |                                                  |
 * ----------------------------------------------------
 *
 */

angular.module( "this_app.services" ).factory( "yvLogin", yvLogin );
yvLogin.$inject = [ 'yvUser', 'yvAjax', 'yvDebug',
                    'yvConstants', 'yvLoginedUser',
                    '$rootScope', "$state", "$timeout", "$cookies" ];

function yvLogin( yvUser, yvAjax, yvDebug,
                  yvConstants, yvLoginedUser,
                  $rootScope, $state, $timeout, $cookieStore ) {

    var ERROR_CODE = { OK: 0, STATUS_ILLEGAL: 1, LOGIN_ERROR: 2 },

        STATUS = {
            OWNER_0: 1 << 0,
            OWNER_1: 1 << 1,
            OWNER_2: 1 << 2,
            ADMIN: 1 << 3
        },

        activeUser;
    
    return {
        
        ERROR_CODE: ERROR_CODE,
        STATUS: STATUS,

        prepare: prepare,
        updateLoginedUser: updateLoginedUser,
        updateActiveUser: updateActiveUser,

        check_logined: check_logined,
        checkActiveUser: checkActiveUser,
        checkLoginedUser: checkLoginedUser,

        getLoginedUser: getLoginedUser,
        isLogined: isLogined,
        setLogined: setLogined,
        logout: logout,

        updateActiveUserCookieKey: updateActiveUserCookieKey,
        updateLoginedUserCookieKey: updateLoginedUserCookieKey
        
    };

    function prepare( callback, config ) {
        if (yvUser.get_team()) {
            if (callback) {
                callback();
            }
        } else {
            $state.go("app.signin");
        }
    }

    

    function updateLoginedUser( user ) {
        yvLoginedUser.update( user );
        yvDebug.d( '===logined user===', user );
    }

    function updateActiveUser( user ) {
        yvUser.set_login_data( user );
        activeUser = user;
        yvDebug.d( '===active user===', user );
    }

    function updateActiveUserCookieKey( userUUID ) {
        $cookieStore.put(yvConstants.COOKIE_KEY.ACTIVE_USER_UUID, userUUID);
    }

    function updateLoginedUserCookieKey( userUUID, accessToken ) {
        $cookieStore.put(yvConstants.COOKIE_KEY.ACCESS_TOKEN, accessToken); // store access_token
        $cookieStore.put(yvConstants.COOKIE_KEY.LOGINED_USER_UUID, userUUID);
    }

    function getLoginedUser() {
        return yvLoginedUser.get();
    }

    function isLogined() {
        return yvLoginedUser.isLogined();
    }

    function setLogined( l ) {

        yvLoginedUser.setLogined( l );

        if ( l ) {
            var broadcastObj = {
                isAdmin: yvLoginedUser.isAdminUser()
            };
            $rootScope.$emit( yvConstants.BROADCAST_EVENT_KEY.LOGIN_FINISHED, broadcastObj );
            yvDebug.d( '===event:login finished===' );
        }
        
    }

    function logout() {
        
        yvLoginedUser.logout();
        activeUser = null;
        yvUser.logout();

        $cookieStore.remove( yvConstants.COOKIE_KEY.LOGINED_USER_UUID );
        $cookieStore.remove( yvConstants.COOKIE_KEY.ACTIVE_USER_UUID );
        $cookieStore.remove( yvConstants.COOKIE_KEY.ACCESS_TOKEN );
        
    }

    function checkActiveUser( logined, unlogined, state ) {
        if ( activeUser ) {
            if ( logined ) logined( activeUser );
            return;
        }        
    }

    function checkLoginedUser( logined, unlogined, state ) {
        check_logined( logined, unlogined, state );
    }

    function check_logined( logined, unlogined, state ) {
        if ( yvLoginedUser.get() ) {
            if ( logined ) logined( yvLoginedUser.get() );
            return;
        }        
    }
    
}



//// this is data service for `ApplicationPeopleCtrl` ///////
(function() {

    yvAppPeopleService.$inject = [ 'yvAjax', 'yvUser', 'yvDebug' ];
    function yvAppPeopleService( yvAjax, yvUser, yvDebug ) {

        var DEFAULT_PAGE_COUNT = 12, jQuery = $;
        
        ////// Api //////////

        return {
            getAppServiceUsers: getAppServiceUsers,
            getAppServiceUsersWithPagination: getAppServiceUsersWithPagination,
            createServiceUser: createServiceUser
        }

        ////// Implementation //////////

        function getAppServiceUsers(successCallback, errorCallback) {
            
            yvAjax.get_service_user_list().then(function( response ) {
                if (response.data && response.data.error_code == 0) {
                    onSuccess(response.data);
                } else {
                    onError(response);
                }
            }, function(e) {
                onError(e);
            });
            
            function onSuccess( data ) {
                var appTeamServiceUsers = data.list || [];
                successCallback && successCallback( appTeamServiceUsers );
            }

            function onError( e ) {
                errorCallback && errorCallback( [] );
            }
            
        }

        // @description
        //     - filter by user_fullname or user_email
        //     - support pagination ( in front-end )
        //     - support sort by `updatetime`
        //
        // @param settings
        // {
        //     length: `count of each page`, default is 12
        //     start_page: 0 ~ +Infinity
        //     
        //     filter_keyword: `your keyword`, default is ''
        //     sort: `true/false`, default is `true`, sort by `updatetime` in Desending order
        // }
        //
        // @return
        // {
        //     users: [ userA, userB, ... ], // current page users
        //     total: totalNumber // total user's count after filtered
        // }
        function getAppServiceUsersWithPagination( settings, successCallback, errorCallback ) {
            getAppServiceUsers( function( users ) {
                
                // `angular.extend(dst, src);`
                // @see http://docs.angularjs.cn/api/ng/function/angular.extend
                var s = angular.extend( { filter_keyword: '', length: DEFAULT_PAGE_COUNT, start_page: 0, sort: true }, settings ),
                    filteredUsers = filter( s, users ),
                    total = filteredUsers.length,
                    paginationUsers = pagination( s, sort( s, filteredUsers ) );
                
                if (successCallback) {
                    successCallback({
                        users: paginationUsers,
                        total: total
                    });
                }   
            }, function( e ) {
                errorCallback && errorCallback(e);
            });
        }

        function createServiceUser( settings, successCallback, errorCallback ) {
            yvAjax.create_user( settings ).then( successCallback, errorCallback );
        }

        function filter( settings, users ) {
            
            if ( settings.filter_keyword === '' ) {
                return users || [];
            }

            var keyword = settings.filter_keyword,
                regex = new RegExp( '.*' + keyword + '.*', 'g' ),
                result = [];
            
            angular.forEach( users, function( value, index ) {
                if ( regex.test( value.user_email ) || regex.test( value.user_fullname ) ) {
                    result.push( value );
                }
            } );

            return result;
        }

        function pagination( settings, users ) {
            var pageCount = settings.length,
                pageNum = settings.start_page,
                len = users.length,
                startIndex = pageNum * pageCount,
                endIndex = startIndex + pageCount,
                i = startIndex,
                result = [];

            var user;
            while ( ( user = users [ i++ ] ) !== undefined && i <= endIndex ) {
                result.push( user );
            }
            return result;            
        }

        function sort( settings, users ) {
            if ( !settings.sort ) return users;
            return users.sort( compare );
            function compare( a, b ) {
                return a.updatetime > b.updatetime ? -1 : 1;
            }
        }
    }

    angular.module("this_app.services").factory("yvAppPeopleService", yvAppPeopleService);

} )();

(function() {

    yvCallbackService.$inject = [];
    function yvCallbackService() {
        
        return {
            response: onResponse,
            success: onSuccess,
            error: onError
        }

        function onResponse( r, successCallback, errorCallback ) {
            if ( r && r.error_code === 0 ) {
                onSuccess( r, successCallback );
            } else {
                onError( r, errorCallback );
            }
        }

        function onSuccess( r, successCallback ) {
            successCallback && successCallback( r );
        }

        function onError( e, errorCallback ) {
            errorCallback && errorCallback( e );
        }
        
    }

    angular.module("this_app.services").factory( "yvCallbackService", yvCallbackService );

} )();

angular.module("this_app.services").factory( "yvLoginedUser", yvLoginedUser );
yvLoginedUser.$inject = [];

function yvLoginedUser() {

    var user,        
        isLogin = false;

    return {
        isLogined: isLogined,
        setLogined: setLogined,
        get: get,
        update: update,
        logout: logout,
        isAdminUser: isAdminUser,

        userUUID: userUUID
    }

    function isLogined() {
        return isLogin;
    }

    function setLogined ( l ) {
        isLogin = l;
    }

    function get () {
        return user;
    }

    function update ( u ) {
        user = u;
    }

    function logout () {
        user = null;
        isLogin = true;
    }

    function isAdminUser() {
        var adminUser = false;
        if ( get() ) {
            if ( get().user_status === 'ADMIN' ) {
                adminUser = true;
            }
        }
        return adminUser;
    }

    function userUUID() {
        if ( get() ) {
            return get().uuid;
        }
        return undefined;
    }    
}
    

angular.module("this_app")
    .controller("LogoutCtrl", function($scope, $cookies, $state, $timeout, yvAjax) {
        console.log("LOGOUT..................................");
        yvAjax.logout(WebRole);
        delete $cookies.PORTALUSER_SESSION_ID;
        delete $cookies.PORTALADMIN_SESSION_ID;
        $timeout(function() {
            $state.go("app.main", null, {reload: true});
        }, 100);
    }); // end logout ctrl

angular.module("this_app")
    .controller("SignInCtrl", function($scope, $state, $stateParams, $timeout, $translate, $cookieStore, yvAjax, yvUtil, yvUser, yvTransTags, yvConstants, yvDebug, yvLogin) {

        $scope.user = {
            user_status: "OWNER_2",
            is_service_user: false,
            user_fullname: "",
            user_email: "",
            user_password: "",
            app_name: "",

            user_password_is_visible: false,
            password_input_type: "password",
        };

        var get_token = function (onSuccess, onError) {
            yvAjax.get_credentials_token()
                .success( function( response ) {
                    if (response.access_token) {
                        onSuccess && onSuccess( response );
                    } else {
                        onError && onError( response );
                    }
                } )
                .error( function( error ) {
                    onError && onError( error );
                } );
        };
                
        var signin = function(user) {
            var password = sha1($scope.user.user_password);
            yvAjax.login({user_email: $scope.user.user_email, user_password: password}).then(function(response) {
                var data = response.data;

                console.log("login return : %o", response);
                
                if (data.error_code != 0) {
                    $scope.toast_error_string("SIGNIN_FAILED_TAG");
                    return;
                }
                
                yvLogin.updateActiveUserCookieKey( data.user_uuid );
                yvLogin.updateLoginedUserCookieKey( data.user_uuid, data.access_token );

                yvAjax.get_user_detail_with_password(data.user_uuid).then(function(response) {

                    var _udata = response.data;
                    if (_udata.error_code != 0) {
                        return;
                    }

                    yvLogin.updateActiveUser( angular.copy( _udata ) );
                    yvLogin.updateLoginedUser( angular.copy( _udata ) );
                    yvLogin.setLogined( true );

                    yvUser.set_team(_udata.team);
                    
                    var _url = yvConstants.USER_STATUS[_udata.user_status];
                    
                    if (_udata.user_status == "SERVICE") {
                        yvLogin.updateActiveUser( _udata );
                        $scope.start_ppmessage(true);
                        return;
                    }
                    
                    if (_udata.user_status == "OWNER_2") {
                        $state.go(_url);
                        return;
                    }
                    
                    yvDebug.d("do not know how to handle user_status: %s", data.user_status);
                    return;
                }, function() {
                    $scope.toast_error_string("SIGNIN_FAILED_TAG");
                });
            }, function(response) {
                $scope.toast_error_string("SIGNIN_FAILED_TAG");
            });
            
        };
        
        $scope.sign_in_form_submit = function() {
            signin($scope.user);
        };

        $scope.show_user_password = function(show) {
            if (show) {
                $scope.user.user_password_is_visible = true;
                $scope.user.password_input_type = "text";
            } else {
                $scope.user.user_password_is_visible = false;
                $scope.user.password_input_type = "password";
            }
        };
        
    }); // end login ctrl

angular.module("this_app")
    .controller("AppCtrl", function($window, $scope, $rootScope, $location, $state, $translate, $timeout, $cookies, $filter, toastr, yvAjax, yvUser, yvUtil, yvDebug, yvLogin, yvConstants, yvLoginedUser, yvTransTags) {

        $scope._languages = [
            {lang: "zh-CN"},            
            {lang: "en"},
        ];

        var isLogin = yvLogin.isLogined();

        $scope.menuStyle = {
            'margin-top': '24px'
        }; // menu style

        var _getPreferredLanguage = function() {
            var _p = $translate.use();
            var _l = $scope._languages.length;
            for (var i = 0; i < _l; i++) {
                if ($scope._languages[i].lang == _p) {
                    return $scope._languages[i].lang;
                }
            }
            return $scope._languages[0].lang;
        };
        
        var _getLanguage = function() {
            var _l = yvUser.get_language();
            if (_l == null) {
                _l = _getPreferredLanguage();
                yvUser.set_language(_l);
            }
            return _l;
        };
        
        $scope.toggle_mobile_menu = function($event) {
            if ($(".mobile-menu").hasClass("active")) {
                $(".mobile-menu").removeClass("active");
                $(".mobile-menu-items").removeClass("active");
            } else {
                $(".mobile-menu").addClass("active");
                $(".mobile-menu-items").addClass("active");
            }
        };

        $scope.click_mobile_items = function($event) {
            if ($(".mobile-menu").hasClass("active")) {
                $(".mobile-menu").removeClass("active");
                $(".mobile-menu-items").removeClass("active");
            } 
        };

        $scope.switch_to = function(route_str) {
            var url = 'app.' + route_str;
            $state.go(url);
        };
        
        $scope.main = function() {
            window.open("https://ppmessage.com");
        };
        
        $scope.switch_to_english = function () {
            yvUser.set_language("en");
            $translate.use("en");
        };

        $scope.switch_to_chinese = function () {
            yvUser.set_language("zh-CN");
            $translate.use("zh-CN");
        };

        $scope.is_lang_english = function() {
            var _l = yvUser.get_language();
            if (_l == null) {
                return true;
            }
            if (_l == "en") {
                return true;
            }
            return false;
        };
        
        $scope.get_user_fullname = function() {
            return yvLogin.getLoginedUser() ? yvLogin.getLoginedUser().user_fullname : "";
        };

        $scope.is_logined = function() {
            return isLogin;
        };

        $scope.login = function() {
            $state.go("app.signin");
        };

        $scope.show_settings_menu = function() {
            return yvLoginedUser.get() && yvLoginedUser.get().user_status === "OWNER_2";
        };
        
        $scope.start_ppmessage = function(in_this) {
            var userUuid = yvUser.get_uuid();
            var password = yvUser.get("user_password");
            var userEmail = yvUser.get("user_email");
            var body = {
                user_email: userEmail,
                user_password: password,
                user_uuid: userUuid
            };
            console.log("autologin with: %s", body);
            body = yvUtil.base64_encode(JSON.stringify(body));
            var http = yvUtil.http_protocol(location.hostname);
            var url = http + location.host + "/ppkefu/#/noapp/auto-login/" + body;
            if (in_this) {
                self.location = url;
            } else {
                window.open(url, "ppmessage" + "-" + userEmail);
            }
        };
        
        $scope.logout = function() {
            var _logout = yvAjax.logout("user");
            $timeout(function() {
                yvLogin.logout();
                isLogin = false;
                $scope.menuStyle[ 'margin-top' ] = '24px';
                $scope.isAdminUser = false;
            });
            $timeout(function() {
                $state.go("app.signin");
            });
        };
        
        $scope.toast_error_string = function(str) {
            var _local_str = $filter("translate")("error." + str);
            $timeout( function() {
                toastr.error(_local_str);
            });
        };

        $scope.toast_success_string = function(str) {
            var _local_str = $filter("translate")("success." + str);
            $timeout( function() {
                toastr.success(_local_str);
            });
        };
        
        $scope.$on("$destroy", function() {
        });

        // Event: login successful
        $rootScope.$on(yvConstants.BROADCAST_EVENT_KEY.LOGIN_FINISHED, function( event, args ) {
            isLogin = true;
        });
        
    });

$yvSettingsCtrl.$inject = ["$scope", "$state"];

angular.module("this_app").controller("SettingsCtrl", $yvSettingsCtrl);

function $yvSettingsCtrl($scope, $state) {
    
    var _state_to_id = function(_state) {
        return _state;
    };
    
    $scope.refresh_settings_menu = function() {
        var _j = angular.element(".menu-item");

        for (var i = 0; i < _j.length; i++) {
            angular.element(_j[i]).removeClass("selected");
        }

        var _id = _state_to_id($state.current.name);
        
        _j = document.getElementById(_id);
        if (_j && _j.className && _j.className.indexOf("selected") < 0) {
            _j.className += " selected";
        }            
        return;
    };
    
}

angular.module("this_app")
    .controller("ApplicationProfileCtrl", function($scope, $stateParams, $state, $translate, $timeout, yvTransTags, yvAjax, yvUtil, yvUser, yvDebug, yvConstants, yvLogin) {

        var team_name = "";
        
        $scope.can_delete = false;
        $scope.team_info = {};

        var _reset_team_info = function() {
            $scope.team_info = {
                app_uuid: null,
                app_name: null,
                ppcom: {
                    api_uuid: null,
                    api_key: null,
                    api_secret: null,
                }
            };
        };
        
        
        var modify_check = function() {
            if(team_name == $scope.team_info.app_name) {
                $scope.toast_error_string("NOTHING_CHANGED_TAG");
                return false;
            };
            
            if(!yvUtil.regexp_check($scope.team_info.app_name)) {
                $scope.toast_error_string("NOT_REGULAR_WORDS_TAG");
                $scope.team_info.app_name = team_name;
                return false;
            };
            if(String($scope.team_info.app_name).length>63) {
                $scope.toast_error_string("OUT_OF_LENGTH_TAG");
                $scope.team_info.app_name = team_name;
                return false;
            };
            return true;
        }
            
        $scope.modify = function() {
            console.log("$scope.team_info is",$scope.team_info);
            if(!modify_check()) {
                return;
            };
            var update = {
                "app_uuid": yvUser.get_team().uuid,
                "app_name": $scope.team_info.app_name,
            };
            yvAjax.update_app_info(update)
                .then(function(data) {
                    data = data.data;
                    if(data.error_code == 0) {
                        $scope.team_info.app_name = data.app_name;
                        team_name = data.app_name;
                        yvUser && yvUser.get_team() && ( yvUser.get_team().app_name = team_name );
                        $scope.toast_success_string("UPDATE_SUCCESSFULLY_TAG");
                    } else if(data.error_code == -1) {
                        $socpe.toast_error_string("LACK_PARAMS_TAG");
                    } else if(data.error_code == 1) {
                        $scope.toast_error_string("TEAM_NOT_EXISTED_TAG");
                    } else {
                        $scope.toast_error_string("UPDATE_FAILED_TAG");
                    }
                }, function(data) {
                    $scope.toast_error_string("UPDATE_FAILED_TAG");
                });
        };

        var _team = function() {
            var _own_team = yvUser.get_team();

            $scope.team_info.app_uuid = _own_team.uuid;
            $scope.team_info.app_name = _own_team.app_name;

            console.log("yvUser uuid: %s ---- %s", yvUser.get("uuid"), yvUser.get_uuid());
            var _get = yvAjax.get_api_info({user_uuid:yvUser.get_uuid()});
            
            _get.then(function(data) {
                data = data.data;
                $scope.team_info.ppcom = data.ppcom;
            });
        };
        
        var _logined = function() {
            yvLogin.prepare( function( errorCode ) {
                _team();
            }, {
                $scope: $scope,
                onRefresh: function() {
                    _team();
                }
            } );
        };
        
        var _init = function() {
            _reset_team_info();
            $scope.refresh_settings_menu();
            _logined();
        };

        _init();

        yvDebug.attach( 'yvBasicInfo', { yvUser: yvUser } );
    });


angular.module("this_app")
	.controller("IntegrateCtrl", function($scope, $rootScope, $stateParams, $cookies, $state, $timeout, $http, $translate, yvTransTags, yvAjax, yvUtil, yvUser, yvConstants, yvLogin) {

        $scope.enterprise = {
            link: null,
            code: null
        };

        var _generate_enterprise_link = function() {
            var _team = yvUser.get_team();
            if (_team == null) {
                return;
            }

            // `base64_encode` only accept `255 ascill` characters, so we need `escape` here
            var _appObj = { uuid: _team.uuid,
                            app_name: encodeURI( _team.app_name || '' ) }; 
            var _url = location.protocol + "//" + location.host + "/ppcom/enterprise/";
            var _param = yvUtil.base64_encode(JSON.stringify(_appObj));
            $timeout(function() {
                $scope.enterprise.link = _url + _param;
            });
            
        };

        var _generate_embedded_code = function() {
            var _own_team = yvUser.get_team();
            var _url = null;
            var _server = location.protocol + "//" + location.host;
            var _pre = "<script> window.ppSettings = {";
            _pre = _pre + "app_uuid:";
            _pre = _pre + "'" + _own_team.uuid + "'};";
            _pre = _pre + "(function(){var w=window,d=document;function l(){var a=d.createElement('script');a.type='text/javascript';a.async=!0;a.src='{SERVER}/ppcom/assets/pp-library.min.js';var b=d.getElementsByTagName('script')[0];b.parentNode.insertBefore(a,b)}w.attachEvent?w.attachEvent('onload',l):w.addEventListener('load',l,!1);})()</script>";
            _pre = _pre.replace("{SERVER}", _server);
            $scope.enterprise.code = _pre;
        };

        var _on_team_ok = function() {
            _generate_enterprise_link();
            _generate_embedded_code();
        };
                      
        var _logined = function() {
            yvLogin.prepare( function( errorCode ) {
                _on_team_ok();
            }, { $scope: $scope, onRefresh: _on_team_ok } );
        };

		var _init = function() {
            $scope.refresh_settings_menu();
            _logined();
        };
		
		_init();
	}); // end ctrl

angular.module("this_app")
    .controller("SettingsAccountCtrl", function($scope, $cookies, $state, $timeout, $translate, yvAjax, yvUtil, yvUser, yvTransTags, yvConstants, yvLogin, yvDebug ) {

        var _note = function(index, tag) {
            $scope.set_flash_style(index);
            $scope.set_update_string($scope.lang[tag]);
        };

        var _reset_scope_user = function() {
            $scope.user = {
                user_password_is_visible: false,
                password_input_type: "password",
            };
        };

        $scope.user = {
            user_password_is_visible: false,
            password_input_type: "password",
        };
        
        $scope.show_user_password = function(show) {
            if (show) {
                $scope.user.user_password_is_visible = true;
                $scope.user.password_input_type = "text";
            } else {
                $scope.user.user_password_is_visible = false;
                $scope.user.password_input_type = "password";
            }
        };

        $scope.changepassword = function(user) {
            
            if (!user.user_new_password || !yvUser.get_uuid()) {
                return;
            }

            var errorTag;
            var _pass_hash = sha1(user.user_old_password);
            if (_pass_hash !== yvUser.get_password()) {
                errorTag = "settings.account.OLDPASSWORD_MISMATCH_TAG";
            } else {
                var error_code = yvUtil.validator.validateRepeatPassword( user.user_new_password, user.user_new_password );
                switch( error_code ) {
                case yvUtil.validator.ERR_CODE.MIN_LENGTH_LIMIT:
                    errorTag = 'signup.NO_PASSWORD_TAG';
                    break;

                case yvUtil.validator.ERR_CODE.MAX_LENGTH_LIMIT:
                    errorTag = 'signup.LENGTH_OUT_OF_RANGE_TAG';
                    break;

                case yvUtil.validator.ERR_CODE.CONTAIN_WHITESPACE_AT_HEAD_OR_TAIL:
                    errorTag = 'signup.ERR_PASSWORD_CONTAINS_WHITESPACE_AT_HEAD_OR_TAIL';
                    break;

                case yvUtil.validator.ERR_CODE.REPEAT_PASSWORD_MIS_MATCH:
                    errorTag = 'signup.PASSWORD_NOT_MATCHED_TAG';
                    break;
                }
            }

            if ( errorTag !== undefined ) {
                _note( 1, errorTag );
                return;
            }

            var _d = {
                "app_uuid": yvUser.get_team().uuid,
                "user_uuid": yvUser.get_uuid(),
                "user_password": sha1( user.user_new_password ),
                "old_password": _pass_hash,
            };
            
            var _update = yvAjax.update_user(_d);
            _update.then(function(data) {
                data = data.data;
                if (data.error_code == 0) {
                    
                    yvUser.set_password( sha1( user.user_new_password ) );
                    _note(0, "settings.profile.UPDATE_SUCCESSFULLY_TAG");
                    _reset_scope_user();
                    
                } else {
                    _note(1, "settings.profile.UPDATE_FAILED_TAG");
                    _reset_scope_user();
                }
            }, function() {
                _note(2, "settings.profile.UPDATE_FAILED_TAG");
                _reset_scope_user();
            });
        };
        
        
        var _logined = function() {
            yvLogin.prepare( function( errorCode ) {
                switch( errorCode ) {
                    
                case yvLogin.ERROR_CODE.OK:
                    // nothing todo ...
                    break;
                    
                case yvLogin.ERROR_CODE.STATUS_ILLEGAL:
                    // do something ...
                    break;
                    
                }
            });
        };
        
        var _translate = function() {
            var _tag_list = [];
            for (var i in yvTransTags.en.settings.account) {
                var _t = "settings.account." + i;
                _tag_list.push(_t);
            }
            for (var i in yvTransTags.en.settings.profile) {
                var _t = "settings.profile." + i;
                _tag_list.push(_t);
            }
            for (var i in yvTransTags.en.signup) {
                var _t = "signup." + i;
                _tag_list.push(_t);
            }
            $scope.translate = function() {
            };
            yvUtil.translate($scope, 'lang', _tag_list, $scope.translate);
        };
        
        var _init = function() {
            $scope.refresh_settings_menu();
            _translate();
            _logined();
        };

        _init();
        
    }); // end account ctrl

angular.module("this_app")
    .controller("SettingsProfileCtrl", function($scope, yvAjax, yvUtil, yvUser, yvTransTags, yvLogin) {

        $scope.change = function(user) {            
        };

        var _note = function(index, tag) {
            $scope.set_flash_style(index);
            $scope.set_update_string($scope.lang[tag]);
        };
        
        $scope.submit = function(user) {
            if (user.fullname == null) {
                return;
            }
            var _d = {
                app_uuid:yvUser.get_team().uuid,
                user_uuid:yvUser.get_uuid(),
                user_fullname:user.fullname
            };
            var _u = yvAjax.update_user(_d);
            _u.then(function(data) {
                data = data.data;
                if (data.error_code == 0) {
                    yvUser.set_fullname(user.fullname);
                    _note(0, "settings.profile.UPDATE_SUCCESSFULLY_TAG");
                } else {
                    _note(1, "settings.profile.UPDATE_FAILED_TAG");
                }
            }, function(data) {
                _note(2, "settings.profile.UPDATE_FAILED_TAG");
            });
        };

        var _team = function() {
            $scope.user = {
                fullname: yvUser.get_fullname(),
                email: yvUser.get_email(),
            };
        };
        
        var _logined = function() {
            yvLogin.prepare( function( errorCode ) {
                _team();
            }, { $scope: $scope, onRefresh: _team } );
        };

        var _translate = function() {
            var _tag_list = [];
            for (var i in yvTransTags.en.settings.profile) {
                var _t = "settings.profile." + i;
                _tag_list.push(_t);
            }
            $scope.translate = function() {
                console.log("trans lang %o", $scope.lang)
            };
            yvUtil.translate($scope, 'lang', _tag_list, $scope.translate);
            return;
        };
        
        _init = function() {
            $scope.refresh_settings_menu();
            _translate();
            _logined();
        };
        _init();
        
    }); // end ctrl

angular.module("this_app")
    .controller("ApplicationPeopleCtrl", function($scope, $cookies, $stateParams, $state, $timeout, $translate, yvAjax, yvUtil, yvUser, yvTransTags, yvConstants, yvDebug, yvAppPeopleService, yvLogin) {

        var list = [];

        var app_uuid = null;
        var user_uuid = null;

        $scope.selected_all = {seleted: false};
        $scope.create_user_direct = getInitialCreateUserModalData(); 
        $scope.edit_user_direct = getInitialCreateUserModalData();
                
        $scope.email_handler = function(email) {
            if (email.length <= 22){
                return email;
            }
            return email.substring(0,18) + "..";
        }
        
        $scope.show_edit_modal = function() {
            jQuery("#batch_edit_user").modal( { show:true } );
            $scope.edit_user_direct = getInitialEditUserModalData(); 
        };
        
        $scope.show_create_modal = function() {
            jQuery("#batch_create_user").modal( { show:true } );
            $scope.create_user_direct = getInitialCreateUserModalData(); 
        };

        $scope.show_edit_user_password = function(show) {
            if (show) {
                $scope.edit_user_direct.user_password_is_visible = true;
                $scope.edit_user_direct.password_input_type = "text";
            } else {
                $scope.edit_user_direct.user_password_is_visible = false;
                $scope.edit_user_direct.password_input_type = "password";
            }
        };

        $scope.show_user_password = function(show) {
            if (show) {
                $scope.create_user_direct.user_password_is_visible = true;
                $scope.create_user_direct.password_input_type = "text";
            } else {
                $scope.create_user_direct.user_password_is_visible = false;
                $scope.create_user_direct.password_input_type = "password";
            }
        };
        
        $scope.edit_service_user_form_submit = function() {
            var user_info = {
                "app_uuid": yvUser.get_team().uuid,
                "user_uuid": $scope.edit_user_direct.user_uuid,
                "user_email": $scope.edit_user_direct.email,
                "user_fullname": $scope.edit_user_direct.name
            };

            if ($scope.edit_user_direct.password && $scope.edit_user_direct.password.length > 0) {
                user_info.user_password = sha1($scope.edit_user_direct.password);
            }

            yvAjax.update_user(user_info).then(function(data) {
                data = data.data;
                if (data.error_code == 0) {
                    $scope.toast_success_string("UPDATE_SUCCESSFULLY_TAG")
                } else {
                    $scope.toast_error_string("UPDATE_FAILED_TAG")
                }
            }, function(data) {
                $scope.toast_error_string("UPDATE_FAILED_TAG");
            });
            
            jQuery( "#batch_edit_user" ).modal( 'hide' );
            $scope.page_app_user();
        };
        
        $scope.create_service_user_form_submit = function() {
            var user_uuid = yvUser.get_uuid();
            var app_user_info = {
                "user_status": "SERVICE",
                "is_service_user": true,
                "app_uuid": yvUser.get_team().uuid,
                "user_email": $scope.create_user_direct.email,
                "user_fullname": $scope.create_user_direct.name,
                "user_password": sha1( $scope.create_user_direct.password ),
            };

            yvAppPeopleService.createServiceUser( app_user_info, function( data ) {

                data = data.data;
                switch ( data.error_code ) {
                case yvAjax.API_ERR.NO_ERR:
                    $scope.toast_success_string("CREATE_SUCCESSFULLY_TAG");
                    break;

                case yvAjax.API_ERR.EX_USER:
                    $scope.toast_error_string("ALREADY_IS_SERVICE_USER_TAG");
                    break;

                default:
                    $scope.toast_error_string("CREATE_FAILED_TAG");
                    break;
                }

                jQuery("#batch_create_user").modal( 'hide' );
                $scope.page_app_user();
                
            }, function( data ) {
                jQuery("#batch_create_user").modal('hide');
                $scope.page_app_user();
                $scope.toast_error_string("CREATE_FAILED_TAG");
            } );

        };

        $scope.should_show_edit_button = function() {
            var list = [];
            angular.forEach($scope.group, function (member) {
                if(member.selected) {
                    this.push(member);
                }
            }, list);
            if (list.length == 1) {
                return true;
            }
            return false;
        };

        $scope.should_show_remove_button = function() {
            var list = [];
            angular.forEach($scope.group, function (member) {
                if(member.selected) {
                    this.push(member);
                }
            }, list);
            if (list.length > 0) {
                return true;
            }
            return false;
        };

        $scope.show_remove_modal = function() {
            $scope.to_be_removed_users = [];
            angular.forEach($scope.group, function (member) {
                if(member.selected) {
                    this.push(member);
                }
            }, $scope.to_be_removed_users);
            
            if(!$scope.to_be_removed_users.length){
                return;
            };

            jQuery("#remove_user").modal({show:true});
            return;
        };

        $scope.check_all_changed = function (v) {
            angular.forEach($scope.group, function (member) {
                if(!member.is_owner_user == 1) {
                    member.selected = v;
                }
            });
        };

        $scope.$watch(function(scope){
            var flag = true;
            angular.forEach(scope.group, function(member) {
                if(member.selected) {
                    flag = false;
                }            
            });
            return flag;
        }, function(newVal, oldVal, scope){
            var flag = true;
            angular.forEach(scope.group, function(member) {
                if(member.selected) {
                    flag = false;
                }
            });
            
            if(flag) {
                scope.selected_all.selected = false;
            }
        });

        $scope.remove_users = function(to_be_removed_users) {
            if (to_be_removed_users == null || to_be_removed_users.length == 0) {
                return;
            }
            var _uuids = [];
            angular.forEach( to_be_removed_users, function( member ) {
                this.push( member.uuid );
            }, _uuids );

            var _r = yvAjax.remove_user(_uuids);
            _r.then(function(data) {
                data = data.data;
                if (data.error_code == 0) {
                    jQuery("#remove_user").modal('hide');
                    $scope.selected_all.selected = false;
                    $scope.page_app_user();
                    $scope.toast_success_string("REMOVE_SUCCESSFULLY_TAG");
                } else {
                    jQuery("#remove_user").modal('hide');
                    $scope.selected_all.selected = false;
                    $scope.page_app_user();
                    $scope.toast_error_string("REMOVE_FAILED_TAG");
                    return;
                }
            }, function(data) {
                jQuery("#remove_user").modal('hide');
                $scope.selected_all.selected = false;
                $scope.page_app_user();
                $scope.toast_error_string("REMOVE_FAILED_TAG");
                return;
            });
        };

        $scope.page_app_user = function(newPageNumber){
            var search_value = $scope.search_value || "";            
            var page_number = $scope.page_number = newPageNumber || 1;

            $scope.items_per_page = 12;

            yvAppPeopleService.getAppServiceUsersWithPagination( {

                sort: true,
                filter_keyword: $.trim( search_value ),
                start_page: ( page_number - 1 ),
                length: $scope.items_per_page
                
            }, function( response ) {

                $scope.group = response.users;
                $scope.total_items = response.total;
                
            }, function( e ) {
                
                $scope.group = [];
                $scope.total_items = 0;
                
            } );

        }

        var _team = function() {
            var _own_team = yvUser.get_team();
            $scope.page_app_user();
        };
        
        var _logined = function() {
            yvLogin.prepare( function( errorCode ) {
                _team();
            }, { $scope: $scope, onRefresh: _team } );
        };
                
        var _init = function() {
            $scope.refresh_settings_menu();
            _logined();
        };

        ///////// Initialize ///////////

        _init();

        //////// Internal Implementation ////

        function getInitialCreateUserModalData() {
            return {
                password: null,
                user_password_is_visible: false,
                password_input_type: 'password',
            }
        }

        function getInitialEditUserModalData() {
            var _return_member = null;
            angular.forEach($scope.group, function(member) {
                if(member.selected) {
                    _return_member = member;
                }
            });

            if (_return_member != null) {
                _return_member.user_uuid = _return_member.uuid;
                _return_member.email = _return_member.user_email;
                _return_member.name = _return_member.user_fullname;
                _return_member.password = "";                
            }
            return _return_member;
        }

        yvDebug.attach( 'yvAppPeopleController', { $scope: $scope } );
        
    }); // end ctrl

angular.module("this_app")
    .controller("ApplicationWelcomeCtrl", function($scope, $state, $stateParams, $timeout, yvAjax, yvUser, yvTransTags, yvUtil, yvDebug, yvLogin){

        $scope.current_bubble = {
            ppcom_launcher_color: '#54c6d6',
            ppcom_launcher_color_changed: false,
        };
        
        var _ajax_update_team_info = function(update, cb) {
            yvAjax.update_app_info(update)
                .then(function(data) {
                    data = data.data;
                    if(data.error_code == 0) {
                        $scope.toast_success_string("UPDATE_SUCCESSFULLY_TAG");
                        cb && cb();
                    } else {
                        $scope.toast_error_string("UPDATE_FAILED_TAG");
                    };
                }, function(data) {
                    $scope.toast_error_string("UPDATE_FAILED_TAG");
                });
        };

        var _team = function() {
            var _own_team = yvUser.get_team();
            if (_own_team == null) {
                console.error("no team info");
                return;
            }
            $timeout(function() {
                $scope.current_bubble = {
                    welcome_message: _own_team.welcome_message,
                    ppcom_launcher_color: _own_team.ppcom_launcher_color ? _own_team.ppcom_launcher_color : '#54c6d6', //'#54c6d6',
                    ppcom_launcher_style: _own_team.ppcom_launcher_style ? _own_team.ppcom_launcher_style : 'DEFAULT', //'DEFAULT',
                    app_route_policy: _own_team.app_route_policy,//BROADCAST/GROUP/THIRD
                    show_ppcom_hover: _own_team.show_ppcom_hover, //ALWAYS/NEVER/ONCE
                    ppcom_powered_by_name: _own_team.ppcom_powered_by_name,
                    ppcom_powered_by_link: _own_team.ppcom_powered_by_link,
                    ppcom_powered_by_visible: _own_team.ppcom_powered_by_visible,
                };
                _begin_watch();
            });
        };
        
        var _check = function(update, cb) {
            for(var i in update){
                if(i.length > 512) {
                    $scope.action_toast($scope, 1, "application.welcome.WELCOME_WORDS_OUT_OF_LENGTH_TAG");
                    return;
                };
            };
            cb && cb(update);
            return;
        };

        var _init_flag = function() {
            $scope.current_bubble.ppcom_launcher_color_changed = false;
        };
        
        var _begin_watch = function() {
            
            $scope.$watch('current_bubble.ppcom_launcher_color', function(newValue, oldValue) {
                if(oldValue !== newValue) {
                    $scope.current_bubble.ppcom_launcher_color_changed = true;
                    return;
                };
            });

        };
        
        $scope.change_ppcom_color = function() {
            if($scope.current_bubble.ppcom_launcher_color_changed) {
                var update = {
                    "app_uuid": yvUser.get_team().uuid,
                    "ppcom_launcher_color": $scope.current_bubble.ppcom_launcher_color,
                };
                _ajax_update_team_info(update, _init_flag);
            };
        };
        
        $scope.update_team_info = function(dirty) {
            if(!dirty) {
                $scope.action_toast($scope, 1, "application.welcome.NO_CHANGED_TAG");
                return;
            };
            var update = {
                "app_uuid": yvUser.get_team().uuid,
                "welcome_message": $scope.current_bubble.welcome_message
            };

            _check(update, _ajax_update_team_info);
        };
                
        $scope.get_launcher_style = function() {
            var _c = null;
            if ($scope.current_bubble && $scope.current_bubble.ppcom_launcher_color) {
                _c = $scope.current_bubble.ppcom_launcher_color;
            }
            if (_c == null) {
                _c = "#54c6d6";
            }
            var _s = {
                "background-color": _c,
            };
            return _s;
        };

        $scope.get_launcher_color_name = function() {
            var _c = null;
            if ($scope.current_bubble && $scope.current_bubble.ppcom_launcher_color) {
                _c = $scope.current_bubble.ppcom_launcher_color;
            }

            if (_c == null) {
                _c = "#54c6d6";
            }
            return _c;
        };
        
        var _logined = function() {
            yvLogin.prepare( function( errorCode ) {
                _team();
            }, { $scope: $scope, onRefresh: _team } );
        };
        
        var _init = function() {
            $scope.refresh_settings_menu();
            _logined();
        };

        _init();

        /////////// Implementation /////////////

        yvDebug.attach( 'yvAppWelcomeController', { $scope: $scope, yvUser: yvUser } );
    });

angular.module("this_app")
    .controller("StatisticsOverviewCtrl", function($scope, $state, $timeout, $translate, $stateParams, yvUser, yvAjax, yvUtil, yvTransTags, yvConstants, yvLogin) {

        $scope.card_number = {};
        var _realtime_line = null;
        var _history_line = null;
        var _history_mode = "customer";
        
        var randomScalingFactor = function() {return Math.round(Math.random()*500)};

        var _draw_card = function() {
            var _c = yvAjax.ppconsole_get_overview_number(yvUser.get_team().uuid);
            _c.then(function(response) {
                var data = response.data;
                if (data.error_code != 0) {
                    return;
                }
                for (var n in data.number) {
                    if (data.number.hasOwnProperty(n)) {
                        $scope.card_number[n] = data.number[n];
                    }
                }
            });
        };

        var _draw_realtime = function(_number) {
            if(_realtime_line != null) {
                _realtime_line.destroy();
                _realtime_line = null;
            }
            
            var _data = {
                labels : [],
                datasets : [{
                    fillColor : "rgba(151,187,205,0.2)",
                    strokeColor : "rgba(151,187,205,1)",
                    pointColor : "rgba(151,187,205,1)",
                    pointStrokeColor : "#fff",
                    pointHighlightFill : "#fff",
                    pointHighlightStroke : "rgba(151,187,205,1)",
                    data : []
                }]
            };
            
            var _target = document.getElementById("realtime-statistics");
            var ctx = _target.getContext("2d");
            
            for(var i in _number) {
                _data.labels.push(i+"");
                _data.datasets[0].data.push(_number[i+""][i+""])
            }
            
            _realtime_line = new Chart(ctx, {
                type: 'line',
                data:_data,
                options: {
                    tooltipTemplate:"<%= value %>",
                    responsive: true,
                    animationStep: 40
                }
            });
        };

        var _draw_history = function(_begin, _end, _number) {
            var _data = {
                labels : [],
                datasets : [{
                    fillColor : "rgba(151,187,205,0.2)",
                    strokeColor : "rgba(151,187,205,1)",
                    pointColor : "rgba(151,187,205,1)",
                    pointStrokeColor : "#fff",
                    pointHighlightFill : "#fff",
                    pointHighlightStroke : "rgba(151,187,205,1)",
                    data : []
                }]
            };

            var _label = [];
            var m = _begin;
            while(true) {
                _data.labels.push(m.format("MM-DD"));
                _data.datasets[0].data.push(_number[m.format("YYYY-MM-DD")]);
                m = m.add("days", 1);
                if (m > _end) {
                    break;
                }
            }
            
            if(_history_line) {
                _history_line.destroy();
                _history_line = null;
            }

            var _target = document.getElementById("history-statistics");
            var ctx = _target.getContext("2d");
            _history_line = new Chart(ctx, {
                type: "line",
                data: _data,
                options: {
                    tooltipTemplate:"<%= value %>",
                    responsive: true,
                    animationStep: 40
                }
            });
            
        };
        
        var _highlight = function($event) {
            var _l = angular.element($event.target).parent().parent().children();
            angular.forEach(_l, function(_item) {
                if (angular.element(_item).hasClass("active")) {
                    angular.element(_item).removeClass("active");
                }
            });

            if (!angular.element($event.target).parent().hasClass("active")) {
                angular.element($event.target).parent().addClass("active");
            }
        };

        var _get_realtime_number = function(mode) {
            var _f = yvAjax["ppconsole_get_real_time_" + mode + "_number"];
            var _d = _f(yvUser.get_team().uuid);
            _d.then(function(response) {
                var data = response.data;
                if (data.error_code == 0) {
                    _draw_realtime(data.number);
                }
            }, function(data) {
                console.error(data);
            });
        };

        var _select_history_date = function(begin, end, mode) {
            var _f = yvAjax["ppconsole_get_" + mode + "_number_by_range"];
            var _d = _f(yvUser.get_team().uuid, begin.format("YYYY-MM-DD"), end.format("YYYY-MM-DD"))
            _d.then(function(response) {
                var data = response.data;
                if (data.error_code == 0) {
                    _draw_history(begin, end, data.number);
                }
            }, function(data) {
                console.error(data);
            });
        };

        $scope.draw_realtime_message_number = function($event) {
            _highlight($event);
            _get_realtime_number("message")
        };

        $scope.draw_realtime_customer_number = function($event) {
            _highlight($event);
            _get_realtime_number("customer")
        };

        $scope.draw_realtime_service_number = function($event) {
            _highlight($event);
            _get_realtime_number("service")
        };

        $scope.draw_history_message_number = function($event) {
            _highlight($event);
            _history_mode = "message";
            var begin = moment().subtract('days', 30);
            var end = moment();
            _select_history_date(begin, end, _history_mode);
        };

        $scope.draw_history_customer_number = function($event) {
            _highlight($event);
            _history_mode = "customer";
            var begin = moment().subtract('days', 30);
            var end = moment();
            _select_history_date(begin, end, _history_mode);
        };
        
        $scope.draw_history_service_number = function($event) {
            _highlight($event);
            _history_mode = "service";
            var begin = moment().subtract('days', 30);
            var end = moment();
            _select_history_date(begin, end, _history_mode);
        };
        
        // select the date you wanna view.
        $scope.selecteddate = function(begin, end) {
            _select_history_date(begin, end, _history_mode);
        };

        var _draw = function() {
            var begin = moment().subtract('days', 30);
            var end = moment();
            _select_history_date(begin, end, "customer");
            _draw_card();
            _get_realtime_number("customer");
        };

        var _translate = function() {
            var _tag_list = [];
            for (var i in yvTransTags.en.statistics.overview) {
                var _t = "statistics.overview." + i;
                _tag_list.push(_t);
            };
            $scope.translate = function() {
                // console.log($scope.lang);
            };
            yvUtil.translate($scope, 'lang', _tag_list, $scope.translate);
        };

        var _init = function() {
            _translate();
            $scope.refresh_settings_menu();
            _draw();
        };

        _init();
});

angular.module("this_app")
    .controller("StatisticsHistoryMessageCtrl", function($scope, $state, $timeout, $translate, $stateParams, yvAjax, yvUser, yvConstants, yvLog, yvUtil, yvTransTags, yvLogin) {

        var DEFAULT_PAGE_SIZE = 10, // default show 10 conversation in each page
            MAX_PAGE_RANGE = 5, // << [5][6][7][8][9] >> max show 5 groups

            pageSize = DEFAULT_PAGE_SIZE, 
            
            conversationList = [], // all conversations

            _logined = function() { // On logined callback
                yvLogin.prepare( function( errorCode ) {
                    asyncGetAppConversationList(onGetAppConversationListSuccessCallback, onGetAppConversationListErrorCallback);
                }, { $scope: $scope, onRefresh: function() {
                    asyncGetAppConversationList(onGetAppConversationListSuccessCallback, onGetAppConversationListErrorCallback);
                } } );
            },

            _translate = function() { // TRANSLATE IT
                var _tag_list = [];
                for (var i in yvTransTags.en.statistics.historymessages) {
                    var _t = "statistics.historymessages." + i;
                    _tag_list.push(_t);
                };

                $scope.translate = function() {};
                yvUtil.translate($scope, 'lang', _tag_list, $scope.translate);
            },
            
            sortConversationList = function(conversationList) { // sort conversations by time
                
                var getConversationTimestamp = function (conversation) {
                    return conversation.update_ts;
                };

                // sort
                conversationList && conversationList.sort(function(conversationA, conversationB) {
                    
                    var timestampA = getConversationTimestamp(conversationA),
                        timestampB = getConversationTimestamp(conversationB);

                    return timestampA >= timestampB ? -1 : 1;
                    
                });
            },

            asyncGetAppConversationList = function(successCB, errorCB) { // request server to get app_conversation_list
                // get service user all conversations                
                yvAjax.get_conversation_list({
                    app_uuid: yvUser.get_team().uuid
                }).then(function(response) {
                    // handle empty case

                    response = response.data;
                    var conversationArray = [];
                    
                    // refresh data and update dom
                    response.list && $.each(response.list, function(index, item) {

                        var ignore = false;

                        if (!ignore) {
                            var conversation = {
                                user_uuid : item.create_user && item.create_user.uuid,
                                user_name : item.create_user && item.create_user.user_fullname,
                                user_image : item.create_user && yvUtil.iconUtil.getIcon(item.create_user.user_icon),

                                news_abbr : yvUtil.messageUtil.getMessageSummary($scope.lang,

                                                                                 item.latest_message &&
                                                                                 item.latest_message.message_subtype,
                                                                                 
                                                                                 item.latest_message &&
                                                                                 item.latest_message.body),
                                news_count : item.message_total_count,
                                news_date : yvUtil.messageUtil.getMessageFormatedDate(item.latest_message),
                                
                                con_uuid: item.uuid,
                                update_ts: yvUtil.messageUtil.getConversationUpdateTsInSeconds( item )
                            };

                            // append to array
                            conversationArray.push(conversation);
                        }

                    });

                    // sort app conversation list
                    sortConversationList(conversationArray);
                    
                    // success callback
                    if (successCB) successCB(conversationArray);
                }, function(error) {
                    // error callback
                    if (errorCB) errorCB(error);
                });                
            },

            onGetAppConversationListSuccessCallback = function(appConversationList) { // get conversation list success callback

                conversationList = appConversationList; // cache data 
                
                var length = conversationList.length;
                
                // refresh page dom
                create_page(length);

                // toggle page to page 1
                if (length > 0) {
                    $scope.toggle_page($scope.pages[0]);
                }
            },

            onGetHistoryMessagesSuccessCallback = function(response, user_uuid) { // on get history message success callback

                var tmp = response.data;
                var news = tmp.list;
                
                $scope.messages = [];      
                news.forEach(function(val) {
                    $scope.messages.unshift(trans_type(val, user_uuid));
                });
            },

            onRequestDataError = function(error) {
                $scope.set_flash_style("flash flash-error");
                $scope.set_update_string(error);                
            },

            onGetAppConversationListErrorCallback = function(error) { // get conversation list error callback
                onRequestDataError($scope.lang['statistics.historymessages.MESSAGE_GET_ERROR_TAG']);
            },

            onGetHistoryMessageErrorCallback = function(error) { // get single conversation messages error callback
                onRequestDataError($scope.lang['statistics.historymessages.MESSAGE_GET_ERROR_TAG']);
            },

            create_page = function(count) { // create page dom

                var groupsCount = parseInt(count / pageSize),
                    fixGroupsCount = (groupsCount * pageSize != count) ? groupsCount + 1 : groupsCount;
                
                $scope.total_pages = fixGroupsCount;
                
                if($scope.total_pages > 1) {
                    if($scope.total_pages > MAX_PAGE_RANGE) {
                        for(var i = 1; i <= MAX_PAGE_RANGE; i++) {
                            var tmp = {};
                            tmp.page_num = i;
                            tmp.is_active = false;
                            $scope.pages.push(tmp);
                        }
                    } else {
                        for(var i = 1; i <= $scope.total_pages; i++) {
                            var tmp = {};
                            tmp.page_num = i;
                            tmp.is_active = false;
                            $scope.pages.push(tmp);
                        }
                    }
                    // $scope.pages[0].is_active = true;
                } else {
                    $scope.pages.push({
                        page_num: 1,
                        is_active: false
                    });
                }
            },

            // get the message direction. if fi is equal to ui, it is dir_in.
            getMessageDirection = function(from_uuid, user_uuid) {                
                if(from_uuid == user_uuid) {
                    return 'DIR_IN';
                }
                return 'DIR_OUT';
            },

            // when date selected, show the conversations under the date.
            showConversationsWithSelectedDate = function(targetDate) {

                var _ans_conversationList = [];

                conversationList.forEach(function(val){
                    var _conversationDate = val.news_date;
                    if(_conversationDate.split()[0] == targetDate) {
                        _ans_conversationList.push(val);
                    }
                });


                $timeout(function() {
                    $scope.news_list = _ans_conversationList;
                });                

            },
        
            //get matched conversation with target messages.
            getMatchedConversation = function(target) {
                return [];
            },

            trans_type = function(src, user_uuid) {         // trans to the proper type to show in the preview window

                var _user_icon = null;
                if(src.from_type == "AP"){
                    _user_icon = yvUtil.iconUtil.getIcon();
                }else {
                    _user_icon = yvUtil.iconUtil.getIcon(src.from_user.user_icon);
                };
                var messageJsonBody = JSON.parse(src.message_body);
                
                var previewMessage = {
                    conversation_uuid: messageJsonBody.ci,
                    from_uuid: messageJsonBody.fi,
                    message_direction: getMessageDirection(src.from_uuid, user_uuid),
                    message_duration: null,
                    message_file: null,
                    message_id: messageJsonBody.id,
                    message_mime: null,
                    message_name: null,
                    message_size: null,
                    message_body: src.body,
                    message_status: 'RECV_NEW',
                    message_subtype: messageJsonBody.ms,
                    message_thumbnail: null,
                    message_timestamp: messageJsonBody.ts,
                    show_profile: false,
                    show_timestamp: true,
                    task_uuid: null,
                    to_uuid: messageJsonBody.ti,
                    to_type: messageJsonBody.tt,
                    message_type: 'NOTI',
                    conversation_type: src.conversation_type,
                    from_user: src.from_user,
                    user_icon: _user_icon,
                };

                return previewMessage;
            };
        
        // this used to be a container of messages for a certain news.
        $scope.messages = [];

        // get the news list of current page.
        $scope.news_list = [];

        // current page num.
        $scope.cur_page = -1;

        // each page of pagination will be an item.
        $scope.pages = [];

        // return the conversation with search.
        $scope.search_conversations = function() {
            if($scope.search_target == "") return;
            var _ans = getMatchedConversation($scope.search_target);
            $scope.search_target = "";
            if(_ans.length == 0) {
                alert('No Results');
                return;
            }

            $timeout(function() {
                $scope.news_list = _ans;
            });
        };

        // return the conversations with selected date.
        $scope.select_date = function(begin, end) {
            var _target_date = begin.format('YYYY-MM-DD');
            showConversationsWithSelectedDate(_target_date);
        };

        // show the preview window.
        $scope.show_pre_window = function(item) {
            $scope.messages = []; // clear cached messages before show
            
            var con_uuid = item.con_uuid;
            var user_uuid = item.user_uuid;

            yvAjax.get_history_messages({
                'conversation_uuid': con_uuid,
                'page_offset': -1                    
            }).then(function(response) {
                onGetHistoryMessagesSuccessCallback(response, user_uuid);
            }, onGetHistoryMessageErrorCallback); //error
        };

        // toggle to the clicked page.
        $scope.toggle_page = function(item) {
            
            // if is cur_page, return.
            if (item.page_num == $scope.cur_page) {
                return;
            }

            // get current page's data
            var curPageConversationsArray = conversationList.slice((item.page_num - 1) * pageSize,
                                                                   item.page_num * pageSize);
            $scope.news_list = curPageConversationsArray;

            // active current page's class
            $scope.pages.forEach(function(val) {
                val.is_active = false;
            });
            item.is_active = true;
            $scope.cur_page = item.page_num;

        };

        // get pre pages of the pagination.
        $scope.pre_pages = function() {
            var st_page = $scope.pages[0]['page_num'];
            if(st_page != 1) {
                var num = 0;
                if(st_page >= MAX_PAGE_RANGE) {
                    num = MAX_PAGE_RANGE;
                } else {
                    num = st_page - 1;
                }

                for(var i = 1; i <= num; i++) {
                    var tmp = {};
                    tmp.page_num = st_page - i;
                    tmp.is_active = false;
                    //insert to pre pages.
                    $scope.pages.unshift(tmp);
                }

                // slice with first MAX_PAGE_RANGE.
                $scope.pages = $scope.pages.slice(0, MAX_PAGE_RANGE);

                // toggle to the last page.
                $scope.toggle_page($scope.pages[$scope.pages.length-1]);
            }
        };

        // get back pages of the pagination.
        $scope.back_pages = function() {
            var end_page = $scope.pages[$scope.pages.length-1]['page_num'];
            if(end_page != $scope.total_pages) {
                var num = 0;
                var len = $scope.total_pages - end_page;
                if(len >= MAX_PAGE_RANGE) {
                    num = MAX_PAGE_RANGE;
                } else {
                    num = len;
                }

                $scope.pages = [];
                for (var i = 1; i <= num; i++) {
                    var tmp = {};
                    tmp.page_num = end_page + i;
                    tmp.is_active = false;
                    // $scope.pages.shift();
                    $scope.pages.push(tmp);
                }
                // toggle to the first page.
                $scope.toggle_page($scope.pages[0]);
            }
        };
        
        var _init = function() {
            $scope.refresh_settings_menu();
            _translate();
            _logined();
        };

        _init();


    });

angular.module("this_app")
    .directive("dateRange", function($translate, $rootScope) {
        return {
            restrict: "A",

            scope: {
                onApply: "&",
                hasPredefinedRanges: "=",
                isSingle: "=",
            },

            link: function($scope, $element, $attrs) {
                var ontranslate=function(){
                    var trans_from_array=["calendar.TODAY_TAG","calendar.YESTERDAY_TAG","calendar.LAST_7_DAYS_TAG","calendar.LAST_30_DAYS_TAG","calendar.THIS_MONTH_TAG","calendar.LAST_MONTH_TAG","calendar.APPLY_LABEL_TAG","calendar.CANCEL_LABEL_TAG","calendar.FROM_LABEL_TAG","calendar.TO_LABEL_TAG","calendar.CUSTOM_RANGE_LABEL_TAG","calendar.monthname.JANUARY_TAG","calendar.monthname.FEBRUARY_TAG","calendar.monthname.MARCH_TAG","calendar.monthname.APRIL_TAG","calendar.monthname.MAY_TAG","calendar.monthname.JUNE_TAG","calendar.monthname.JULY_TAG","calendar.monthname.AUGUST_TAG","calendar.monthname.SEPTEMBER_TAG","calendar.monthname.OCTOBER_TAG","calendar.monthname.NOVEMBER_TAG","calendar.monthname.DECEMBER_TAG"];
                    $translate(trans_from_array).then(function (translation) {
                        var curr_language_name=$translate.use();
                        var trans_to_obj = translation;

                        var rangesObj = null;
                        if($scope.hasPredefinedRanges == true) {
                            rangesObj={};
                            rangesObj[trans_to_obj["calendar.TODAY_TAG"]]=[moment(), moment()];
                            rangesObj[trans_to_obj["calendar.YESTERDAY_TAG"]]=[moment().subtract('days', 1), moment().subtract('days', 1)];
                            rangesObj[trans_to_obj["calendar.LAST_7_DAYS_TAG"]]=[moment().subtract('days', 6), moment()];
                            rangesObj[trans_to_obj["calendar.LAST_30_DAYS_TAG"]]=[moment().subtract('days', 29), moment()];

                            rangesObj[trans_to_obj["calendar.THIS_MONTH_TAG"]]=[moment().startOf('month'), moment().endOf('month')];
                            rangesObj[trans_to_obj["calendar.LAST_MONTH_TAG"]]=[moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')];
                        }

                        /*按钮文本定义*/
                        var localeObj={};
                        localeObj["applyLabel"]=trans_to_obj["calendar.APPLY_LABEL_TAG"];
                        localeObj["cancelLabel"]=trans_to_obj["calendar.CANCEL_LABEL_TAG"];
                        localeObj["fromLabel"]=trans_to_obj["calendar.FROM_LABEL_TAG"];
                        localeObj["toLabel"]=trans_to_obj["calendar.TO_LABEL_TAG"];
                        localeObj["customRangeLabel"]=trans_to_obj["calendar.CUSTOM_RANGE_LABEL_TAG"];
                        localeObj["daysOfWeek"]=['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
                        var monthNamesArray=[];
                        monthNamesArray[0]=trans_to_obj["calendar.monthname.JANUARY_TAG"];
                        monthNamesArray[1]=trans_to_obj["calendar.monthname.FEBRUARY_TAG"];
                        monthNamesArray[2]=trans_to_obj["calendar.monthname.MARCH_TAG"];
                        monthNamesArray[3]=trans_to_obj["calendar.monthname.APRIL_TAG"];
                        monthNamesArray[4]=trans_to_obj["calendar.monthname.MAY_TAG"];
                        monthNamesArray[5]=trans_to_obj["calendar.monthname.JUNE_TAG"];
                        monthNamesArray[6]=trans_to_obj["calendar.monthname.JULY_TAG"];
                        monthNamesArray[7]=trans_to_obj["calendar.monthname.AUGUST_TAG"];
                        monthNamesArray[8]=trans_to_obj["calendar.monthname.SEPTEMBER_TAG"];
                        monthNamesArray[9]=trans_to_obj["calendar.monthname.OCTOBER_TAG"];
                        monthNamesArray[10]=trans_to_obj["calendar.monthname.NOVEMBER_TAG"];
                        monthNamesArray[11]=trans_to_obj["calendar.monthname.DECEMBER_TAG"];
                        localeObj["monthNames"]=monthNamesArray;
                        localeObj["firstDay"]=1;

                        // $element.daterangepicker({
                        //     singleDatePicker: $scope.isSingle,
                        //     opens: 'left',
                        //     language: 'ru',
                        //     startDate: moment().subtract('days', 29),
                        //     endDate: moment(),
                        //     minDate: '01/01/2012',
                        //     maxDate: '12/31/2014',
                        //     dateLimit: {
                        //         days: 60
                        //     },
                        //     showDropdowns: false,
                        //     showWeekNumbers: true,
                        //     timePicker: false,
                        //     timePickerIncrement: 1,
                        //     timePicker12Hour: true,
                        //
                        //     ranges:rangesObj,
                        //
                        //     buttonClasses: ['btn btn-sm'],
                        //     applyClass: ' blue',
                        //     cancelClass: 'default',
                        //     format: 'MM/DD/YYYY',
                        //     separator: ' to ',
                        //     locale:localeObj,
                        // }, function (start, end) {
                        //     start.locale(curr_language_name);
                        //     end.locale(curr_language_name);
                        //     $element.find('span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                        //     // $scope.onApply()(start, end);
                        //     $scope.onApply();
                        // });

                        $element.daterangepicker({
                            linkedCalendars: true,
                            opens: 'left',
                            minDays: 2,
                            maxDays: 30,
                            // start from 1-31 = 30
                            singleDatePicker: $scope.isSingle,
                            startDate: $scope.isSingle ? moment() :moment().subtract('days', 30),
                            endDate: moment(),
                            format: 'YYYY/MM/DD',
                            dateLimit: {
                                days: 30
                            },
                        }, function(start, end) {
                            start.locale(curr_language_name);
                            end.locale(curr_language_name);
                            $scope.onApply()(start, end);
                        });

                    });
                };
                $rootScope.$on('$translateChangeSuccess', ontranslate);
                ontranslate();
            },
        };
    })
;

//
// @description
// < a ng-href="http://www.baidu.com" /> : => open `http://www.baidu.com` by replace current one
// < a ng-href="http://www.baidu.com" yv-href-blank /> : => open `http://www.baidu.com` in new window
//
( function() {

    angular.module( "this_app" ).directive( "yvHrefBlank" , href );

    function href() {
        
        return {
            
            restrict: 'A', // only matches attribute name
            
            link: function( scope, element, attrs ) {
                element.attr( "target", "_blank" );
            }
            
        };
        
    }
    
} )();

angular.module("this_app")
    .directive("yvcolorpicker", ["$timeout", function($timeout) {
        return {
            restrict: "A",
            require: 'ngModel',
            
            link: function(scope, element, attrs, model) {

                element.ColorPickerSliders({
                    //size: "sm",
                    //previewontriggerelement: false,
                    placement: "right",
                    color: model.$modelValue,
                    previewformat: "hex",
                    swatches: true,
                    sliders: true,
                    hsvpanel: true,
                    onchange: function(container, color) {
                        scope.$apply(function() {
                            model.$setViewValue(color.tiny.toHexString());
                        });
                    },
                });
                
                model.$render = function() {
                    element.val(model.$modelValue);
                    element.change();                
                };
            },
            
        };
    }])
;


angular.module("this_app").
    directive("yvMessage", [
        "$rootScope",
        "$timeout",
        "yvConstants",
        "yvType",
        "yvUtil",
        function ($rootScope, $timeout, yvConstants, yvType, yvUtil) {

            function _link($scope, $element, $attrs) {

                $scope.isFileMessage = function (message) {
                    return yvType.is_file(message);
                };

                $scope.isVideoMessage = function (message) {
                    return yvType.is_video(message);
                };

                $scope.isGPSLocationMessage = function (message) {
                    return yvType.is_gps_location(message);
                };

                $scope.isTextMessage = function (message) {
                    return yvType.is_text(message);
                };

                $scope.isTxtMessage = function (message) {
                    return yvType.is_txt(message);
                };

                $scope.isImageMessage = function (message) {
                    return yvType.is_image(message);
                };

                $scope.isAudioMessage = function (message) {
                    return yvType.is_audio(message);
                };

                $scope.isCardMessage = function (message) {
                    return yvType.is_single_card(message) || yvType.is_multiple_card(message);
                };

                $scope.viewImage = function (message) {

                };

                $scope.viewLocation = function (message) {

                };

                $scope.viewCard = function (card) {
                    // fixme: broadcast a cardModal show event
                };

                $scope.showAlertIcon = function (message) {
                    if (yvType.is_right(message) && message.message_status === yvConstants.SEND_STATUS.SEND_ERROR) {
                        return true;
                    }
                    return false;
                };

                $scope.showMouth = function (message) {
                    if (yvType.is_image(message) || yvType.is_gps_location(message)) {
                        return false;
                    }
                    return true;
                };

                $scope.viewProfile = function (message) {
                    $scope.message.show_profile = true;
                };

                $scope.getUserIcon = function (message) {
                    return message.user_icon;
                };

                $scope.getMessageClass = function (message) {
                    var _class = "";

                    if (yvType.is_left(message)) {
                        _class += " yv-left ";
                    } else if (yvType.is_right(message)) {
                        _class += " yv-right ";
                    }

                    _class += " yv-pc ";
                    return _class;
                };

                //if the interval chat message is more than one minute
                $scope.shouldShowTimestamp = function (message) {
                    var last_message = $scope.lastMessage;
                    if(!last_message) {
                        return true;
                    }
                    var last_message_timestamp = last_message.message_timestamp;
                    var this_message_timestamp = message.message_timestamp;
                    var times = this_message_timestamp - last_message_timestamp;
                    if(times>60) {
                        return true;
                    }
                    return false;
                };

                $scope.getTimestamp = function (message) {
                    var _timestamp = message.message_timestamp*1000;
                    return yvUtil.formateTimestamp(_timestamp);
                };

                $scope.getFontStyle = function () {
                    return {};
                };


                $scope.$on("$destroy", function () {
                    $rootScope.$broadcast("event:stop-play-audio");
                });

                function _init() {
                    $scope.message.show_profile = false;
                }

                _init();
            }

            return {
                restrict: "E",
                scope: {
                    message: "=",
                    isLast: "=",
                    lastMessage: "=",
                },
                link: _link,
                // controller: "MessageCtrl",
                templateUrl: "templates/directive/message.html"
            };

        }]);

angular.module("this_app").directive("yvTextMessage", [function () {

    function link($scope, $element, $attrs) {
        $element.html($scope.message.message_body);
    }

    return {
        restrict: "E",
        replace: true,
        scope: {
            message: "="
        },
        link: link,
        template: "<pre class='yv-chat-text'></pre>"
    };

}]);

angular.module("this_app").directive("yvTxtMessage", [
    "yvUtil",
    "yvLog",
    function (yvUtil, yvLog) {

    function link($scope, $element, $attrs) {

        function init(message) {
            
            var fileDownloadUrl = yvUtil.fileUtil.getFileDownloadUrl(JSON.parse(message.message_body).fid);

            yvUtil.fileUtil.getRemoteTextFileContent(fileDownloadUrl, function(text) {
                $element.text(text);    
            }, function(error) {
                $element.text(error);
            });

        }
        
        init($scope.message);
    }
    
    return {
        restrict: "E",
        replace: true,
        scope: {
            message: "="
        },
        link: link,
        template: "<pre class='yv-chat-text'></pre>"
    };
    
}]);

angular.module("this_app").directive("yvImageMessage", [
    "yvUtil",
    "yvLog",
    function(yvUtil, yvLog) {

        function link($scope, $element, $attrs) {
            
            function init (message) {

                var imageMessageBody = message.message_body,
                    icon = yvUtil.iconUtil.getIcon(JSON.parse(imageMessageBody).orig); // or thum
                
                $element.find("img").attr('src', icon);
                
            }

            init($scope.message);
        }

        return {
            restrict: 'E',
            replace: true,
            scope: {
                message: "="
            },
            link: link,
            template: '<div class="yv-chat-image"><img></div>'
        };

    }]);

angular.module("this_app").directive("yvFileMessage", [
    "$translate",
    "yvUtil",
    "yvLog",
    function ($translate, yvUtil, yvLog) {

        function link($scope, $element, $attrs) {
            var jsonBody = JSON.parse($scope.message.message_body);
            var childElement = $element.find(".yv-chat-file");

            $translate(['statistics.historymessages.MESSAGE_FILE_TYPE_TAG',
                        'statistics.historymessages.MESSAGE_IMAGE_TYPE_TAG',
                        'statistics.historymessages.MESSAGE_TXT_TYPE_TAG'])
                .then(function(translatedObj) {

                    // $element.text(yvUtil.messageUtil.getMessageSummary(translatedObj,
                    childElement.text(yvUtil.messageUtil.getMessageSummary(translatedObj,
                    'FILE',
                    $scope.message.message_body))
                        .attr('href', yvUtil.fileUtil.getFileDownloadUrl(jsonBody.fid, jsonBody.name));                          
                    
                });
            
        }
        
        return {
            restrict: "E",
            replace: true,
            scope: {
                message: "=",
                lang: "="
            },
            link: link,        
            template: "<div class='yv-chat-div'><a class='yv-chat-file'></a></div>"
        };
        
    }]);

angular.element(document).ready(function() {     
    angular.bootstrap(document, ["this_app"]);
});
