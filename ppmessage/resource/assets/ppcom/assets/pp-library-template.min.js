/**
 * 用以方便合并文件，放在最终合并文件的最开始
 *
 */
((function() {

function PPMessage (jQuery) {

    // Global module variables for convenience use
    var fn = {
        $: jQuery,
        Service: {},
        View: {},
        Modal: {},
        Controller: {},
        Factory: {},
        Configuration: {},
        Toolkit: {}
    },
        
        $ = fn.$,
        Service = fn.Service,
        View = fn.View,
        Modal = fn.Modal,
        Controller = fn.Controller,
        Factory = fn.Factory,
        Ctrl = Controller,
        Configuration = fn.Configuration,
        Toolkit = fn.Toolkit,
        
        $timeout = setTimeout,
        $clearTimeout = clearTimeout,

        // on async get data callback
        $onResult = function ( data, callback ) {
            if ( callback ) callback ( data );
        };

function extend(child, parent) {
    child.prototype = (function(supportObjectCreate) {
        
        // support Object.create method (ECMAScript 5.1)
        if (supportObjectCreate) return Object.create(parent.prototype);
        
        // not support Object.create method (like IE8, IE7 ...)
        function F() {}
        F.prototype = parent.prototype;
        return new F();
        
    } (Object.create !== undefined));
    
    child.prototype.constructor = child;
}

//PP Configuration
Configuration = {
    api_key: '{ppcom_api_key}',
    api_secret: '{ppcom_api_secret}',
    assets_path: '{ppcom_assets_path}',
    portal: '{portal}',
    api: '{api}',
    auth: '{auth}',
    web_socket_url: '{web_socket_url}',
    file_upload_url: '{file_upload_url}',
    file_upload_txt_url: '{file_upload_txt_url}',
    file_download_url: '{file_download_url}'
};

/**
 * jQuery plugin 
 *
 * copy and modified from https://github.com/luis-kaufmann-silva/jquery-p2r/blob/master/jquery.p2r.js to support pulltorefresh on mobile
 */
((function _pulltorefresh__module($, document) {
    'use strict';

    // Class Definition
    var PullToRefresh = function (element, options) {
        this.$element = $(element);
        
        this.options = $.extend({}, self.DEFAULTS, options);
        
        this.$scroll = $(options.scroll);
        
        
        this.flags = {
            prevented: false,
            moving: false,
            touched: false,
            isTouch: false,
            refreshed: false
        };

        this.positions = {
            startY: 0,
            startX: 0,
            lastStep: 0,
            
            delta: 0
        }
    };


    // namespace to events
    PullToRefresh.key = 'pulltorefresh';

    // default options
    PullToRefresh.DEFAULTS = {
        orientation: "down", // define if is a pull-up-to-refresh or a pull-down-to-refresh
        sensibility: 5, // number of pixels to each call of "move" event
        refresh: 70, // value in pixels to fire "refresh" event
        click: 0.000001, // value in pixels to fire "click" event
        lockRefresh: false, // indicates that the user can pull up to get the value "refresh"
        resetRefresh: true, // indicates that the "reset" function will be called immediately when occur the event "refresh"
        autoInit: true, // indicates that the "PullToRefresh" object must be built on startup "plugin"
        resetSpeed: "100ms", // speed of reset animation in milliseconds
        simulateTouch: true, // simulate touch events with mouse events
        threshold: 20, // integer with the threshold variation of the y axis
        scroll: document // class name to scroll element
    };


    // namespace function to join event.namespace
    PullToRefresh.namespace = function _pulltorefresh__namespace(eventName) {
        return [
            eventName,
            PullToRefresh.key
        ].join(".");
    }

    // support detection on touch events
    PullToRefresh.support = {

        touch: (window.Modernizr && Modernizr.touch === true) || (function () {
            'use strict';
            return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
        })()

    };

    // events names based on browser support
    PullToRefresh.events = (function () {

        if (PullToRefresh.support.touch) {
            return {
                start: PullToRefresh.namespace('touchstart'),
                move: PullToRefresh.namespace('touchmove'),
                end: PullToRefresh.namespace('touchend')
            }
        }

        var events = {
            start: PullToRefresh.namespace('mousedown'),
            move: PullToRefresh.namespace('mousemove'),
            end: PullToRefresh.namespace('mouseup')
        };

        if (!!(window.navigator.msPointerEnabled)) {
            events = {
                start: PullToRefresh.namespace('MSPointerDown'),
                move: PullToRefresh.namespace('MSPointerMove'),
                end: PullToRefresh.namespace('MSPointerUp')
            };
        }

        if (!!(window.navigator.pointerEnabled)) {
            events = {
                start: PullToRefresh.namespace('pointerdown'),
                move: PullToRefresh.namespace('pointermove'),
                end: PullToRefresh.namespace('pointerup')
            };
        }

        return events;

    })();


    /**
     * Construct method to bind all events to respectives elements
     * @method
     */
    PullToRefresh.prototype.construct = function _pulltorefresh__construct() {
        var self = this;
        self.$element
            .on(PullToRefresh.events.start, self.proxy(self.onTouchStart, self))
            .on(PullToRefresh.events.move, self.proxy(self.onTouchMove, self))
            .on(PullToRefresh.events.end, self.proxy(self.onTouchEnd, self));

        if (self.options.simulateTouch) {
            self.$element
                .on(PullToRefresh.namespace('mousedown'), self.proxy(self.onTouchStart, self));
            $(document)
                .on(PullToRefresh.namespace('mousemove'), self.$element, self.proxy(self.onTouchMove, self))
                .on(PullToRefresh.namespace('mouseup'), self.$element, self.proxy(self.onTouchEnd, self));
        }
    };

    /**
     * Destemoy method to remove all event listeners of element
     * @method
     */
    PullToRefresh.prototype.destroy = function _pulltorefresh__destroy() {

        this.remove_transition(this.$element[0].style);
        this.remove_transform(this.$element[0].style);
        $(document).off(PullToRefresh.namespace(''));
        this.$element.off(PullToRefresh.namespace(''));
        this.$element.removeData('pulltorefresh');
    };


    // proxy function to trigger funcions with correct "this"
    PullToRefresh.prototype.proxy = (function () {

        var has_bind = !!(Function.prototype.bind);

        // if browser supports bind, use it (why reinvent the wheel?)
        if (has_bind) {
            return function _pulltorefresh__bind(fn, context) {
                return fn.bind(context);
            }
        } else {
            // if lib has proxy
            if ($.proxy) {
                return $.proxy;
            } else {
                // else create it
                return function _pulltorefresh__jquery_like_proxy(fn, context) {
                    var tmp, args, proxy;

                    if (typeof context === "string") {
                        tmp = fn[context];
                        context = fn;
                        fn = tmp;
                    }

                    // Quick check to determine if target is callable, in the spec
                    // this throws a TypeError, but we will just return undefined.
                    if (typeof (fn) === 'function') {
                        return undefined;
                    }

                    args = Array.prototype.slice.call(arguments, 2);

                    // Simulated bind
                    proxy = function () {
                        return fn.apply(context || this, args.concat(slice.call(arguments)));
                    };

                    // Set the guid of unique handler to the same of original handler, so it can be removed
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

                    return proxy;
                }
            }
        }

    })();

    /**
     * Method to transform the Element in pixels
     * @param  {CSSProperties} style .style of Element
     * @param  {int} value value of tranformation
     * @method
     */
    PullToRefresh.prototype.transform = function _pulltorefresh__transform(style, value) {

        style.webkitTransform = 'translate(0, ' + value + 'px) ' + 'translateZ(0)';
        style.msTransform =
            style.MsTransform =
            style.MozTransform =
            style.OTransform =
            style.transform = 'translateY(' + value + 'px)';
    };


    /**
     * Method to set a transition on Element
     * @param  {CSSProperies} style .style of Element
     * @param  {string} ms    css value to duration of transition
     * @method
     */
    PullToRefresh.prototype.transition = function _pullToRefresh__transition(style, ms) {
        style.webkitTransitionDuration =
            style.MozTransitionDuration =
            style.msTransitionDuration =
            style.OTransitionDuration =
            style.transitionDuration = ms;
    };

    /**
     * Method to remove transition on Element
     * @param  {CSSProperies} style .style of Element
     * @method
     */
    PullToRefresh.prototype.remove_transition = function _pullToRefresh__remove_transition(style) {
        style.webkitTransitionDuration =
            style.MozTransitionDuration =
            style.msTransitionDuration =
            style.OTransitionDuration =
            style.transitionDuration = null;
    };

    /**
     * Method to remove transformation on Element
     * @param  {CSSProperties} style .style of Element
     * @method
     */
    PullToRefresh.prototype.remove_transform = function _pulltorefresh__remove_transform(style) {
        style.webkitTransform =
            style.msTransform =
            style.MsTransform =
            style.MozTransform =
            style.OTransform =
            style.transform = null;
    };


    /**
     * Method to get x and y axis from event
     * @param  {MouseEvent|TouchEvent}  event        Event by mousedown or touchstart
     * @param  {Boolean} isTouchEvent flag to indicate a touch event
     * @return {object}               Object with x and y values like "{x: 1, y: 1}"
     * @method
     */
    PullToRefresh.prototype.getAxis = function _pulltorefresh__getAxis(event, isTouchEvent) {
        return {
            x: isTouchEvent ? (event.targetTouches || event.originalEvent.targetTouches)[0].pageX : (event.pageX || event.clientX),
            y: isTouchEvent ? (event.targetTouches || event.originalEvent.targetTouches)[0].pageY : (event.pageY || event.clientY)
        }

    }

    /**
     * method to listen event start
     * @param  {MouseEvent|TouchEvent} event Original event fired by DOM
     * @method
     */
    PullToRefresh.prototype.onTouchStart = function _pulltorefresh__ontouchstart(event) {
        var isTouchEvent = event.type === 'touchstart',
            axis = this.getAxis(event, isTouchEvent);
        
        // only move $element if $scroll do not have scroll
        if (this.$scroll.scrollTop() > 0) {
            return true;
        }

        // if not left click, cancel
        if (!isTouchEvent && event.which !== 1) {
            return;
        }

        this.flags.touched = true;
        this.flags.refreshed = false;
        this.flags.isTouch = isTouchEvent;

        this.positions.startY = axis.y;
        this.positions.startX = axis.x;

        this.$element.trigger(PullToRefresh.namespace('start'), [axis.y])

        this.transition(this.$element[0].style, "0ms");

    };

    /**
     * Method to listen the movement of element
     * @param  {MouseEvent|TouchEvent} event Original move event fired by DOM
     * @method
     */
    PullToRefresh.prototype.onTouchMove = function _pulltorefresh__ontouchmove(event) {

        var isTouchEvent = event.type === 'touchmove',
            delta,
            step,
            percentage,
            axis;

        // if not touched or hasTouchEvent and the eventType is a desktop event cancel the move
        if (!(this.flags.touched) || (this.flags.isTouch && event.type === 'mousemove')) {
            return;
        }

        // detect if element has click
        if (!this.flags.prevented && event.target && (event.target.click || event.target.onclick)) {
            this.flags.prevented = true;
        }

        // get axis pair
        axis = this.getAxis(event, isTouchEvent);

        // get variation of position between start y axis and current y axis
        delta = (axis.y - this.positions.startY);
        this.positions.delta = delta;

        // reset on horizontal scroll threshold fail
        if (Math.abs(axis.x - this.positions.startX) > this.options.threshold) {
            this.reset();
            return;
        }

        // move with negative, see #5
        if (delta < 0 && this.options.orientation == 'down') return;
        if (delta >= 0 && this.options.orientation == 'up') return;

        // fires the refresh event if necessary and not has been triggered before
        if ((delta < 0 ? delta * -1 : delta) >= this.options.refresh && !this.flags.refreshed) {

            // fire refresh event
            this.$element.trigger(PullToRefresh.namespace('refresh'), [axis.y]);

            // set flag to not trigger this event until next touchend
            this.flags.refreshed = true;

            // if configured to reset on refresh, do it
            if (this.options.resetRefresh) {
                this.reset();
                return;
            }

        }

        if (this.flags.refreshed && this.options.lockRefresh) {
            return;
        }

        // current step, necessary to define if call move event
        step = parseInt(delta / this.options.sensibility, 10);

        // if is a next step, fire event and inform the perncentage of pull
        if (this.positions.lastStep != step) {
            percentage = parseInt((delta * 100) / this.options.refresh, 10);
            this.$element.trigger(PullToRefresh.namespace('move'), percentage);
            this.positions.lastStep = step;
        }
        // finally tranform element to current touch position
        this.transform(this.$element[0].style, delta);

        event.stopPropagation();
        event.preventDefault();
    };

    /**
     * Method to listen the end of user action
     * @method
     */
    PullToRefresh.prototype.reset = function _pulltorefresh__reset() {
        this.transition(this.$element[0].style, this.options.resetSpeed);
        this.transform(this.$element[0].style, 0);
        this.flags.touched = false;
        this.flags.isTouch = false;
        this.flags.refreshed = false;
        this.positions.startY = false;
        this.positions.delta = 0;
    };

    /**
     * Method to listen the end of touch event
     * @param  {MouseEvent|TouchEvent} event Original end event fired by DOM
     * @method
     */
    PullToRefresh.prototype.onTouchEnd = function PullToRefresh__onTouchEnd(event) {

        if (!this.flags.touched) {
            return;
        }

        var moveDelta = this.positions.delta;

        this.flags.prevented = false;

        this.positions.startY = 0;
        this.positions.startX = 0;

        this.reset();

        this.$element.trigger(PullToRefresh.namespace('end'));

        event.stopPropagation();
        event.preventDefault();

        var ev = event.target.click || event.target.onclick;
        ev && ( Math.abs( moveDelta ) <= this.options.click ) && $( event.target ).trigger( 'click' );

    };


    // PullToRefresh PLUGIN DEFINITION
    // ========================

    var old = $.fn.pullToRefresh;

    $.fn.pullToRefresh = function _pulltorefresh(option) {
        return this.each(function () {

            var $this = $(this);
            var data = $this.data(PullToRefresh.key);

            var options = $.extend({}, PullToRefresh.DEFAULTS, $this.data(), typeof option == 'object' && option)

            if (!data && option == 'destroy') return PullToRefresh.destroy();

            if (!data) {

                $this.data(PullToRefresh.key, (data = new PullToRefresh(this, options)))

                if (options.autoInit) {

                    data.construct();
                }
            }

            if (typeof option == 'string') {
                data[option].apply(data)
            }

        });
    };

    $.fn.pullToRefresh.Constructor = PullToRefresh;


    // PullToRefresh NO CONFLICT
    // ==================

    $.fn.pullToRefresh.noConflict = function () {
        $.fn.pullToRefresh = old
        return this
    }

})($, '#pp-conversation-content')); // <-- Modified this line ^_^

/**
 * http://gsgd.co.uk/sandbox/jquery/easing/
 */
(function($) {

    $.extend($.easing, {
        easeInQuart: function (x, t, b, c, d) {
            return c*(t/=d)*t*t*t + b;
        }
    });
    
})($);

/**
 * 使用`Service.bootMe()`来初始化服务。
 *
 */
((function() {

    Service._booted = false;

    Service.bootMe = function(reboot) {
        if (!Service._booted || reboot) {
            
            Service.$cookies = new Service.PPCookies();
            Service.$tools = new Service.PPTools();
            Service.$errorHint = new Service.ErrorHint();
            Service.$publicApi = new Service.PublicAPI();
            
            Service.$startUp = new Service.PPStartUp(Service.$api, Service.$device);

            Service.$conversationManager.init();

            Service._booted = true;
        }
    };
    
})());

((function(Service) {

    function PPBaseService() {
    }
    Service.BaseService = PPBaseService;
    
})(Service));

((function(Service) {

    function PPConstants() {
    }

    // sound of msg submit -> delivered -> notification(received)
    PPConstants.MSG_SUBMIT_SOUND_URL = Configuration.assets_path + 'submit.mp3';
    PPConstants.MSG_DELIVERED_SOUND_URL = Configuration.assets_path + 'delivered.mp3';
    PPConstants.MSG_NOTIFICATION_SOUND_URL = Configuration.assets_path + 'notification.mp3';    

    PPConstants.ICON_DEFAULT_LAUNCHER = Configuration.assets_path + "img/logo_1.png";
    PPConstants.DEFAULT_HEADER_TITLE = "PPMessage";

    //USER
    PPConstants.ICON_DEFAULT_USER = Configuration.assets_path + "img/logo_1.png";
    PPConstants.USER_DEFAULT_NAME = 'Anonymous';

    PPConstants.STYLE = {
        EMOJI_PANEL_DEFAULT_BOTTOM_MARGIN: 67
    };

    PPConstants.EVENT = {
        NEW_MESSAGE_ARRIVED: "message:NEW_ARRIVED",
        ON_TEXTAREA_HEIGHT_CHANGED: "textarea:height-change"
    };

    PPConstants.MESSAGE = {
        TYPE_TEXT: 'TEXT',
        TYPE_EMOJI: 'EMOJI',
        TYPE_IMAGE: 'IMAGE',
        TYPE_FILE: 'FILE',
        TYPE_WELCOME: 'WELCOME',
        TYPE_TIMESTAMP: 'TIMESTAMP',

        TO_TYPE: "P2S",

        TEXT_MAX_LEN: 128
    };

    PPConstants.MAX_UPLOAD_SIZE = 4194304; //4MB
    PPConstants.MAX_UPLOAD_SIZE_STR = "4MB";

    PPConstants.MESSAGE_TYPE = {
        NOTI: "NOTI",
        SYS: "SYS"
    };

    PPConstants.FILE = {
        ROOT: "PP"
    };

    PPConstants.MESSAGE_SUBTYPE = {
        AUDIO:  "AUDIO",
        VIDEO:  "VIDEO",
        DOCUMENT: "DOCUMENT",
        FILE:   "FILE",
        TEXT:   "TEXT",
        IMAGE:  "IMAGE",
        SINGLE_CARD:   "SINGLE_CARD",
        MULTIPLE_CARD: "MULTIPLE_CARD",
        TXT:    "TXT",
        MENU:   "MENU",
        EVENT:  "EVENT",
        GPS_LOCATION: "GPS_LOCATION",
        INVITE_CONTACT: "INVITE_CONTACT",
        ACCEPT_CONTACT: "ACCEPT_CONTACT",
        REMOVE_CONTACT: "REMOVE_CONTACT",
        DG_INVITED: "DG_INVITED",
        DG_REMOVED: "DG_REMOVED",
        REQUEST_JOIN_OG: "REQUEST_JOIN_OG",
        APPROVE_JOIN_OG: "APPROVE_JOIN_OG",
        LOGOUT: "LOGOUT"
    };

    PPConstants.I18N = {
        'zh-CN': {
            START_CONVERSATION_HINT: '\u6309\u201c\u56de\u8f66\u952e\u201d\u53d1\u9001',
            START_CONVERSATION_MOBILE_HINT: '',
            ERROR_TEXT_TOO_LONG: '\u5b57\u6570\u592a\u957f',
            WELCOME_MSG: '\u60a8\u597d\uff0c\u8bf7\u95ee\u6709\u4ec0\u4e48\u53ef\u4ee5\u5e2e\u52a9\u60a8\u7684\uff1f',
            CLOSE_BUTTON_HINT: '\u7ed3\u675f\u4f1a\u8bdd',
            MINIZE_BUTTON_HINT: '\u6700\u5c0f\u5316',
            MAXIMUM_UPLOAD_SIZE_HINT: '\u6700\u5927\u6587\u4ef6\u5927\u5c0f\u4e3a',
            PPMESSAGE: '\u76ae\u76ae\u6d88\u606f',
            HOVER_CARD_TEXTAREA_HINT: '\u5f00\u59cb\u5bf9\u8bdd',
            DEFAULT_SERVE_NAME: '\u5ba2\u670d',
            UPLOADING_HINT: '\u6b63\u5728\u4e0a\u4f20',
            SEND: '\u53d1\u9001',
            WAITING_AVALIABLE_CONVERSATION: '\u6b63\u5728\u7b49\u5f85\u5ba2\u670d...',
            WAITING_LENGTH_HINT: '\u6b63\u5728\u6392\u961f\u4e2d\uff0c\u5f53\u524d\u5171\u6709%s\u4eba\u6b63\u5728\u7b49\u5f85',

            LOAD_HISTORY_HINT: '\u70b9\u51fb\u52a0\u8f7d\u5386\u53f2\u6d88\u606f',
            LOAD_HISTORY_MOBILE_HINT: '\u4e0b\u62c9\u52a0\u8f7d\u5386\u53f2\u6d88\u606f',
            LOADING_HISTORY: '\u6b63\u5728\u52a0\u8f7d...',
            NO_MORE_HISTORY: '\u6ca1\u6709\u66f4\u591a\u5386\u53f2\u6d88\u606f',

            IMAGE: '\u56fe\u7247',
            FILE: '\u6587\u4ef6',
            AUDIO: '\u8bed\u97f3',

            SEND_ERROR: '\u53d1\u9001\u5931\u8d25',
            SERVICE_NOT_AVALIABLE: '\u670d\u52a1\u4e0d\u53ef\u7528',
            CANCELED: '\u5df2\u53d6\u6d88',
            SENDING: '\u6b63\u5728\u53d1\u9001',

            CLOSE: '\u5173\u95ed',

            CONSULT_WORKING_TIME: '\u670d\u52a1\u65f6\u95f4',
            CONTACT_NUMBER: '\u8054\u7cfb\u7535\u8bdd',

            ONLINE: '\u5728\u7ebf',
            OFFLINE: '\u79bb\u7ebf',

            SYSTEM_MSG: '\u7cfb\u7edf\u6d88\u606f',

            TYPING: '\u5bf9\u65b9\u6b63\u5728\u8f93\u5165...',

            AUDIO_PLAY_ERROR: '\u64ad\u653e\u5931\u8d25',
            
            timeFormat: function(timestampInMilliSeconds) {
                return Service.$tools.formatTime(timestampInMilliSeconds, {
                    year: "\u5e74",
                    month: "\u6708",
                    day: "\u65e5",
                    today: "\u4eca\u5929",
                    yesterday: "\u6628\u5929"
                });
            }
        },
        'en': {
            START_CONVERSATION_HINT: 'Press "Enter key" to send',
            START_CONVERSATION_MOBILE_HINT: '',
            ERROR_TEXT_TOO_LONG: 'Text is too long',
            WELCOME_MSG: 'Hello, what can I do for you ?',
            CLOSE_BUTTON_HINT: 'Close Conversation',
            MINIZE_BUTTON_HINT: 'Minimization',
            MAXIMUM_UPLOAD_SIZE_HINT: 'The maximum upload size is ',
            PPMESSAGE: 'PPMessage',
            HOVER_CARD_TEXTAREA_HINT: 'Start a conversation',
            DEFAULT_SERVE_NAME: 'Service',
            UPLOADING_HINT: 'Uploading',
            SEND: 'Send',
            WAITING_AVALIABLE_CONVERSATION: 'Waiting service ...',
            WAITING_LENGTH_HINT: 'There are total %s person in the queue',

            LOAD_HISTORY_HINT: 'Click to load history',
            LOAD_HISTORY_MOBILE_HINT: 'Pull to load history',
            LOADING_HISTORY: 'Loading...',
            NO_MORE_HISTORY: 'No more history',

            // for message summary launcher preview show
            IMAGE: 'Image',
            FILE: 'File',
            AUDIO: 'Audio',

            SEND_ERROR: 'Send Error',
            SERVICE_NOT_AVALIABLE: 'Service Not Avaliable',
            CANCELED: 'Cancled',
            SENDING: 'Sending',

            CLOSE: 'Close',

            CONSULT_WORKING_TIME: 'Online Time',
            CONTACT_NUMBER: 'Contact Number',

            ONLINE: 'Online',
            OFFLINE: 'Offline',

            SYSTEM_MSG: 'System message',

            TYPING: 'Typing...',

            AUDIO_PLAY_ERROR: 'Play Error',
            
            timeFormat: function(timestampInMilliSeconds) {
                return Service.$tools.formatTime(timestampInMilliSeconds, {
                    year: "-",
                    month: "-",
                    day: "",
                    today: "Today",
                    yesterday: "Yesterday"
                });
            }
        }
    };

    PPConstants.i18n = function(key) {
        return Service.Constants.I18N[Service.$language.getLanguage()][key];
    };

    Service.Constants = PPConstants;
    
})(Service));

((function(Service) {

    function PPAPI() {

        var _apiToken = null,
            _apiKey = null,
            _apiSecret = null,
            _appUuid = null,

            // Internal Server Error
            _onError = function(response, fail) {
                Service.$debug.d('[PPAPI] [Error]: ', response);
                Service.$errorHint.warn(Service.ErrorHint.ERROR_SERVICE_NOT_AVALIABLE);
                if (fail) fail(response);
            },

            _onApiError = function(response, fail) {
                Service.$debug.d('[PPAPI] [Fail]: ', response);
                if (fail) fail(response);
            },
            
            _onApiSuccess = function(response, success) {
                Service.$debug.d('[PPAPI] [Success]: ', response);
                if (success) success(response);
            },
            
            _onResponse = function(response, success, fail) {
                if (response && (response['error_code'] !== undefined)) {
                    var succ = false;
                    switch(response['error_code']) {
                    case 0:
                        succ = true;
                        break;
                        
                    // case 25: // no imapp info
                    //     Service.$errorHint.warn(Service.ErrorHint.ERROR_ILLEGAL_APPKEY_OR_SECRET);
                    //     break;
                        
                    default:
                        break;
                    }

                    if (succ) {
                        _onApiSuccess(response, success);                                
                    } else {
                        _onApiError(response, fail);
                    }
                } else {
                    _onApiError(response, fail);
                }
            },
            
            _onBeforeSend = function(url, data) {
                Service.$debug.d('[PPAPI] [Request]: ', url, data);
            };
                        
        this._post = function(url, data, success, fail) {

            if (_apiToken == null) {
                Service.$debug.d('[PPAPI] [Error]: ', "no token");
                Service.$errorHint.warn(Service.ErrorHint.ERROR_SERVICE_NOT_AVALIABLE);
                return;
            }
           
            var urlPath = Configuration.api + url;
            $.support.cors = true;

            // DON'T set `dataType` to `json` here !!!
            //
            // If you set `dataType: 'json'`, then when you send `??`, jQuery will throw a `parsererror` exception
            // 
            // As the jQuery offical doc says:
            // The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown
            //
            // @see http://api.jquery.com/jquery.ajax/
            // @see http://stackoverflow.com/questions/5061310/jquery-returning-parsererror-for-ajax-request
            $.ajax({
                url: urlPath,
                type: 'post',
                data: Service.$json.stringify(data),
                headers: {
                    "Content-Type": "application/json;charset=utf-8",
                    "Authorization": "OAuth " + _apiToken,
                },
                cache: false,
                crossDomain : true,
                beforeSend: function() {
                    _onBeforeSend(urlPath, data);
                },
                success: function(response) {
                    _onResponse(response, success, fail);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    _onError(textStatus, fail);
                }
            });
        };

        this.init = function(appUuid, apiKey, apiSecret) {
            _appUuid = appUuid;
            _apiKey = apiKey;
            _apiSecret = apiSecret;            
        };

        this.getPPComToken = function(success, fail) {
            var urlPath = Configuration.auth + "/token";
            var requestData = "client_id=" + _apiKey + "&client_secret=" + _apiSecret + "&grant_type=client_credentials"
            
            $.support.cors = true;
            $.ajax({
                url: urlPath,
                type: 'post',
                data: requestData,
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                cache: false,
                crossDomain : true,
                beforeSend: function() {
                    _onBeforeSend(urlPath, requestData);
                },
                success: function(response) {
                    _apiToken = response.access_token;
                    _onApiSuccess(response, success);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    _onError(textStatus, fail);
                }
            });
        };

        this.updateUser = function(data, success, fail) {
            this._post("/PP_UPDATE_USER", $.extend( {}, data ), success, fail );
        };

        this.getConversationList = function(data, success, fail) {
            this._post("/PP_GET_USER_CONVERSATION_LIST", $.extend({}, data), success, fail);
        };

        this.getConversation = function(data, success, fail) {
            this.getConversationList(data, success, fail);
        };

        // data : { user_uuid: xxx, app_uuid: xxx, member_list: [ 'xxxxx', 'xxxxx' ], group_uuid: xxx }
        this.createConversation = function(data, success, fail) {
            this._post("/PP_CREATE_CONVERSATION", $.extend( {}, data ), success, fail);
        };

        this.sendMessage = function(data, success, fail) {
            this._post("/PP_SEND_MESSAGE", data, success, fail);
        };

        // { list: [ 'xxx', 'xxxx' ] }
        this.ackMessage = function(data, success, fail) {
            this._post("/ACK_MESSAGE", $.extend( {}, data ), success, fail);
        };

        this.createAnonymousUser = function(data, success, fail) {
            this._post("/PP_CREATE_ANONYMOUS", $.extend( {}, data ), success, fail);
        };

        // {
        //     app_uuid: xxx,
        //     user_uuid: xxx,
        //     device_ostype: xxx,
        //     ppcom_trace_uuid: xxx,
        //     device_id: xxx
        // }
        this.createDevice = function(data, success, fail) {
            this._post("/PP_CREATE_DEVICE", $.extend( true, {}, data ), success, fail);
        };

        // @device_os_type: `Service.$device.getOSType()`;
        this.updateDevice = function(data, success, fail) {
            this._post("/PP_UPDATE_DEVICE", $.extend( {}, data ), success, fail);
        };

        /*
         * Get user_uuid by the third-web-site's user_email
         */
        this.getUserUuid = function(data, success, fail) {
            this._post("/PP_GET_USER_UUID", $.extend( {}, data ), success, fail);
        };

        this.getUserDetailInfo = function(data, success, fail) {
            this._post("/GET_YVOBJECT_DETAIL", $.extend( {}, data ), success, fail);
        };

        /**
         * Get message conversation historys
         */
        this.pageMessageHistory = function(data, success, fail) {
            this._post("/PP_PAGE_HISTORY_MESSAGE", $.extend( {}, data ), success, fail);
        };
        
        /**
         * Get ImappInfo
         */
        this.getAppInfo = function(data, success, fail) {  
            this._post("/PP_GET_APP_INFO", $.extend( {}, data ), success, fail);
        };

        /**
         * Get welcome team
         */
        this.getWelcomeTeam = function(data, success, fail) {
            this._post("/PP_GET_WELCOME_TEAM", $.extend( {}, data ), success, fail);
        };

        // data: { app_uuid: xxx, user_uuid: xxx }
        this.getDefaultConversation = function ( data, success, fail ) {
            this._post( '/PP_GET_DEFAULT_CONVERSATION', $.extend( {}, data ), success, fail );
        };

        // data: { app_uuid: xxx, conversation_uuid: xxx }
        this.getConversationUserList = function ( data, success, fail ) {
            this._post( '/PP_GET_CONVERSATION_USER_LIST', $.extend( {}, data ), success, fail );
        };

        // data: { app_uuid: xxx, user_uuid: xxx, device_uuid: xxx, group_uuid: xxx }
        this.cancelWaitingCreateConversation = function ( data, success, fail ) {
            this._post( '/PP_CANCEL_WAITING_CREATE_CONVERSATION', $.extend( {}, data ), success, fail );
        };

        // data: { app_uuid: xxx, user_uuid: xxx, device_uuid: xxx }
        this.getPPComDefaultConversation = function ( data, success, fail ) {
            this._post( '/PPCOM_GET_DEFAULT_CONVERSATION', $.extend( {}, data ), success, fail );
        };

        // data: { app_uuid: xxx, user_uuid: xxx, member_list: [ 'user_uuid' ], group_uuid: xxx }
        this.createPPComConversation = function ( data, success, fail ) {
            this._post( '/PPCOM_CREATE_CONVERSATION', $.extend( {}, data ), success, fail );
        };

        // data: { app_uuid: xxx, user_uuid: xxx, conversation_uuid: xxx }
        this.getConversationInfo = function ( data, success, fail ) {
            this._post( '/PP_GET_CONVERSATION_INFO', $.extend( {}, data ), success, fail );
        };

        // data: { app_uuid: xxx }
        this.getWaitingQueueLength = function( data, success, fail ) {
            this._post( '/PP_GET_AMD_QUEUE_LENGTH', $.extend( {}, data ), success, fail );
        };

        this.getAppUuid = function() {
            return _appUuid;
        };

        this.getApiToken = function() {
            return _apiToken;
        };

    }

    Service.$api = new PPAPI();
    
})(Service));

//
// @description: for global data cache
//
// Service.$rootCache.set(Service.KEYS.XXX_XXX);
// var myValue = Service.$rootCache.get(Service.KEYS.XXX_XXX);
//
Service.$rootCache = (function() {

    var storage = {},

        get = function(key) {
            return storage[key];
        },

        set = function(key, value) {
            storage[key] = value;
        },

        exist = function(key) {
            return storage[key] !== undefined;
        };

    return {
        get:get,
        set:set,
        exist:exist
    }
    
})();

/**
 * 创建和删除Cookie
 *
 * Example:
 *
 * var cookie = new Service.PPCookies();
 * cookie.set('key', 'value', {
 *     expires: 7 // 7 day
 * });
 * cooki.get('key'); // return value
 *
 */
((function(Service) {

    /**
     * constructor
     */
    function PPCookies() {
    }

    PPCookies.prototype._api = function(key, value, attributes) {
        //write
        if (arguments.length > 1) {
            attributes = attributes || {};
            if (typeof attributes.expires === 'number') {
                var expires = new Date();
                expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 1000);
				attributes.expires = expires;
            }
            return (document.cookie = [
				key, '=', value,
				attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
				attributes.path    && '; path=' + attributes.path,
				attributes.domain  && '; domain=' + attributes.domain,
				attributes.secure ? '; secure' : ''
			].join(''));
        }

        //read
        var result;
        var cookies = document.cookie ? document.cookie.split('; ') : [];
        var i = 0;
        for (; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var name = parts[0];
            var value = parts[1];

            if (name === key) {
                result = value;
                break;
            }
        }

        return result;
    };

    /**
     * 设置Cookie
     */
    PPCookies.prototype.set = function(key, value, attributes) {
        return this._api(key, value, attributes);
    };

    /**
     * 根据Key从Cookie中取值
     */
    PPCookies.prototype.get = function(key) {
        return this._api(key);
    };

    Service.PPCookies = PPCookies;
    
})(Service));

/**
 * 用于向开发者提示(打印到console)错误信息
 *
 * API:
 * warn(): 使用console.warn() 打印警告信息
 * error(): 使用console.error() 打印错误信息
 *
 * Example:
 * new Service.ErrorHint().warn(10000);
 * new Service.ErrorHint().error(10001);
 *
 */
(function(Service) {

    /**
     * @constructor
     * 
     */
    function PPErrorHint() {
    }

    PPErrorHint.ERROR_ILLEGAL_APPUUID = 10000;
    PPErrorHint.ERROR_ILLEGAL_USER_EMAIL = 10001;
    PPErrorHint.ERROR_IE9_OR_LOWER_BROWSER = 10002;
    PPErrorHint.ERROR_SERVICE_NOT_AVALIABLE = 10003;
    PPErrorHint.ERROR_ILLEGAL_USER_EMAIL_STYLE = 10004;

    PPErrorHint._ERROR_INFO = {
        10000: 'appUuid not provide, Please check your appUuid and try again',
        10001: 'Can not find user by the user_email, please check your user_email and try again',
        10002: 'Can not run ppMessage on IE 9 or lower version browser',
        10003: 'Service not avaliable',
        10004: 'Not a valid user_email',
    };

    PPErrorHint.prototype._getErrorDescription = function(errorCode) {
        for (var key in PPErrorHint._ERROR_INFO) {
            if (key == errorCode) {
                return PPErrorHint._ERROR_INFO[key];
            }
        }
        return "";
    };

    PPErrorHint.prototype._getErrorLogDescription = function(errorCode) {
        return (typeof errorCode === 'number') ? ('PPMessage: [errorCode:' + errorCode + ", errorDescription:'" + this._getErrorDescription(errorCode) + "']") : errorCode;
    };

    /**
     * log warn info
     * param errorCode 错误代码
     */
    PPErrorHint.prototype.warn = function(errorCode) {
        window.console &&
            window.console.warn &&
            console.warn(this._getErrorLogDescription(errorCode));
    };

    /**
     * log error info
     */
    PPErrorHint.prototype.error = function(errorCode) {
        window.console &&
            window.console.error &&
            console.error(this._getErrorLogDescription(errorCode));
    };

    Service.ErrorHint = PPErrorHint;
    
}(Service));

/**
 * 当用户信息改变的时候(通常指：user_fullname 或者 user_icon)，`$users`服务会publish一个`user/infochange/xxx-xxx-xxx(user_uuid)`事件.
 *
 * 所以如果想在某用户(如：user_uuid:xxx)信息改变的时候doSomething，应该subscribe一个topic:
 * Service.$pubsub.subscribe('user/infochange/xxx', function(topics, user) {
 *     // do something with new user info
 * });
 *
 * 当用户状态改变的时候，offline->online or online->offline, `$users` will publish a `use/infochange/state/xxx-xxx(user_uuid)` topic.
 *
 */
((function(Service) {

    var users = (function() {

        // Store users
        var usersStore = {};
        
        // User Class
        function User(options) {

            // user body
            var user = $.extend({}, User.DEFAULTS, options),

                // does user info (icon or name) has changed ?
                isUserInfoChanged = function(options) {
                    if (!options.user_uuid) return false;
                    
                    // fullname changed or user_avatar changed
                    return (options.user_fullname && options.user_fullname != user.user_fullname) ||
                        (options.user_avatar && options.user_avatar != user.user_avatar);
                },

                // online or offline state changed
                isUserStateChanged = function(options) {
                    if (!options.user_uuid) return false;

                    return options.is_online !== user.is_online;
                };

            // Return user's info
            this.getInfo = function() {
                return user;
            };

            // Update user's info
            this.update = function(options) {
                if (!options.user_uuid) return this;

                // user info changed , publish change event
                // NOTE: 1. MUST first check (`isUserInfoChanged`) is user info changed
                // 2. then update it (`$.extend`)
                var changed = isUserInfoChanged(options),
                    stateChanged = isUserStateChanged(options);
                    
                // update it
                user = $.extend({}, user, options);

                if (changed) {
                    Service.$pubsub.publish('user/infochange/' + user.user_uuid, this);
                }
                
                if (stateChanged) {
                    Service.$pubsub.publish('user/infochange/state/' + user.user_uuid, this);
                }

                return this;
            };
            
        }

        // Default user info options
        // No user_uuid, No device_uuid
        User.DEFAULTS = {
            is_portal_user: false,
            is_anonymous: true,
            ppcom_trace_uuid: null,
            user_fullname: Service.Constants.USER_DEFAULT_NAME,
            user_avatar: Service.Constants.ICON_DEFAULT_USER,
            user_uuid: "",
            device_uuid: "",
            user_signature: '',
            is_browser_online: false,
            is_mobile_online: false,
            is_online: false
        };

        // Create a user with user options
        function createUser(options) {
            return new User(options);
        }

        // Get a user
        function getUser(userUUID) {
            return usersStore[userUUID];
        }

        // Set a user
        function setUser(userUUID, user) {
            if (!userUUID || !user) return;

            usersStore[userUUID] = user;
        }

        // Clear all user's info
        function clearUsers() {
            usersStore = {};
        }

        // Test is a user exist 
        function isUserExist(userUUID) {
            if (!userUUID) return false;
            
            return usersStore[userUUID] !== undefined;
        }

        // Async get user
        function asyncGetUser(options, completeCB) {
            // user exist
            if (isUserExist(options.user_uuid)) {
                updateUser(options);
                if (completeCB) completeCB(getUser(options.user_uuid));
                return;
            }

            // 获取用户信息最主要的原因是需要获取 name 和 avatar, 如果已经有了，那么直接返回
            // 通常这种情况出现在 收到消息的时候，因为消息体本身带有 `from_user` json body
            if (options.user_uuid &&
                options.user_fullname &&
                options.user_avatar) {

                var user = createUser(options);
                setUser(options.user_uuid, user);

                if (completeCB) completeCB(user);
                return;
            }

            // 获取历史消息时候，没有 user_fullname 和 user_avatar
            // Call getUserDetailInfo to get it's detail info
            Service.$api.getUserDetailInfo({
                uuid: options.user_uuid,
                type: 'DU'
            }, function(response) {

                // Merge options info to response options
                var info = $.extend({}, {
                    user_email: response.email,
                    user_fullname: response.fullname ? response.fullname : Service.Constants.USER_DEFAULT_NAME,
                    user_uuid: response.uuid,
                    user_avatar: response.icon ? Service.$tools.getFileDownloadUrl(response.icon) : Service.Constants.ICON_DEFAULT_USER
                }, options);
                
                var user = createUser(info);

                // Cache it
                setUser(options.user_uuid, user);

                if (completeCB) completeCB(user);
            }, function(error) {
                // Get user failed
                if (completeCB) completeCB(null);
            });    
        }

        // Get all users
        function getUsers() {
            return usersStore;
        }

        // Update user info
        function updateUser(options) {
            if (!options) return;
            if (!options.user_uuid) return;
            if (!isUserExist(options.user_uuid)) return;

            getUser(options.user_uuid).update(options);
        }

        function adapter ( options ) {
            if ( !options ) return;

            var userUUID = options.uuid || options.user_uuid,
                userAvatar = Service.$tools.icon.get( options.user_icon || options.icon || options.user_avatar ),
                userName = options.user_fullname,
                userOnline = ( options.is_mobile_online || options.is_browser_online ),
                userBrowserOnline = options.is_browser_online,
                userMobileOnline = options.is_mobile_online,
                // ( options.user_signature === null ) => true
                // ( typeof null === 'object' ) => true
                userSignature = options.user_signature ? options.user_signature : '';

            return {
                user_uuid: userUUID,
                user_fullname: userName,
                user_avatar: userAvatar,
                user_signature: userSignature,
                is_online: userOnline,
                is_browser_online: userBrowserOnline,
                is_mobile_online: userMobileOnline
            };

        }

        function getOrCreateUser ( options ) {
            if ( !options || !options.user_uuid ) return;

            var user_uuid = options.user_uuid;
            
            if ( isUserExist( user_uuid ) ) {
                return getUser( user_uuid ).update( options );
            } else {
                setUser( user_uuid, createUser( options ) );
                return getUser( user_uuid );
            }
        }

        return {
            createUser: createUser,
            
            // get user
            getUser: getUser,
            getOrCreateUser: getOrCreateUser,
            asyncGetUser: asyncGetUser,
            getUsers: getUsers,

            // set user
            setUser: setUser,

            // update user
            updateUser: updateUser,

            // user adapter
            adapter: adapter,
            
            clear: clearUsers,
            exist: isUserExist
        }
        
    })();

    Service.$users = users;
    
})(Service));

Service.$user = (function() {

    // web_site user
    var user_uuid = null;

    return {
        
        // Get website user info
        getUser: function() {
            if ( !user_uuid ) return null;
            return getUser( user_uuid );
        },
        
        // Set website user
        setUser: function(userInfo) {
            user_uuid = userInfo.user_uuid;
            Service.$users.setUser(user_uuid, Service.$users.createUser(userInfo));
        },
        
        // Make user offline
        offline: function() {
            if (!user_uuid) return;

            var userInfo = getUserInfo( user_uuid );
            
            if ( userInfo && // user info is ok
                 userInfo.device_uuid && // user device_uuid is also ok
                 userInfo.is_online // user really `online` now
               ) {
                
                // update user's local info
                getUser( user_uuid ).update( {
                    user_uuid: user_uuid,
                    is_online: false
                } );
                
            }
            
        },

        online: function() {
            if ( !user_uuid ) return;
            
            var userInfo = getUserInfo( user_uuid );
            if ( userInfo &&
                 userInfo.device_uuid &&
                 ( !userInfo.is_online ) ) {

                getUser( user_uuid ).update( {
                    user_uuid: user_uuid,
                    is_online: true
                } );
                
            }
        },
        
        // Clear user
        clear: function() {
            user_uuid = null;
        },

        // quick get current user's id
        quickId: function() {
            return user_uuid;
        },

        quickDeviceUUID: function() {
            var userInfo = getUserInfo( user_uuid );
            return userInfo && userInfo.device_uuid;
        }
        
    }

    //////// Implentation /////////

    function getUser ( userId ) {
        if ( !userId ) return;
        return Service.$users.getUser( userId );
    }

    function getUserInfo ( userId ) {
        if ( !userId ) return;
        var user = getUser( userId ),
            userInfo = user && user.getInfo();
        return userInfo;
    }

    function isOnline ( userId ) {
        var userInfo = getUserInfo( userId );
        if ( userInfo ) {
            return userInfo.is_online;
        }
        return false;
    }
    
}());

((function() {

    var ppSettings = (function() {

        var settings = null,
            userSettings = null,

            ANONYMOUS_USER_COOKIE_KEY = 'pp-id',

            // Default settings
            DEFAULT = {

                app_uuid: null,
                api_key: null,
                api_secret: null,
                
                user_email: null,
                user_name: null,
                user_icon: null,

                language: window.navigator.userLanguage || window.navigator.language,

                view: {
                    launcher_bottom_margin: '20px',
                    launcher_right_margin: '20px',
                    launcher_is_show: true
                }
                
            },

            // Initialize pp settings
            init = function(options) {
                settings = $.extend({}, DEFAULT, options);
                settings.api_key = Configuration.api_key;
                settings.api_secret = Configuration.api_secret;
            },

            // Get user's settings
            getUserSettings = function() {
                if (settings == null) return null;
                if (userSettings != null) return userSettings;

                // is anonymous user
                var isAnonymousUser = true;

                // 保持键的名字与`$service.User.DEFAULT`相同，因为我们会使用`userSettings`来Create
                // `$service.User`
                userSettings = {

                    user_email: settings.user_email,
                    user_fullname: settings.user_name,
                    user_avatar: settings.user_icon,
                    user_uuid: null,
                    device_uuid: null,

                    is_portal_user: true,
                    is_anonymous: isAnonymousUser,
                    ppcom_trace_uuid: (function() {
                        // get ppcom_trace_uuid
                        var id = Service.$cookies.get(ANONYMOUS_USER_COOKIE_KEY) || function() {
                            var uuid = Service.$tools.getUUID();
                            Service.$cookies.set(ANONYMOUS_USER_COOKIE_KEY, uuid, {
                                expires: 365 * 15 * 24 * 3600 //15 year, never delete it
                            });
                            return uuid;
                        }();

                        return id;
                        
                    })()
                    
                };

                return userSettings;
                
            },

            // update user settings
            updateUserSettings = function(options) {
                userSettings = $.extend(getUserSettings(), options);
            },

            // get language
            getLanguage = function() {
                return settings.language;
            },

            getAppUuid = function() {
                return settings.app_uuid;
            },

            getApiKey = function() {
                return settings.api_key;
            },

            getApiSecret = function() {
                return settings.api_secret;
            },

            // Clear state
            clear = function() {
                settings = null;
                userSettings = null;                
            }

        // api
        return {
            init: init,
            
            getUserSettings: getUserSettings,
            updateUserSettings: updateUserSettings,
            
            getLanguage: getLanguage,
            getAppUuid: getAppUuid,
            getApiKey: getApiKey,
            getApiSecret: getApiSecret,
            
            clear: clear
        }
        
    })();
    
    Service.$ppSettings = ppSettings;
    
})());

((function(Service) {

    function PPDebug() {
        
        var _DEBUG_ = true,
            _TEMPORARY_CLOSE_ = false,
            self = this,

            supportConsole = !(typeof console === "undefined" || typeof console.log === "undefined"),
            supportConsoleApply = supportConsole && !(typeof console.log.apply === "unknown" || typeof console.log.apply === "undefined"),
            
            highlightBegin = '↓↓↓↓↓↓↓↓↓↓',
            highlightStyle = "font-size:28px; color:blue;";

        this.h = function() {
            if (!supportConsole) return;
            
            if (_DEBUG_) {
                var cssStr = "%c" + highlightBegin;
                this.d(cssStr, highlightStyle);
            }
            return this;
        }
        
        this.d = function() {
            if (!supportConsole) return;
            
            if (_DEBUG_) {
                if (!_TEMPORARY_CLOSE_) {
                    var args = Array.prototype.slice.call(arguments);
                    supportConsoleApply ? console.log.apply(console, args) : console.log(args);
                } else {
                    _TEMPORARY_CLOSE_ = false;
                }
            }
            return this;
        };

        this.error = function() {
            if (!supportConsole) return;
            
            if (_DEBUG_) {
                if (!_TEMPORARY_CLOSE_) {
                    var args = Array.prototype.slice.call(arguments);
                    supportConsoleApply ? console.error.apply(console, args) : console.error(args);
                } else {
                    _TEMPORARY_CLOSE_ = false;
                }
            }
            return this;                    
        };

        /*
         * temporarily close debug
         *
         * call this method before `this.d()`
         *
         * Example:
         * Service.Debug.close(true).d('----I will not show----');
         */
        this.close = function(close) {
            // _TEMPORARY_CLOSE_ = (close != undefined) ? close : false;
            return this;
        };

        this.debug = function(d) {
            _DEBUG_ = d;
            return this;
        };
    }

    Service.$debug = new PPDebug();
    
})(Service));

// IE8, IE9 not support `WebSocket`, `FormData`, `File` API
((function(Service) {

    Service.$device = (function() {

        var w = window,

            deviceWidth = (w.innerWidth > 0) ? w.innerWidth : screen.width,
            deviceHeight = (w.innerHeight > 0) ? w.innerHeight : screen.height,

            DEVICE_ID_COOKIE_KEY = 'pp-device-id',
            DEVICE_ID_COOKIE_EXPIRE = 10 * 365 * 24 * 3600, // 10 years, never delete it
            deviceId, // device identifier

            userAgent = navigator.userAgent,
            platform = navigator.platform,

            isIOS = /iPhone|iPad|iPod/i.test(userAgent),
            isAndroid = /Android/i.test(userAgent),
            isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent),
            isWP = /Windows Phone/i.test(userAgent) || /iemobile/i.test(userAgent) || /WPDesktop/i.test(userAgent),

            isMac = platform.toUpperCase().indexOf('MAC') >= 0,
            isWin = platform.toUpperCase().indexOf('WIN') > -1,
            isLin = platform.toUpperCase().indexOf('LINUX') > -1,

            OS = {
                MAC: 'MAB',
                LIN: 'LIB',
                WIN: 'WIB'
            };

        this.getDeviceWidth = function() {
            return deviceWidth;
        };

        this.getDeviceHeight = function() {
            return deviceHeight;
        };

        this.inMobile = function() {
            var w = this.getDeviceWidth();
            return w <= 736;
        };

        this.disableScroll = function() {
            $('html, body').css({
                'overflow': 'hidden',
                'height': '100%'
            });
        };

        this.enableScroll = function() {
            $('html, body').css({
                'overflow': 'auto',
                'height': 'auto'
            });
        };

        this.isIOS = function() {
            return isIOS;
        };

        this.isAndroid = function() {
            return isAndroid;
        };

        this.isMobileBrowser = function() {
            return isMobile;
        };

        // if IE browser, then return IE version number
        // if not IE browser, then return false
        this.isIE = function () {
            var ua = userAgent;

            var msie = ua.indexOf('MSIE ');
            if (msie > 0) {
                // IE 10 or older => return version number
                return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
            }

            var trident = ua.indexOf('Trident/');
            if (trident > 0) {
                // IE 11 => return version number
                var rv = ua.indexOf('rv:');
                return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
            }

            var edge = ua.indexOf('Edge/');
            if (edge > 0) {
                // IE 12 => return version number
                return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
            }

            // other browser
            return false;
        };

        this.isIE9 = function() { // IE 9
            var ieVersion = this.isIE();
            return ieVersion && ieVersion == 9;
        };

        this.isIE9OrLowerVersionBrowser = function() { // <= IE 9
            var ieVersion = this.isIE();
            return ieVersion && ieVersion <= 9;
        };

        /** Detect is windwos platform **/
        this.isWindowsPlatform = function() {
            return isWin;
        };

        this.isMac = function() { // is mac platform
            return isMac;
        };

        this.isFirefox = function() {
            return typeof InstallTrigger !== 'undefined'; //Firefox 1.0+
        };

        this.getOSType = function() {

            if ( isAndroid || isLin ) return OS.LIN;

            if ( isIOS || isMac ) return OS.MAC;

            if ( isWP || isWin ) return OS.WIN;

            return OS.MAC;
        };

        this.getDeviceId = function() {

            if (deviceId) return deviceId;

            deviceId = Service.$cookies.get(DEVICE_ID_COOKIE_KEY) || function() {
                var uuid = Service.$tools.getUUID();
                Service.$cookies.set(DEVICE_ID_COOKIE_KEY, uuid, {
                    expires: DEVICE_ID_COOKIE_EXPIRE
                });
                return uuid;
            }();

            return deviceId;
            
        };

        /* Whether or not support play mp3 */
        this.audioMp3 = function() {
            var e = $( '<audio>' )[0];
            return !!e.canPlayType && !!e.canPlayType("audio/mpeg;").replace(/^no$/, "");
        };

        return this;
        
    })();
    
})(Service));

((function(Service) {

    function PPEmoji() {

        var fromCharCode = String.fromCharCode,

            groups = {
                People : [
                    [fromCharCode(0xD83D, 0xDE04), 'smile'],
                    [fromCharCode(0xD83D, 0xDE03), 'smiley'],
                    [fromCharCode(0xD83D, 0xDE00), 'grinning'],
                    [fromCharCode(0xD83D, 0xDE0A), 'blush'],
                    [fromCharCode(0xD83D, 0xDE09), 'wink'],
                    [fromCharCode(0xD83D, 0xDE0D), 'heart_eyes'],
                    [fromCharCode(0xD83D, 0xDE18), 'kissing_heart'],
                    [fromCharCode(0xD83D, 0xDE1A), 'kissing_closed_eyes'],
                    [fromCharCode(0xD83D, 0xDE1C), 'stuck_out_tongue_winking_eye'],
                    [fromCharCode(0xD83D, 0xDE1D), 'stuck_out_tongue_closed_eyes'],
                    [fromCharCode(0xD83D, 0xDE1B), 'stuck_out_tongue'],
                    [fromCharCode(0xD83D, 0xDE33), 'flushed'],
                    [fromCharCode(0xD83D, 0xDE01), 'grin'],
                    [fromCharCode(0xD83D, 0xDE14), 'pensive'],
                    [fromCharCode(0xD83D, 0xDE0C), 'relieved'],
                    [fromCharCode(0xD83D, 0xDE12), 'unamused'],
                    [fromCharCode(0xD83D, 0xDE1E), 'disappointed'],
                    [fromCharCode(0xD83D, 0xDE23), 'persevere'],
                    [fromCharCode(0xD83D, 0xDE22), 'cry'],
                    [fromCharCode(0xD83D, 0xDE02), 'joy'],
                    [fromCharCode(0xD83D, 0xDE2D), 'sob'],
                    [fromCharCode(0xD83D, 0xDE2A), 'sleepy'],
                    [fromCharCode(0xD83D, 0xDE25), 'disappointed_relieved'],
                    [fromCharCode(0xD83D, 0xDE30), 'cold_sweat'],
                    [fromCharCode(0xD83D, 0xDE05), 'sweat_smile'],
                    [fromCharCode(0xD83D, 0xDE13), 'sweat'],
                    [fromCharCode(0xD83D, 0xDE29), 'weary'],
                    [fromCharCode(0xD83D, 0xDE2B), 'tired_face'],
                    [fromCharCode(0xD83D, 0xDE28), 'fearful'],
                    [fromCharCode(0xD83D, 0xDE31), 'scream'],
                    [fromCharCode(0xD83D, 0xDE20), 'angry'],
                    [fromCharCode(0xD83D, 0xDE21), 'rage'],
                    [fromCharCode(0xD83D, 0xDE24), 'triumph'],
                    [fromCharCode(0xD83D, 0xDE16), 'confounded'],
                    [fromCharCode(0xD83D, 0xDE06), 'laughing'],
                    [fromCharCode(0xD83D, 0xDE0B), 'yum'],
                    [fromCharCode(0xD83D, 0xDE37), 'mask'],
                    [fromCharCode(0xD83D, 0xDE0E), 'sunglasses'],
                    [fromCharCode(0xD83D, 0xDE35), 'dizzy_face'],
                    [fromCharCode(0xD83D, 0xDE32), 'astonished'],
                    [fromCharCode(0xD83D, 0xDC7F), 'imp'],
                    [fromCharCode(0xD83D, 0xDE26), 'open_mouth'],
                    [fromCharCode(0xD83D, 0xDE10), 'neutral_face'],
                    [fromCharCode(0xD83D, 0xDE15), 'confused'],
                    [fromCharCode(0xD83D, 0xDE0F), 'smirk'],
                    [fromCharCode(0xD83D, 0xDC72), 'man_with_gua_pi_mao'],
                    [fromCharCode(0xD83D, 0xDC73), 'man_with_turban'],
                    [fromCharCode(0xD83D, 0xDC6E), 'cop'],
                    [fromCharCode(0xD83D, 0xDC77), 'construction_worker'],
                    [fromCharCode(0xD83D, 0xDC82), 'guardsman'],
                    [fromCharCode(0xD83D, 0xDC76), 'baby'],
                    [fromCharCode(0xD83D, 0xDC66), 'boy'],
                    [fromCharCode(0xD83D, 0xDC67), 'girl'],
                    [fromCharCode(0xD83D, 0xDC68), 'man'],
                    [fromCharCode(0xD83D, 0xDC69), 'woman'],
                    [fromCharCode(0xD83D, 0xDC74), 'older_man'],
                    [fromCharCode(0xD83D, 0xDC75), 'older_woman'],
                    [fromCharCode(0xD83D, 0xDC71), 'person_with_blond_hair'],
                    [fromCharCode(0xD83D, 0xDC7C), 'angel'],
                    [fromCharCode(0xD83D, 0xDC78), 'princess'],
                    [fromCharCode(0xD83D, 0xDE3A), 'smiley_cat'],
                    [fromCharCode(0xD83D, 0xDE38), 'smile_cat'],
                    [fromCharCode(0xD83D, 0xDE3B), 'heart_eyes_cat'],
                    [fromCharCode(0xD83D, 0xDE3D), 'kissing_cat'],
                    [fromCharCode(0xD83D, 0xDE3C), 'smirk_cat'],
                    [fromCharCode(0xD83D, 0xDE40), 'scream_cat'],
                    [fromCharCode(0xD83D, 0xDE3F), 'crying_cat_face'],
                    [fromCharCode(0xD83D, 0xDE39), 'joy_cat'],
                    [fromCharCode(0xD83D, 0xDE3E), 'pouting_cat'],
                    [fromCharCode(0xD83D, 0xDC79), 'japanese_ogre'],
                    [fromCharCode(0xD83D, 0xDC7A), 'japanese_goblin'],
                    [fromCharCode(0xD83D, 0xDE48), 'see_no_evil'],
                    [fromCharCode(0xD83D, 0xDE49), 'hear_no_evil'],
                    [fromCharCode(0xD83D, 0xDE4A), 'speak_no_evil'],
                    [fromCharCode(0xD83D, 0xDC80), 'skull'],
                    [fromCharCode(0xD83D, 0xDC7D), 'alien'],
                    [fromCharCode(0xD83D, 0xDCA9), 'hankey'],
                    [fromCharCode(0xD83D, 0xDD25), 'fire'],
                    [fromCharCode(0xD83C, 0xDF1F), 'star2'],
                    [fromCharCode(0xD83D, 0xDCAB), 'dizzy'],
                    [fromCharCode(0xD83D, 0xDCA5), 'boom'],
                    [fromCharCode(0xD83D, 0xDCA2), 'anger'],
                    [fromCharCode(0xD83D, 0xDCA6), 'sweat_drops'],
                    [fromCharCode(0xD83D, 0xDCA7), 'droplet'],
                    [fromCharCode(0xD83D, 0xDCA4), 'zzz'],
                    [fromCharCode(0xD83D, 0xDCA8), 'dash'],
                    [fromCharCode(0xD83D, 0xDC42), 'ear'],
                    [fromCharCode(0xD83D, 0xDC40), 'eyes'],
                    [fromCharCode(0xD83D, 0xDC43), 'nose'],
                    [fromCharCode(0xD83D, 0xDC45), 'tongue'],
                    [fromCharCode(0xD83D, 0xDC44), 'lips'],
                    [fromCharCode(0xD83D, 0xDC4D), 'thumbs_up'],
                    [fromCharCode(0xD83D, 0xDC4E), 'thumbs_down'],
                    [fromCharCode(0xD83D, 0xDC4C), 'ok_hand'],
                    [fromCharCode(0xD83D, 0xDC4A), 'facepunch'],
                    [fromCharCode(0xD83D, 0xDC4B), 'wave'],
                    [fromCharCode(0xD83D, 0xDC50), 'open_hands'],
                    [fromCharCode(0xD83D, 0xDC46), 'point_up_2'],
                    [fromCharCode(0xD83D, 0xDC47), 'point_down'],
                    [fromCharCode(0xD83D, 0xDC48), 'point_right'],
                    [fromCharCode(0xD83D, 0xDC49), 'point_left'],
                    [fromCharCode(0xD83D, 0xDE4C), 'raised_hands'],
                    [fromCharCode(0xD83D, 0xDE4F), 'pray'],
                    [fromCharCode(0xD83D, 0xDC4F), 'clap'],
                    [fromCharCode(0xD83D, 0xDCAA), 'muscle'],
                    [fromCharCode(0xD83D, 0xDEB6), 'walking'],
                    [fromCharCode(0xD83C, 0xDFC3), 'runner'],
                    [fromCharCode(0xD83D, 0xDC83), 'dancer'],
                    [fromCharCode(0xD83D, 0xDC6B), 'couple'],
                    [fromCharCode(0xD83D, 0xDC6A), 'family'],
                    [fromCharCode(0xD83D, 0xDC8F), 'couplekiss'],
                    [fromCharCode(0xD83D, 0xDC91), 'couple_with_heart'],
                    [fromCharCode(0xD83D, 0xDC6F), 'dancers'],
                    [fromCharCode(0xD83D, 0xDE46), 'ok_woman'],
                    [fromCharCode(0xD83D, 0xDE45), 'no_good'],
                    [fromCharCode(0xD83D, 0xDC81), 'information_desk_person'],
                    [fromCharCode(0xD83D, 0xDE4B), 'raising_hand'],
                    [fromCharCode(0xD83D, 0xDC86), 'massage'],
                    [fromCharCode(0xD83D, 0xDC87), 'haircut'],
                    [fromCharCode(0xD83D, 0xDC85), 'nail_care'],
                    [fromCharCode(0xD83D, 0xDC70), 'bride_with_veil'],
                    [fromCharCode(0xD83D, 0xDE4E), 'person_with_pouting_face'],
                    [fromCharCode(0xD83D, 0xDE4D), 'person_frowning'],
                    [fromCharCode(0xD83D, 0xDE47), 'bow'],
                    [fromCharCode(0xD83C, 0xDFA9), 'tophat'],
                    [fromCharCode(0xD83D, 0xDC51), 'crown'],
                    [fromCharCode(0xD83D, 0xDC52), 'womans_hat'],
                    [fromCharCode(0xD83D, 0xDC5F), 'athletic_shoe'],
                    [fromCharCode(0xD83D, 0xDC5E), 'mans_shoe'],
                    [fromCharCode(0xD83D, 0xDC61), 'sandal'],
                    [fromCharCode(0xD83D, 0xDC60), 'high_heel'],
                    [fromCharCode(0xD83D, 0xDC62), 'boot'],
                    [fromCharCode(0xD83D, 0xDC55), 'shirt'],
                    [fromCharCode(0xD83D, 0xDC54), 'necktie'],
                    [fromCharCode(0xD83D, 0xDC5A), 'womans_clothes'],
                    [fromCharCode(0xD83D, 0xDC57), 'dress'],
                    [fromCharCode(0xD83C, 0xDFBD), 'running_shirt_with_sash'],
                    [fromCharCode(0xD83D, 0xDC56), 'jeans'],
                    [fromCharCode(0xD83D, 0xDC58), 'kimono'],
                    [fromCharCode(0xD83D, 0xDC59), 'bikini'],
                    [fromCharCode(0xD83D, 0xDCBC), 'briefcase'],
                    [fromCharCode(0xD83D, 0xDC5C), 'handbag'],
                    [fromCharCode(0xD83D, 0xDC5D), 'pouch'],
                    [fromCharCode(0xD83D, 0xDC5B), 'purse'],
                    [fromCharCode(0xD83D, 0xDC53), 'eyeglasses'],
                    [fromCharCode(0xD83C, 0xDF80), 'ribbon'],
                    [fromCharCode(0xD83C, 0xDF02), 'closed_umbrella'],
                    [fromCharCode(0xD83D, 0xDC84), 'lipstick'],
                    [fromCharCode(0xD83D, 0xDC9B), 'yellow_heart'],
                    [fromCharCode(0xD83D, 0xDC99), 'blue_heart'],
                    [fromCharCode(0xD83D, 0xDC9C), 'purple_heart'],
                    [fromCharCode(0xD83D, 0xDC9A), 'green_heart'],
                    [fromCharCode(0xD83D, 0xDC94), 'broken_heart'],
                    [fromCharCode(0xD83D, 0xDC97), 'heartpulse'],
                    [fromCharCode(0xD83D, 0xDC93), 'heartbeat'],
                    [fromCharCode(0xD83D, 0xDC95), 'two_hearts'],
                    [fromCharCode(0xD83D, 0xDC96), 'sparkling_heart'],
                    [fromCharCode(0xD83D, 0xDC9E), 'revolving_hearts'],
                    [fromCharCode(0xD83D, 0xDC98), 'cupid'],
                    [fromCharCode(0xD83D, 0xDC8C), 'love_letter'],
                    [fromCharCode(0xD83D, 0xDC8B), 'kiss'],
                    [fromCharCode(0xD83D, 0xDC8D), 'ring'],
                    [fromCharCode(0xD83D, 0xDC8E), 'gem'],
                    [fromCharCode(0xD83D, 0xDC64), 'bust_in_silhouette'],
                    [fromCharCode(0xD83D, 0xDCAC), 'speech_balloon'],
                    [fromCharCode(0xD83D, 0xDC63), 'footprints']
                ],
                Nature : [
                    [fromCharCode(0xD83D, 0xDC36), 'dog'],
                    [fromCharCode(0xD83D, 0xDC34), 'wolf'],
                    [fromCharCode(0xD83D, 0xDC31), 'cat'],
                    [fromCharCode(0xD83D, 0xDC2D), 'mouse'],
                    [fromCharCode(0xD83D, 0xDC39), 'hamster'],
                    [fromCharCode(0xD83D, 0xDC30), 'rabbit'],
                    [fromCharCode(0xD83D, 0xDC38), 'frog'],
                    [fromCharCode(0xD83D, 0xDC2F), 'tiger'],
                    [fromCharCode(0xD83D, 0xDC28), 'koala'],
                    [fromCharCode(0xD83D, 0xDC3B), 'bear'],
                    [fromCharCode(0xD83D, 0xDC37), 'pig'],
                    [fromCharCode(0xD83D, 0xDC3D), 'pig_nose'],
                    [fromCharCode(0xD83D, 0xDC2E), 'cow'],
                    [fromCharCode(0xD83D, 0xDC17), 'boar'],
                    [fromCharCode(0xD83D, 0xDC35), 'monkey_face'],
                    [fromCharCode(0xD83D, 0xDC12), 'monkey'],
                    [fromCharCode(0xD83D, 0xDC34), 'horse'],
                    [fromCharCode(0xD83D, 0xDC11), 'sheep'],
                    [fromCharCode(0xD83D, 0xDC18), 'elephant'],
                    [fromCharCode(0xD83D, 0xDC3C), 'panda_face'],
                    [fromCharCode(0xD83D, 0xDC27), 'penguin'],
                    [fromCharCode(0xD83D, 0xDC26), 'bird'],
                    [fromCharCode(0xD83D, 0xDC24), 'baby_chick'],
                    [fromCharCode(0xD83D, 0xDC25), 'hatched_chick'],
                    [fromCharCode(0xD83D, 0xDC23), 'hatching_chick'],
                    [fromCharCode(0xD83D, 0xDC14), 'chicken'],
                    [fromCharCode(0xD83D, 0xDC0D), 'snake'],
                    [fromCharCode(0xD83D, 0xDC22), 'turtle'],
                    [fromCharCode(0xD83D, 0xDC1B), 'bug'],
                    [fromCharCode(0xD83D, 0xDC1D), 'bee'],
                    [fromCharCode(0xD83D, 0xDC1C), 'ant'],
                    [fromCharCode(0xD83D, 0xDC1E), 'beetle'],
                    [fromCharCode(0xD83D, 0xDC0C), 'snail'],
                    [fromCharCode(0xD83D, 0xDC19), 'octopus'],
                    [fromCharCode(0xD83D, 0xDC1A), 'shell'],
                    [fromCharCode(0xD83D, 0xDC20), 'tropical_fish'],
                    [fromCharCode(0xD83D, 0xDC1F), 'fish'],
                    [fromCharCode(0xD83D, 0xDC2C), 'dolphin'],
                    [fromCharCode(0xD83D, 0xDC33), 'whale'],
                    [fromCharCode(0xD83D, 0xDC0E), 'racehorse'],
                    [fromCharCode(0xD83D, 0xDC32), 'dragon_face'],
                    [fromCharCode(0xD83D, 0xDC21), 'blowfish'],
                    [fromCharCode(0xD83D, 0xDC2B), 'camel'],
                    [fromCharCode(0xD83D, 0xDC29), 'poodle'],
                    [fromCharCode(0xD83D, 0xDC3E), 'feet'],
                    [fromCharCode(0xD83D, 0xDC90), 'bouquet'],
                    [fromCharCode(0xD83C, 0xDF38), 'cherry_blossom'],
                    [fromCharCode(0xD83C, 0xDF37), 'tulip'],
                    [fromCharCode(0xD83C, 0xDF40), 'four_leaf_clover'],
                    [fromCharCode(0xD83C, 0xDF39), 'rose'],
                    [fromCharCode(0xD83C, 0xDF3B), 'sunflower'],
                    [fromCharCode(0xD83C, 0xDF3A), 'hibiscus'],
                    [fromCharCode(0xD83C, 0xDF41), 'maple_leaf'],
                    [fromCharCode(0xD83C, 0xDF43), 'leaves'],
                    [fromCharCode(0xD83C, 0xDF42), 'fallen_leaf'],
                    [fromCharCode(0xD83C, 0xDF3F), 'herb'],
                    [fromCharCode(0xD83C, 0xDF3E), 'ear_of_rice'],
                    [fromCharCode(0xD83C, 0xDF44), 'mushroom'],
                    [fromCharCode(0xD83C, 0xDF35), 'cactus'],
                    [fromCharCode(0xD83C, 0xDF34), 'palm_tree'],
                    [fromCharCode(0xD83C, 0xDF30), 'chestnut'],
                    [fromCharCode(0xD83C, 0xDF31), 'seedling'],
                    [fromCharCode(0xD83C, 0xDF3C), 'blossom'],
                    [fromCharCode(0xD83C, 0xDF11), 'new_moon'],
                    [fromCharCode(0xD83C, 0xDF13), 'first_quarter_moon'],
                    [fromCharCode(0xD83C, 0xDF14), 'moon'],
                    [fromCharCode(0xD83C, 0xDF15), 'full_moon'],
                    [fromCharCode(0xD83C, 0xDF1B), 'first_quarter_moon_with_face'],
                    [fromCharCode(0xD83C, 0xDF19), 'crescent_moon'],
                    [fromCharCode(0xD83C, 0xDF0F), 'earth_asia'],
                    [fromCharCode(0xD83C, 0xDF0B), 'volcano'],
                    [fromCharCode(0xD83C, 0xDF0C), 'milky_way'],
                    [fromCharCode(0xD83C, 0xDF20), 'stars'],
                    [fromCharCode(0xD83C, 0xDF00), 'cyclone'],
                    [fromCharCode(0xD83C, 0xDF01), 'foggy'],
                    [fromCharCode(0xD83C, 0xDF08), 'rainbow'],
                    [fromCharCode(0xD83C, 0xDF0A), 'ocean']
                ],
                Objects : [
                    [fromCharCode(0xD83C, 0xDF8D), 'bamboo'],
                    [fromCharCode(0xD83D, 0xDC9D), 'gift_heart'],
                    [fromCharCode(0xD83C, 0xDF8E), 'dolls'],
                    [fromCharCode(0xD83C, 0xDF92), 'school_satchel'],
                    [fromCharCode(0xD83C, 0xDF93), 'mortar_board'],
                    [fromCharCode(0xD83C, 0xDF8F), 'flags'],
                    [fromCharCode(0xD83C, 0xDF86), 'fireworks'],
                    [fromCharCode(0xD83C, 0xDF87), 'sparkler'],
                    [fromCharCode(0xD83C, 0xDF90), 'wind_chime'],
                    [fromCharCode(0xD83C, 0xDF91), 'rice_scene'],
                    [fromCharCode(0xD83C, 0xDF83), 'jack_o_lantern'],
                    [fromCharCode(0xD83D, 0xDC7B), 'ghost'],
                    [fromCharCode(0xD83C, 0xDF85), 'santa'],
                    [fromCharCode(0xD83C, 0xDF84), 'christmas_tree'],
                    [fromCharCode(0xD83C, 0xDF81), 'gift'],
                    [fromCharCode(0xD83C, 0xDF8B), 'tanabata_tree'],
                    [fromCharCode(0xD83C, 0xDF89), 'tada'],
                    [fromCharCode(0xD83C, 0xDF8A), 'confetti_ball'],
                    [fromCharCode(0xD83C, 0xDF88), 'balloon'],
                    [fromCharCode(0xD83C, 0xDF8C), 'crossed_flags'],
                    [fromCharCode(0xD83D, 0xDD2E), 'crystal_ball'],
                    [fromCharCode(0xD83C, 0xDFA5), 'movie_camera'],
                    [fromCharCode(0xD83D, 0xDCF7), 'camera'],
                    [fromCharCode(0xD83D, 0xDCF9), 'video_camera'],
                    [fromCharCode(0xD83D, 0xDCFC), 'vhs'],
                    [fromCharCode(0xD83D, 0xDCBF), 'cd'],
                    [fromCharCode(0xD83D, 0xDCC0), 'dvd'],
                    [fromCharCode(0xD83D, 0xDCBD), 'minidisc'],
                    [fromCharCode(0xD83D, 0xDCBE), 'floppy_disk'],
                    [fromCharCode(0xD83D, 0xDCBB), 'computer'],
                    [fromCharCode(0xD83D, 0xDCF1), 'iphone'],
                    [fromCharCode(0xD83D, 0xDCDE), 'telephone_receiver'],
                    [fromCharCode(0xD83D, 0xDCDF), 'pager'],
                    [fromCharCode(0xD83D, 0xDCE0), 'fax'],
                    [fromCharCode(0xD83D, 0xDCE1), 'satellite'],
                    [fromCharCode(0xD83D, 0xDCFA), 'tv'],
                    [fromCharCode(0xD83D, 0xDCFB), 'radio'],
                    [fromCharCode(0xD83D, 0xDD0A), 'loud_sound'],
                    [fromCharCode(0xD83D, 0xDD14), 'bell'],
                    [fromCharCode(0xD83D, 0xDCE2), 'loudspeaker'],
                    [fromCharCode(0xD83D, 0xDCE3), 'mega'],
                    [fromCharCode(0xD83D, 0xDD13), 'unlock'],
                    [fromCharCode(0xD83D, 0xDD12), 'lock'],
                    [fromCharCode(0xD83D, 0xDD0F), 'lock_with_ink_pen'],
                    [fromCharCode(0xD83D, 0xDD10), 'closed_lock_with_key'],
                    [fromCharCode(0xD83D, 0xDD11), 'key'],
                    [fromCharCode(0xD83D, 0xDD0E), 'mag_right'],
                    [fromCharCode(0xD83D, 0xDCA1), 'bulb'],
                    [fromCharCode(0xD83D, 0xDD26), 'flashlight'],
                    [fromCharCode(0xD83D, 0xDD0C), 'electric_plug'],
                    [fromCharCode(0xD83D, 0xDD0B), 'battery'],
                    [fromCharCode(0xD83D, 0xDD0D), 'mag'],
                    [fromCharCode(0xD83D, 0xDEC0), 'bath'],
                    [fromCharCode(0xD83D, 0xDEBD), 'toilet'],
                    [fromCharCode(0xD83D, 0xDD27), 'wrench'],
                    [fromCharCode(0xD83D, 0xDD29), 'nut_and_bolt'],
                    [fromCharCode(0xD83D, 0xDD28), 'hammer'],
                    [fromCharCode(0xD83D, 0xDEAA), 'door'],
                    [fromCharCode(0xD83D, 0xDEAC), 'smoking'],
                    [fromCharCode(0xD83D, 0xDCA3), 'bomb'],
                    [fromCharCode(0xD83D, 0xDD2B), 'gun'],
                    [fromCharCode(0xD83D, 0xDD2A), 'hocho'],
                    [fromCharCode(0xD83D, 0xDC8A), 'pill'],
                    [fromCharCode(0xD83D, 0xDC89), 'syringe'],
                    [fromCharCode(0xD83D, 0xDCB0), 'moneybag'],
                    [fromCharCode(0xD83D, 0xDCB4), 'yen'],
                    [fromCharCode(0xD83D, 0xDCB5), 'dollar'],
                    [fromCharCode(0xD83D, 0xDCB3), 'credit_card'],
                    [fromCharCode(0xD83D, 0xDCB8), 'money_with_wings'],
                    [fromCharCode(0xD83D, 0xDCF2), 'calling'],
                    [fromCharCode(0xD83D, 0xDCE7), 'e-mail'],
                    [fromCharCode(0xD83D, 0xDCE5), 'inbox_tray'],
                    [fromCharCode(0xD83D, 0xDCE4), 'outbox_tray'],
                    [fromCharCode(0xD83D, 0xDCE9), 'envelope_with_arrow'],
                    [fromCharCode(0xD83D, 0xDCE8), 'incoming_envelope'],
                    [fromCharCode(0xD83D, 0xDCEB), 'mailbox'],
                    [fromCharCode(0xD83D, 0xDCEA), 'mailbox_closed'],
                    [fromCharCode(0xD83D, 0xDCEE), 'postbox'],
                    [fromCharCode(0xD83D, 0xDCE6), 'package'],
                    [fromCharCode(0xD83D, 0xDCDD), 'memo'],
                    [fromCharCode(0xD83D, 0xDCC4), 'page_facing_up'],
                    [fromCharCode(0xD83D, 0xDCC3), 'page_with_curl'],
                    [fromCharCode(0xD83D, 0xDCD1), 'bookmark_tabs'],
                    [fromCharCode(0xD83D, 0xDCCA), 'bar_chart'],
                    [fromCharCode(0xD83D, 0xDCC8), 'chart_with_upwards_trend'],
                    [fromCharCode(0xD83D, 0xDCC9), 'chart_with_downwards_trend'],
                    [fromCharCode(0xD83D, 0xDCDC), 'scroll'],
                    [fromCharCode(0xD83D, 0xDCCB), 'clipboard'],
                    [fromCharCode(0xD83D, 0xDCC5), 'date'],
                    [fromCharCode(0xD83D, 0xDCC6), 'calendar'],
                    [fromCharCode(0xD83D, 0xDCC7), 'card_index'],
                    [fromCharCode(0xD83D, 0xDCC1), 'file_folder'],
                    [fromCharCode(0xD83D, 0xDCC2), 'open_file_folder'],
                    [fromCharCode(0xD83D, 0xDCCC), 'pushpin'],
                    [fromCharCode(0xD83D, 0xDCCE), 'paperclip'],
                    [fromCharCode(0xD83D, 0xDCCF), 'straight_ruler'],
                    [fromCharCode(0xD83D, 0xDCD0), 'triangular_ruler'],
                    [fromCharCode(0xD83D, 0xDCD5), 'closed_book'],
                    [fromCharCode(0xD83D, 0xDCD7), 'green_book'],
                    [fromCharCode(0xD83D, 0xDCD8), 'blue_book'],
                    [fromCharCode(0xD83D, 0xDCD9), 'orange_book'],
                    [fromCharCode(0xD83D, 0xDCD3), 'notebook'],
                    [fromCharCode(0xD83D, 0xDCD4), 'notebook_with_decorative_cover'],
                    [fromCharCode(0xD83D, 0xDCD2), 'ledger'],
                    [fromCharCode(0xD83D, 0xDCDA), 'books'],
                    [fromCharCode(0xD83D, 0xDCD6), 'book'],
                    [fromCharCode(0xD83D, 0xDD16), 'bookmark'],
                    [fromCharCode(0xD83D, 0xDCDB), 'name_badge'],
                    [fromCharCode(0xD83D, 0xDCF0), 'newspaper'],
                    [fromCharCode(0xD83C, 0xDFA8), 'art'],
                    [fromCharCode(0xD83C, 0xDFAC), 'clapper'],
                    [fromCharCode(0xD83C, 0xDFA4), 'microphone'],
                    [fromCharCode(0xD83C, 0xDFA7), 'headphones'],
                    [fromCharCode(0xD83C, 0xDFBC), 'musical_score'],
                    [fromCharCode(0xD83C, 0xDFB5), 'musical_note'],
                    [fromCharCode(0xD83C, 0xDFB6), 'notes'],
                    [fromCharCode(0xD83C, 0xDFB9), 'musical_keyboard'],
                    [fromCharCode(0xD83C, 0xDFBB), 'violin'],
                    [fromCharCode(0xD83C, 0xDFBA), 'trumpet'],
                    [fromCharCode(0xD83C, 0xDFB7), 'saxophone'],
                    [fromCharCode(0xD83C, 0xDFB8), 'guitar'],
                    [fromCharCode(0xD83D, 0xDC7E), 'space_invader'],
                    [fromCharCode(0xD83C, 0xDFAE), 'video_game'],
                    [fromCharCode(0xD83C, 0xDCCF), 'black_joker'],
                    [fromCharCode(0xD83C, 0xDFB4), 'flower_playing_cards'],
                    [fromCharCode(0xD83C, 0xDC04), 'mahjong'],
                    [fromCharCode(0xD83C, 0xDFB2), 'game_die'],
                    [fromCharCode(0xD83C, 0xDFAF), 'dart'],
                    [fromCharCode(0xD83C, 0xDFC8), 'football'],
                    [fromCharCode(0xD83C, 0xDFC0), 'basketball'],
                    [fromCharCode(0xD83C, 0xDFBE), 'tennis'],
                    [fromCharCode(0xD83C, 0xDFB1), '8ball'],
                    [fromCharCode(0xD83C, 0xDFB3), 'bowling'],
                    [fromCharCode(0xD83C, 0xDFC1), 'checkered_flag'],
                    [fromCharCode(0xD83C, 0xDFC6), 'trophy'],
                    [fromCharCode(0xD83C, 0xDFBF), 'ski'],
                    [fromCharCode(0xD83C, 0xDFC2), 'snowboarder'],
                    [fromCharCode(0xD83C, 0xDFCA), 'swimmer'],
                    [fromCharCode(0xD83C, 0xDFC4), 'surfer'],
                    [fromCharCode(0xD83C, 0xDFA3), 'fishing_pole_and_fish'],
                    [fromCharCode(0xD83C, 0xDF75), 'tea'],
                    [fromCharCode(0xD83C, 0xDF76), 'sake'],
                    [fromCharCode(0xD83C, 0xDF7A), 'beer'],
                    [fromCharCode(0xD83C, 0xDF7B), 'beers'],
                    [fromCharCode(0xD83C, 0xDF78), 'cocktail'],
                    [fromCharCode(0xD83C, 0xDF79), 'tropical_drink'],
                    [fromCharCode(0xD83C, 0xDF77), 'wine_glass'],
                    [fromCharCode(0xD83C, 0xDF74), 'fork_and_knife'],
                    [fromCharCode(0xD83C, 0xDF55), 'pizza'],
                    [fromCharCode(0xD83C, 0xDF54), 'hamburger'],
                    [fromCharCode(0xD83C, 0xDF5F), 'fries'],
                    [fromCharCode(0xD83C, 0xDF57), 'poultry_leg'],
                    [fromCharCode(0xD83C, 0xDF56), 'meat_on_bone'],
                    [fromCharCode(0xD83C, 0xDF5D), 'spaghetti'],
                    [fromCharCode(0xD83C, 0xDF5B), 'curry'],
                    [fromCharCode(0xD83C, 0xDF64), 'fried_shrimp'],
                    [fromCharCode(0xD83C, 0xDF71), 'bento'],
                    [fromCharCode(0xD83C, 0xDF63), 'sushi'],
                    [fromCharCode(0xD83C, 0xDF65), 'fish_cake'],
                    [fromCharCode(0xD83C, 0xDF59), 'rice_ball'],
                    [fromCharCode(0xD83C, 0xDF58), 'rice_cracker'],
                    [fromCharCode(0xD83C, 0xDF5A), 'rice'],
                    [fromCharCode(0xD83C, 0xDF5C), 'ramen'],
                    [fromCharCode(0xD83C, 0xDF72), 'stew'],
                    [fromCharCode(0xD83C, 0xDF62), 'oden'],
                    [fromCharCode(0xD83C, 0xDF61), 'dango'],
                    [fromCharCode(0xD83C, 0xDF73), 'egg'],
                    [fromCharCode(0xD83C, 0xDF5E), 'bread'],
                    [fromCharCode(0xD83C, 0xDF69), 'doughnut'],
                    [fromCharCode(0xD83C, 0xDF6E), 'custard'],
                    [fromCharCode(0xD83C, 0xDF66), 'icecream'],
                    [fromCharCode(0xD83C, 0xDF68), 'ice_cream'],
                    [fromCharCode(0xD83C, 0xDF67), 'shaved_ice'],
                    [fromCharCode(0xD83C, 0xDF82), 'birthday'],
                    [fromCharCode(0xD83C, 0xDF70), 'cake'],
                    [fromCharCode(0xD83C, 0xDF6A), 'cookie'],
                    [fromCharCode(0xD83C, 0xDF6B), 'chocolate_bar'],
                    [fromCharCode(0xD83C, 0xDF6C), 'candy'],
                    [fromCharCode(0xD83C, 0xDF6D), 'lollipop'],
                    [fromCharCode(0xD83C, 0xDF6F), 'honey_pot'],
                    [fromCharCode(0xD83C, 0xDF4E), 'apple'],
                    [fromCharCode(0xD83C, 0xDF4F), 'green_apple'],
                    [fromCharCode(0xD83C, 0xDF4A), 'tangerine'],
                    [fromCharCode(0xD83C, 0xDF52), 'cherries'],
                    [fromCharCode(0xD83C, 0xDF47), 'grapes'],
                    [fromCharCode(0xD83C, 0xDF49), 'watermelon'],
                    [fromCharCode(0xD83C, 0xDF53), 'strawberry'],
                    [fromCharCode(0xD83C, 0xDF51), 'peach'],
                    [fromCharCode(0xD83C, 0xDF48), 'melon'],
                    [fromCharCode(0xD83C, 0xDF4C), 'banana'],
                    [fromCharCode(0xD83C, 0xDF4D), 'pineapple'],
                    [fromCharCode(0xD83C, 0xDF60), 'sweet_potato'],
                    [fromCharCode(0xD83C, 0xDF46), 'eggplant'],
                    [fromCharCode(0xD83C, 0xDF45), 'tomato'],
                    [fromCharCode(0xD83C, 0xDF3D), 'corn']
                ],
                Places : [
                    [fromCharCode(0xD83C, 0xDFE0), 'house'],
                    [fromCharCode(0xD83C, 0xDFE1), 'house_with_garden'],
                    [fromCharCode(0xD83C, 0xDFEB), 'school'],
                    [fromCharCode(0xD83C, 0xDFE2), 'office'],
                    [fromCharCode(0xD83C, 0xDFE3), 'post_office'],
                    [fromCharCode(0xD83C, 0xDFE5), 'hospital'],
                    [fromCharCode(0xD83C, 0xDFE6), 'bank'],
                    [fromCharCode(0xD83C, 0xDFEA), 'convenience_store'],
                    [fromCharCode(0xD83C, 0xDFE9), 'love_hotel'],
                    [fromCharCode(0xD83C, 0xDFE8), 'hotel'],
                    [fromCharCode(0xD83D, 0xDC92), 'wedding'],
                    [fromCharCode(0xD83C, 0xDFEC), 'department_store'],
                    [fromCharCode(0xD83C, 0xDF07), 'city_sunrise'],
                    [fromCharCode(0xD83C, 0xDF06), 'city_sunset'],
                    [fromCharCode(0xD83C, 0xDFEF), 'japanese_castle'],
                    [fromCharCode(0xD83C, 0xDFF0), 'european_castle'],
                    [fromCharCode(0xD83C, 0xDFED), 'factory'],
                    [fromCharCode(0xD83D, 0xDDFC), 'tokyo_tower'],
                    [fromCharCode(0xD83D, 0xDDFE), 'japan'],
                    [fromCharCode(0xD83D, 0xDDFB), 'mount_fuji'],
                    [fromCharCode(0xD83C, 0xDF04), 'sunrise_over_mountains'],
                    [fromCharCode(0xD83C, 0xDF05), 'sunrise'],
                    [fromCharCode(0xD83C, 0xDF03), 'night_with_stars'],
                    [fromCharCode(0xD83D, 0xDDFD), 'statue_of_liberty'],
                    [fromCharCode(0xD83C, 0xDF09), 'bridge_at_night'],
                    [fromCharCode(0xD83C, 0xDFA0), 'carousel_horse'],
                    [fromCharCode(0xD83C, 0xDFA1), 'ferris_wheel'],
                    [fromCharCode(0xD83C, 0xDFA2), 'roller_coaster'],
                    [fromCharCode(0xD83D, 0xDEA2), 'ship'],
                    [fromCharCode(0xD83D, 0xDEA4), 'speedboat'],
                    [fromCharCode(0xD83D, 0xDE80), 'rocket'],
                    [fromCharCode(0xD83D, 0xDCBA), 'seat'],
                    [fromCharCode(0xD83D, 0xDE89), 'station'],
                    [fromCharCode(0xD83D, 0xDE84), 'bullettrain_side'],
                    [fromCharCode(0xD83D, 0xDE85), 'bullettrain_front'],
                    [fromCharCode(0xD83D, 0xDE87), 'metro'],
                    [fromCharCode(0xD83D, 0xDE83), 'railway_car'],
                    [fromCharCode(0xD83D, 0xDE8C), 'bus'],
                    [fromCharCode(0xD83D, 0xDE99), 'blue_car'],
                    [fromCharCode(0xD83D, 0xDE97), 'car'],
                    [fromCharCode(0xD83D, 0xDE95), 'taxi'],
                    [fromCharCode(0xD83D, 0xDE9A), 'truck'],
                    [fromCharCode(0xD83D, 0xDEA8), 'rotating_light'],
                    [fromCharCode(0xD83D, 0xDE93), 'police_car'],
                    [fromCharCode(0xD83D, 0xDE92), 'fire_engine'],
                    [fromCharCode(0xD83D, 0xDE91), 'ambulance'],
                    [fromCharCode(0xD83D, 0xDEB2), 'bike'],
                    [fromCharCode(0xD83D, 0xDC88), 'barber'],
                    [fromCharCode(0xD83D, 0xDE8F), 'busstop'],
                    [fromCharCode(0xD83C, 0xDFAB), 'ticket'],
                    [fromCharCode(0xD83D, 0xDEA5), 'traffic_light'],
                    [fromCharCode(0xD83D, 0xDEA7), 'construction'],
                    [fromCharCode(0xD83D, 0xDD30), 'beginner'],
                    [fromCharCode(0xD83C, 0xDFEE), 'izakaya_lantern'],
                    [fromCharCode(0xD83C, 0xDFB0), 'slot_machine'],
                    [fromCharCode(0xD83D, 0xDDFF), 'moyai'],
                    [fromCharCode(0xD83C, 0xDFAA), 'circus_tent'],
                    [fromCharCode(0xD83C, 0xDFAD), 'performing_arts'],
                    [fromCharCode(0xD83D, 0xDCCD), 'round_pushpin'],
                    [fromCharCode(0xD83D, 0xDEA9), 'triangular_flag_on_post']
                ],
                Symbols : [
                    [fromCharCode(0xD83D, 0xDD1F), 'keycap_ten'],
                    [fromCharCode(0xD83D, 0xDD22), '1234'],
                    [fromCharCode(0xD83D, 0xDD23), 'symbols'],
                    [fromCharCode(0xD83D, 0xDD20), 'capital_abcd'],
                    [fromCharCode(0xD83D, 0xDD21), 'abcd'],
                    [fromCharCode(0xD83D, 0xDD24), 'abc'],
                    [fromCharCode(0xD83D, 0xDD3C), 'arrow_up_small'],
                    [fromCharCode(0xD83D, 0xDD3D), 'arrow_down_small'],
                    [fromCharCode(0xD83C, 0xDD97), 'ok'],
                    [fromCharCode(0xD83C, 0xDD95), 'new'],
                    [fromCharCode(0xD83C, 0xDD99), 'up'],
                    [fromCharCode(0xD83C, 0xDD92), 'cool'],
                    [fromCharCode(0xD83C, 0xDD93), 'free'],
                    [fromCharCode(0xD83C, 0xDD96), 'ng'],
                    [fromCharCode(0xD83D, 0xDCF6), 'signal_strength'],
                    [fromCharCode(0xD83C, 0xDFA6), 'cinema'],
                    [fromCharCode(0xD83C, 0xDE01), 'koko'],
                    [fromCharCode(0xD83C, 0xDE2F), 'u6307'],
                    [fromCharCode(0xD83C, 0xDE33), 'u7a7a'],
                    [fromCharCode(0xD83C, 0xDE35), 'u6e80'],
                    [fromCharCode(0xD83C, 0xDE34), 'u5408'],
                    [fromCharCode(0xD83C, 0xDE32), 'u7981'],
                    [fromCharCode(0xD83C, 0xDE50), 'ideograph_advantage'],
                    [fromCharCode(0xD83C, 0xDE39), 'u5272'],
                    [fromCharCode(0xD83C, 0xDE3A), 'u55b6'],
                    [fromCharCode(0xD83C, 0xDE36), 'u6709'],
                    [fromCharCode(0xD83C, 0xDE1A), 'u7121'],
                    [fromCharCode(0xD83D, 0xDEBB), 'restroom'],
                    [fromCharCode(0xD83D, 0xDEB9), 'mens'],
                    [fromCharCode(0xD83D, 0xDEBA), 'womens'],
                    [fromCharCode(0xD83D, 0xDEBC), 'baby_symbol'],
                    [fromCharCode(0xD83D, 0xDEBE), 'wc'],
                    [fromCharCode(0xD83D, 0xDEAD), 'no_smoking'],
                    [fromCharCode(0xD83C, 0xDE38), 'u7533'],
                    [fromCharCode(0xD83C, 0xDE51), 'accept'],
                    [fromCharCode(0xD83C, 0xDD91), 'cl'],
                    [fromCharCode(0xD83C, 0xDD98), 'sos'],
                    [fromCharCode(0xD83C, 0xDD94), 'id'],
                    [fromCharCode(0xD83D, 0xDEAB), 'no_entry_sign'],
                    [fromCharCode(0xD83D, 0xDD1E), 'underage'],
                    [fromCharCode(0xD83D, 0xDC9F), 'heart_decoration'],
                    [fromCharCode(0xD83C, 0xDD9A), 'vs'],
                    [fromCharCode(0xD83D, 0xDCF3), 'vibration_mode'],
                    [fromCharCode(0xD83D, 0xDCF4), 'mobile_phone_off'],
                    [fromCharCode(0xD83C, 0xDD8E), 'ab'],
                    [fromCharCode(0xD83D, 0xDCA0), 'diamond_shape_with_a_dot_inside'],
                    [fromCharCode(0xD83D, 0xDD2F), 'six_pointed_star'],
                    [fromCharCode(0xD83C, 0xDFE7), 'atm'],
                    [fromCharCode(0xD83D, 0xDCB9), 'chart'],
                    [fromCharCode(0xD83D, 0xDCB2), 'heavy_dollar_sign'],
                    [fromCharCode(0xD83D, 0xDCB1), 'currency_exchange'],
                    [fromCharCode(0xD83D, 0xDD1D), 'back'],
                    [fromCharCode(0xD83D, 0xDD1A), 'on'],
                    [fromCharCode(0xD83D, 0xDD19), 'soon'],
                    [fromCharCode(0xD83D, 0xDD1B), 'arrows_clockwise'],
                    [fromCharCode(0xD83D, 0xDD1C), 'clock12'],
                    [fromCharCode(0xD83D, 0xDD03), 'clock1'],
                    [fromCharCode(0xD83D, 0xDD5B), 'clock2'],
                    [fromCharCode(0xD83D, 0xDD50), 'clock3'],
                    [fromCharCode(0xD83D, 0xDD51), 'clock4'],
                    [fromCharCode(0xD83D, 0xDD52), 'clock5'],
                    [fromCharCode(0xD83D, 0xDD53), 'clock6'],
                    [fromCharCode(0xD83D, 0xDD54), 'clock7'],
                    [fromCharCode(0xD83D, 0xDD55), 'clock8'],
                    [fromCharCode(0xD83D, 0xDD56), 'clock9'],
                    [fromCharCode(0xD83D, 0xDD57), 'clock10'],
                    [fromCharCode(0xD83D, 0xDD58), 'clock11'],
                    [fromCharCode(0xD83D, 0xDD59), 'heavy_plus_sign'],
                    [fromCharCode(0xD83D, 0xDD5A), 'heavy_minus_sign'],
                    [fromCharCode(0xD83D, 0xDCAE), 'radio_button'],
                    [fromCharCode(0xD83D, 0xDCAF), 'link'],
                    [fromCharCode(0xD83D, 0xDD18), 'curly_loop'],
                    [fromCharCode(0xD83D, 0xDD17), 'trident'],
                    [fromCharCode(0xD83D, 0xDD31), 'black_square_button'],
                    [fromCharCode(0xD83D, 0xDD3A), 'white_square_button'],
                    [fromCharCode(0xD83D, 0xDD32), 'red_circle'],
                    [fromCharCode(0xD83D, 0xDD33), 'large_blue_circle'],
                    [fromCharCode(0xD83D, 0xDD34), 'small_red_triangle_down'],
                    [fromCharCode(0xD83D, 0xDD35), 'white_large_square'],
                    [fromCharCode(0xD83D, 0xDD3B), 'black_large_square'],
                    [fromCharCode(0xD83D, 0xDD36), 'small_orange_diamond'],
                    [fromCharCode(0xD83D, 0xDD37), 'small_blue_diamond']   
                ]
            },

            _emojiGroup = (function() {

                var emojiGroup = {};
                $.each(groups, function(key, value) {

                    emojiGroup[key] = {};
                    
                    $.each(value, function(index, value) {

                        var title = value[1],
                            code = value[0];
                        
                        emojiGroup[key][title] = {
                            value: code,
                            title: title
                        };
                    }); 
                });
                return emojiGroup;
                
            })(),

            _emojiMap = (function(){
                var _emojiMap = {};
                for (var group in _emojiGroup) {
                    for (key in _emojiGroup[group]) {
                        _emojiMap[_emojiGroup[group][key].value] = _emojiGroup[group][key];
                    }
                }
                return _emojiMap;
            }());

        this.getEmojiCode = function(group, title) {
            return _emojiGroup[group][title];
        };

        this.getEmojiGroup = function(group, filter) {
            var dictionary = _emojiGroup[group];
            if (filter && typeof filter === 'function') {
                for (var key in dictionary) {
                    if (filter(key) == true) {
                        var value = _emojiGroup[group][key].value;
                        delete _emojiMap[value];
                        delete dictionary[key];
                    }
                }
            }
            return dictionary;
        };

        this.isEmoji = function(content) {
            if (!content || content.length > 3) {
                return false;
            }

            var emoji = _emojiMap[content];
            var isEmoji = emoji ? true : false;
            return isEmoji;
        };
    }

    Service.$emoji = new PPEmoji();
    
})(Service));

Service.$encryption = ( function() {

    /////// API /////////
    
    return {
        hex_sha1: hex_sha1
    }

    /// Implenmentation ///

    function hex_sha1( s ) {

        var hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */
        
        /*
         * Convert a raw string to a hex string
         */
        function rstr2hex(input)
        {
            var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
            var output = "";
            var x;
            for(var i = 0; i < input.length; i++)
            {
                x = input.charCodeAt(i);
                output += hex_tab.charAt((x >>> 4) & 0x0F)
                    +  hex_tab.charAt( x        & 0x0F);
            }
            return output;
        }
        
        /*
         * Convert an array of big-endian words to a string
         */
        function binb2rstr(input)
        {
            var output = "";
            for(var i = 0; i < input.length * 32; i += 8)
                output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);
            return output;
        }

        /*
         * Calculate the SHA-1 of an array of big-endian words, and a bit length
         */
        function binb_sha1(x, len)
        {
            /* append padding */
            x[len >> 5] |= 0x80 << (24 - len % 32);
            x[((len + 64 >> 9) << 4) + 15] = len;

            var w = Array(80);
            var a =  1732584193;
            var b = -271733879;
            var c = -1732584194;
            var d =  271733878;
            var e = -1009589776;

            for(var i = 0; i < x.length; i += 16)
            {
                var olda = a;
                var oldb = b;
                var oldc = c;
                var oldd = d;
                var olde = e;

                for(var j = 0; j < 80; j++)
                {
                    if(j < 16) w[j] = x[i + j];
                    else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
                    var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
                                     safe_add(safe_add(e, w[j]), sha1_kt(j)));
                    e = d;
                    d = c;
                    c = bit_rol(b, 30);
                    b = a;
                    a = t;
                }

                a = safe_add(a, olda);
                b = safe_add(b, oldb);
                c = safe_add(c, oldc);
                d = safe_add(d, oldd);
                e = safe_add(e, olde);
            }
            return Array(a, b, c, d, e);

        }

        /*
         * Convert a raw string to an array of big-endian words
         * Characters >255 have their high-byte silently ignored.
         */
        function rstr2binb(input)
        {
            var output = Array(input.length >> 2);
            for(var i = 0; i < output.length; i++)
                output[i] = 0;
            for(var i = 0; i < input.length * 8; i += 8)
                output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
            return output;
        }

        /*
         * Determine the appropriate additive constant for the current iteration
         */
        function sha1_kt(t)
        {
            return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
                (t < 60) ? -1894007588 : -899497514;
        }

        /*
         * Bitwise rotate a 32-bit number to the left.
         */
        function bit_rol(num, cnt)
        {
            return (num << cnt) | (num >>> (32 - cnt));
        }

        /*
         * Perform the appropriate triplet combination function for the current
         * iteration
         */
        function sha1_ft(t, b, c, d)
        {
            if(t < 20) return (b & c) | ((~b) & d);
            if(t < 40) return b ^ c ^ d;
            if(t < 60) return (b & c) | (b & d) | (c & d);
            return b ^ c ^ d;
        }

        /*
         * Calculate the SHA1 of a raw string
         */
        function rstr_sha1(s)
        {
            return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));
        }

        /*
         * Add integers, wrapping at 2^32. This uses 16-bit operations internally
         * to work around bugs in some JS interpreters.
         */
        function safe_add(x, y)
        {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF);
            var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        }

        /*
         * Encode a string as utf-8.
         * For efficiency, this assumes the input is valid utf-16.
         */
        function str2rstr_utf8(input)
        {
            var output = "";
            var i = -1;
            var x, y;

            while(++i < input.length)
            {
                /* Decode utf-16 surrogate pairs */
                x = input.charCodeAt(i);
                y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
                if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
                {
                    x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
                    i++;
                }

                /* Encode output as utf-8 */
                if(x <= 0x7F)
                    output += String.fromCharCode(x);
                else if(x <= 0x7FF)
                    output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                                  0x80 | ( x         & 0x3F));
                else if(x <= 0xFFFF)
                    output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                                  0x80 | ((x >>> 6 ) & 0x3F),
                                                  0x80 | ( x         & 0x3F));
                else if(x <= 0x1FFFFF)
                    output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                                  0x80 | ((x >>> 12) & 0x3F),
                                                  0x80 | ((x >>> 6 ) & 0x3F),
                                                  0x80 | ( x         & 0x3F));
            }
            return output;
        }

        return rstr2hex(rstr_sha1(str2rstr_utf8(s)));
    }
    
} )();


/**
 *
 * var $uploader = Service.$uploader;
 * 
 * // Upload
 * var uploadId = $uploader.upload({
 *     type: 'file'/'txt',
 *     content: file / 'large text'
 * }).progress(function(percentage) {
 *     // 0 ~ 100
 * }).done(function(response){
 *     // response.fuuid
 * }).fail(function(errorCode){
 *     switch (errorCode) {
 *         // ...
 *     }
 * }).query().uploadId;
 *
 * // Cancel
 * $uploader.cancel(uploadId);
 *
 * // Clear all uploading tasks
 * $uploader.clear();
 *
 */
((function(Service) {

    var Uploader = function() {

        var FILE_UPLOAD_ID_PREFIX = 'file-upload-',
            
            fileUploadPools = {},

            ERROR_CODE = Uploader.ERROR_CODE,

            // Create the XHR object.
            createCORSRequest = function (method, url) {

                var xhr = new XMLHttpRequest();
                if ("withCredentials" in xhr) {
                    // XHR for Chrome/Firefox/Opera/Safari.
                    xhr.open(method, url, true);
                } else if (typeof XDomainRequest != "undefined") {
                    // XDomainRequest for IE.
                    xhr = new XDomainRequest();
                    xhr.open(method, url);
                } else {
                    // CORS not supported.
                    xhr = null;
                }
                return xhr;
            },

            UploadTask = function(settings) {

                var self = this,
                    $json = Service.$json,
                    
                    url = null,
                    type = settings.type, // 'file' / 'txt'
                    uploadId = FILE_UPLOAD_ID_PREFIX + Service.$tools.getUUID(), // file upload id

                    doneCallback = null, // done callback
                    failCallback = null,
                    progressCallback = null,

                    status = {
                        uploadId: uploadId,
                        state: 'RUNNING',
                        progress: 0
                    },

                    fixResponse = function (response) { // Fix response , so let file and txt return the same result

                        var fuuid = null;
                        
                        switch (type) {
                        case 'file':
                            fuuid = $json.parse(response).fuuid;
                            break;

                        case 'txt':
                            fuuid = $json.parse(response).fid;
                            break;
                        }

                        return { fuuid: fuuid };
                    };

                // Store task to task pool
                fileUploadPools[uploadId] = this;

                // choose url
                switch (type) {
                case 'file':
                    url = Configuration.file_upload_url;
                    break;

                case 'txt':
                    url = Configuration.file_upload_txt_url;
                    break;
                }

                var xhr = createCORSRequest("post", url); // create a xhr 

                // A function that is called periodically with information about the progress of the request.
                // NOTE: 'txt' can not add call this method, or it will not working !!!
                if (type == 'file') {
                    xhr.upload.onprogress = function (e) {
                        
                        if (e.lengthComputable) {
                            var percentage = Math.round((e.loaded * 100) / e.total);
                            
                            if (status.state == 'RUNNING') {
                                status.progress = percentage;

                                // progress callback
                                if (progressCallback) progressCallback(percentage);
                            }
                        }
                    };   
                }

                // The function to call when a request encounters an error.
                xhr.onerror = function (e) {
                    if (failCallback) failCallback(ERROR_CODE.SERVICE_NOT_AVALIABLE);
                };

                // The function to call when a request is aborted.
                xhr.onabort = function (e) {
                    if (failCallback) failCallback(ERROR_CODE.CANCEL);
                };

                // The function to call when an HTTP request returns after successfully loading content.
                xhr.onload = function (e) {

                    // Change state to 'FINISH'
                    status.state = 'FINISH';
                    status.progress = 100;
                    
                    if (type == 'txt') $("#pp-composer-container-content-txt").val('');
                    if (doneCallback) doneCallback(fixResponse(xhr.responseText));
                };

                // Upload It !!!
                switch (type) {

                case 'file':
                    
                    // Build a form to send data
                    var formData = new FormData();
                    formData.append('file', settings.content);
                    formData.append('upload_type', 'file');
                    formData.append('subtype', 'FILE');
                    formData.append('user_uuid', Service.$user.getUser().getInfo().user_uuid);
                    xhr.send(formData);
                    break;

                case 'txt':
                    $("#pp-composer-container-content-txt").val(settings.content); 
                    var form = document.forms.namedItem("pp-composer-container-form");
                    var data = new FormData(form);
                    xhr.send(data);
                    
                    break;
                    
                }

                this.progress = function(callback) {
                    progressCallback = callback;
                    return this;
                };

                this.done = function(callback) {
                    doneCallback = callback;
                    return this;
                };

                this.fail = function(callback) {
                    failCallback = callback;
                    return this;
                };

                this.cancel = function() {
                    if (status.state == 'CANCEL') return;

                    status.state = 'CANCEL';
                    xhr.abort();
                };

                this.query = function() {
                    return status;
                };
            };

        this.upload = function(settings) {
            return new UploadTask(settings);
        };

        this.cancel = function(uploadId) {
            if (uploadId && fileUploadPools[uploadId]) {
                fileUploadPools[uploadId].cancel();
            }
        };

        this.clear = function() {
            var self = this;
            $.each(fileUploadPools, function(key, value) {
                self.cancel(key);
            });
        };
        
    };

    // Error Code
    Uploader.ERROR_CODE = {
        SERVICE_NOT_AVALIABLE: 0, // Service not avaliable (XMLHttpRequest encounter error)
        CANCEL: 1 // Upload cancel
    };

    Service.Uploader = Uploader;
    Service.$uploader = new Uploader();
    
})(Service));

Service.$language = ( function() {

    var _DEFAULT = 'en',
        _language = _DEFAULT;

    return {
        getLanguage: getLanguage,
        setLanguage: setLanguage
    }
    
    function getLanguage() {
        return _language;
    }

    function setLanguage( language ) {
        if (language) {
            language = language.toLowerCase();
        }
        switch(language) {
        case 'zh':
        case 'zh-cn':
        case 'zh-hk':
        case 'zh-tw':
        case 'zh-sg':
            _language = 'zh-CN';
            break;

        case 'en':
        case 'en-us':
            _language = 'en';
            break;

        default:
            _language = _DEFAULT;
            break;
        }
    }
    
} )();

((function(Service) {

    function PPTools() {

        var self = this,

            iconTools = {
                get: function(fid) {
                    var url = self.getFileDownloadUrl(fid);
                    return url || Service.Constants.ICON_DEFAULT_USER;
                }
            };

        this.scrollbarWidth = getScrollBarWidth();
        
        this.getUUID = function() {
            var d = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = (d + Math.random()*16)%16 | 0;
                d = Math.floor(d/16);
                return (c=='x' ? r : (r&0x7|0x8)).toString(16);
            });
            return uuid;
        };

        /*
         * is image
         *
         * @return is image
         */
        this.isImage = function(filePath) {
            var _isImage = false;
            if (filePath) {
                var dot = filePath.lastIndexOf('.');

                if (dot != -1 && dot != 0) {
                    //retrieve suffix
                    var suffix = filePath.substring(dot + 1);

                    // fix-bug: issue#4
                    if (suffix) {
                        suffix = suffix.toLowerCase();
                    }
                    
                    if (suffix == 'jpg' ||
                        suffix == 'jpeg' ||
                        suffix == 'png' ||
                        suffix == 'gif') {

                        _isImage = true;
                    }
                }
            }

            return _isImage;
        };

        // convert message to our inner message data structure
        this.messageAdapter = function(message) {
            return message;
        };

        /**
         * Get the message uploadId which messageType == 'FILE' || messageType == 'IMAGE'
         */
        this.getMessageUploadId = function(message) {
            var uploadId = '';
            switch(message.messageType) {
            case Service.PPMessage.TYPE.FILE:
                uploadId = message.message.file.fileUploadId;
                break;

            case Service.PPMessage.TYPE.IMAGE:
                uploadId = message.message.image.fileUploadId;
                break;
            }
            return uploadId;
        };

        /**
         * Check message send canceled or send errored.
         */
        this.isMessageSendError = function(message) {
            return message.messageState == Service.PPMessage.STATE.ERROR || message.messageState == 'CANCELED';
        };

        /**
         * Check message is uploading file
         */
        this.isUploading = function(message) {
            return message.messageState == Service.PPMessage.STATE.BEGIN_UPLOAD;
        };

        /*
         * Get file download url
         */
        this.getFileDownloadUrl = function(fid, fileName) {
            
            // fix bug
            // return http://192.168.0.216:8080/download/undefined
            if ( !fid ) return undefined;
            
            var isHttpLink = /(^https?:\/\/)|(^w{3})/.test(fid);
            var baseUrl =  isHttpLink ? fid : Configuration.file_download_url + fid;

            // Fix-bug : file url encoding error at http://www.qq.com/
            // @see http://redmine.ppmessage.cn/issues/232
            fileName && (baseUrl += "?file_name=" + Service.$gb2312utf8.GB2312ToUTF8( fileName ))
            return baseUrl;
        };

        /**
         * Is show emoji icon
         */
        this.isShowEmojiIcon = function() {
            return Service.$device.isMac();
        };

        /*
         * Get remote text file content
         */
        this.getRemoteTextFileContent = function(fid, callback, errorCallback) {
            var url = this.getFileDownloadUrl(fid);
            $.get(url, function(data) {
                if (callback) callback(data);
            }).fail(function() {
                if (errorCallback) errorCallback();
            });
        };

        //@param time: "yyyy-MM-dd HH:mm:ss SSSSS"
        this.getTimestamp = function(time) {
            //yyyy-MM-dd HH:mm:ss 为19
            if (time.length >= 19) {
                time = time.substring(0, 19);
            }
            var d = new Date(time.replace('-','/'));
            return d.getTime();
        };

        /**
         * 0 --> 00
         * 1 --> 01
         * 2 --> 02
         */
        this.padNumber = function(d) {
            return (d < 10) ? '0' + d.toString() : d.toString();
        };

        /**
         * formatTime
         *
         * Convert to timestamp in milliseconds to human-readable format
         *
         * @param timestampInMilliSeconds: messageTimestamp in milliseconds
         * @param config: for i18n
         * {
         *     year: 年,
         *     month: 月,
         *     day: "日",
         *     today: "今天",
         *     yesterday: "昨天",
         * }
         */
        this.formatTime = function(timestampInMilliSeconds, config) {
            var date = new Date(timestampInMilliSeconds);

            var year = date.getFullYear();
            var month = date.getMonth();
            var day = date.getUTCDate();
            var hour = date.getHours();
            var minute = date.getMinutes();

            var curDate = new Date();
            var curYear = curDate.getFullYear();
            var curMonth = curDate.getMonth();
            var curDay = curDate.getUTCDate();

            // console.log("now:", curDate, ", other:", date);

            var YEAR = config.year;
            var MONTH = config.month;
            var DAY = config.day;
            var TODAY = config.today;
            var YESTERDAY = config.yesterday;

            if (year == curYear && month == curMonth && day == curDay) {
                return TODAY + " " + self.padNumber(hour) + ":" + self.padNumber(minute);
            } else {                                    
                if (curDate.getTime() - date.getTime() <= 86400000) {
                    return YESTERDAY + " " + self.padNumber(hour) + ":" + self.padNumber(minute);
                }

                if (year < curYear) {
                    return year + YEAR + self.padNumber(month + 1) + MONTH + self.padNumber(day) + DAY + " " + self.padNumber(hour) + ":" + self.padNumber(minute);
                } else if (year == curYear) {
                    if (month <= curMonth) {
                        return self.padNumber(month + 1) + MONTH + self.padNumber(day) + DAY + " " + self.padNumber(hour) + ":" + self.padNumber(minute);
                    }
                }
            }
            
            return year + YEAR + self.padNumber(month + 1) + MONTH + self.padNumber(day) + DAY + " " + self.padNumber(hour) + ":" + self.padNumber(minute);
        };

        this.validateEmail = function(email) {
            var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
            return re.test(email);
        };

        this.validatePhoneNumber = function(phoneNumber) {
            var re = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
            return re.test( phoneNumber );
        };

        /**
         * '50px'-->'50'
         */
        this.cssNum = function(cssValue) {
            return parseFloat(cssValue);
        };

        // reverse array
        this.reverseArray = function(array) {
            if (!array || array.length === 0) return array;
            return array.reverse();
        };

        // ---------------
        // ICON TOOLS
        // ---------------
        this.icon = iconTools;

        this.isNull = function ( obj ) {
            return ( obj === null ) || ( obj === undefined );
        };

        // We consider `{error_code: 0, uri: "/XXX_XXX_XXX", error_string: "success."}` obj as empty response
        this.isApiResponseEmpty = function( response ) {
            if ( !response ) return true;
            if ( response.error_code !== 0 ) return false;

            var copy = $.extend( {}, response );
            delete copy[ 'error_code' ];
            delete copy[ 'error_string' ];
            delete copy[ 'uri' ];

            return $.isEmptyObject( copy );
        };

        // format string
        //
        // ```javascript
        // var formattedStr = Service.$tools.format( 'Hello, %s and %s.', 'Tom', 'Jenny' );
        // ```
        //
        // `formattedStr` will be 'Hello, Tom and Jenny'
        //
        this.format = function( str ) {
            var args = [].slice.call(arguments, 1),
                i = 0;

            return str.replace(/%s/g, function() {
                return args[i++];
            });
        };
        
    }

    function getScrollBarWidth () {
        var $outer = $('<div>').css({visibility: 'hidden', width: 100, overflow: 'scroll'}).appendTo('body'),
            widthWithScroll = $('<div>').css({width: '100%'}).appendTo($outer).outerWidth();
        $outer.remove();
        return 100 - widthWithScroll;
    };

    Service.PPTools = PPTools;
    
})(Service));

Service.$ppmatc = (function() {

    var _interval = 3000, // 3s
        _stop = true,
        _intervalID,
        _watchedArray,

        EVENT_ENT_USER = 'ent_user',
        EVENT_TRACK = 'track_event',
        EVENT_PP_SETTINGS = 'pp_settings',
        EVENT_UNKNOWN = 'UNKNOWN';
    
    return {
	    // start ppmatc service to 
	    // 1) watch window._ppmatc array
	    // 2) handle event by FIFO principle
	    start: start,
	    // stop ppmatic service to
	    // 1) stop watch window._ppmatc array
	    stop: stop,

        isStarted: isStarted
    }
    
    function start() {
        if (_stop == false ) {
            Service.$errorHint.warn( "Service.$ppmatc already started!" );
            return;
        }

        Service.$debug.d( "Service.$ppmatc start!" );
	    _stop = false;

        _watchedArray = ( window._ppmatc !== undefined && window._ppmatc ) || [];
        _intervalID = window.setInterval(_doJob, _interval);
    }
    
    function stop() {
        if (_intervalID) {
            window.clearInterval( _intervalID );
            _intervalID = undefined;
        }

	    _stop = true;
        Service.$debug.d( "Service.$ppmatc stop!" );
    }

    function isStarted() {
        return !_stop;
    }

    // internal impl
    function _doJob() {
        if (_watchedArray && _watchedArray.length > 0) {
            var e = _watchedArray.pop();
            _run( _type(e), e );
        }
    }

    function _type( event ) {
        if ( _isEntUserEvent( event ) ) {
            return EVENT_ENT_USER;
        } else if ( _isTrackEvent( event ) ) {
            return EVENT_TRACK;
        } else if ( _isPPSettingsEvent( event ) ) {
            return EVENT_PP_SETTINGS;
        } else {
            return EVENT_UNKNOWN;
        }
        
        function _isEntUserEvent( event ) {
            return event && 
                EVENT_ENT_USER in event && 
                event[ EVENT_ENT_USER ].ent_user_name &&
                event[ EVENT_ENT_USER ].ent_user_id &&
                event[ EVENT_ENT_USER ].ent_user_createtime;
        }

        function _isTrackEvent( event ) {
            return event && 
                EVENT_TRACK in event &&
                event[ EVENT_TRACK ].track_event_name &&
                event[ EVENT_TRACK ].track_event_data;
        }

        function _isPPSettingsEvent( event ) {
            return event && 
                EVENT_PP_SETTINGS in event &&
                event[ EVENT_PP_SETTINGS ].app_uuid;
        }
    }

    function _run( type, event ) {
        switch (type) {
            case EVENT_ENT_USER:
            break;

            case EVENT_TRACK:
            break;

            case EVENT_PP_SETTINGS:
            PP.boot( event[ EVENT_PP_SETTINGS ] );
            break;

            case EVENT_UNKNOWN:
            Service.$errorHint.warn( "[Service.$ppmatc] Unsupported event: ", event );
            break;
        }
    }
    
}());

/**
 * 加载PPCom的入口:
 *
 * 创建匿名用户、获取用户信息、更新device等
 *
 * new PP.PPStartUp().startUp(ppSettings, function() {
 *     console.log('StartUp successful!');
 * }, function(errorCode) {
 *     console.log('StartUp failed, errorCode: ' + errorCode);
 * });
 *
 */
((function(Service) {

    /**
     * @constructor
     */
    function PPStartUp($api, $device) {

        var ErrorHint = Service.ErrorHint,

            _createAnonymousUser = function(cookieId, succCB, failCB) {
                $api.createAnonymousUser({
                    app_uuid: Service.$ppSettings.getAppUuid(),
                    ppcom_trace_uuid: cookieId
                }, succCB, failCB);
            },

            /*
             * 如果 ppSettings.user_name 存在并且和服务器的 user_fullname 不同，那么会更新服务器的用户信息
             *
             * @param user: 根据 window.ppSettings 生成的本地的 user object
             * @param userNameFromServer: 匿名创建用户返回的默认user_fullname 或者 实名用户调用 getUserDetailInfo 返回的 user_fullname
             * @param succCB: success 回调
             * @param failCB: fail 回调
             */
            _updateUserInfo = function(userSettings, response, succCB, failCB) {
                if (userSettings.user_fullname || userSettings.user_avatar) {
                    var requestObj = {
                        app_uuid: Service.$ppSettings.getAppUuid(),
                        user_uuid: userSettings.user_uuid,
                        user_fullname: userSettings.user_fullname,
                        user_icon: userSettings.user_avatar,
                        user_email: userSettings.user_email
                    };
                    $api.updateUser(requestObj, succCB, failCB);
                } else {
                    Service.$ppSettings.updateUserSettings({
                        user_fullname: response.user_fullname,
                        user_avatar: response.user_avatar
                    });
                    if (succCB) succCB();
                }
            },

            _createDevice = function(userSettings, succCB, failCB) {
                $api.createDevice({
                    app_uuid: Service.$ppSettings.getAppUuid(),
                    user_uuid: userSettings.user_uuid,
                    device_ostype: Service.$device.getOSType(),
                    ppcom_trace_uuid: userSettings.ppcom_trace_uuid,
                    device_id: Service.$device.getDeviceId()
                }, function(result) {
                    
                    $api.updateDevice({
                        device_uuid: result.device_uuid,
                        device_ostype: Service.$device.getOSType()
                    });
                    Service.$ppSettings.updateUserSettings({
                        device_uuid: result.device_uuid
                    });

                    succCB(result);
                }, function(response) {

                    var DEVICE_EXISTED_ERROR_CODE = 25;
                    
                    //Create device failed.
                    if (response && response['error_code']) {
                        if (response['error_code'] == DEVICE_EXISTED_ERROR_CODE) {
                            Service.$ppSettings.updateUserSettings({
                                device_uuid : response.device_uuid
                            });
                            succCB(response);
                            return;
                        }
                    }
                    if (failCB) failCB(response);
                });
            },

            // The final callback
            //
            // 1. update local user info
            // 2. fetch the MUST REQUEST INITIAL DATA from server to show `PPMessage`
            // 3. create `WebSocket` so listen for new message arrived
            // 4. draw view
            // 5. callback
            _getDefaultCreateDeviceSuccessCallback = function(userSettings, succCallback, errorCallback) {
                return function() {

                    // Store web_site user
                    Service.$user.setUser(userSettings);

                    // create dom
                    View.Style.init();
                    $(document.body).append(new View.PPContainer().getElement());

                    // start message receiver service
                    Service.$messageReceiverModule.start({
                        user_uuid: userSettings.user_uuid,
                        device_uuid: userSettings.device_uuid,
                        app_uuid: Service.$ppSettings.getAppUuid()
                    });

                    setTimeout(function() {
                        if (succCallback) succCallback();
                    });
                    
                }
            },

            _startUpAnonymousUser = function(userSettings, succCallback, errorCallback) {

                // 1. create anonymous user
                // 2. update user info
                // 3. create device
                // 4. update device
                // 5. create dom
                var cookieId = userSettings.ppcom_trace_uuid;
                
                _createAnonymousUser(cookieId, function(response) {
                    Service.$ppSettings.updateUserSettings({
                        user_uuid : response.user_uuid
                    });
                    _updateUserInfo(userSettings, {user_fullname:response.user_fullname, user_avatar: null}, null, null);
                    _createDevice(userSettings, _getDefaultCreateDeviceSuccessCallback(userSettings, succCallback, errorCallback), null);
                }, errorCallback);
            },

            _startUpNoneAnonymousUser = function(userSettings, succCallback, errorCallback) {

                // Validate Email
                if (!Service.$tools.validateEmail(userSettings.user_email)) {
                    if (errorCallback) errorCallback(Service.ErrorHint.ERROR_ILLEGAL_USER_EMAIL_STYLE);
                    return;
                }

                // 1. get user uuid
                // 2. get user detail info
                // 3. update user info
                // 4. create device
                // 5. update device
                // 6. create dom
                $api.getUserUuid({
                    app_uuid: Service.$ppSettings.getAppUuid(),
                    user_icon: userSettings.user_avatar,
                    user_email: userSettings.user_email,
                    user_fullname: userSettings.user_fullname
                }, function(response) {
                    $api.getUserDetailInfo({
                        uuid: response.user_uuid,
                        type: 'DU'
                    }, function(response) {
                        Service.$ppSettings.updateUserSettings({
                            user_uuid : response.uuid
                        });
                        _updateUserInfo(userSettings, {user_fullname: response.fullname, user_avatar: response.icon}, null, null);
                        _createDevice(userSettings, _getDefaultCreateDeviceSuccessCallback(userSettings, succCallback, errorCallback), null);
                    }, function(error) {
                    });
                }, function() {
                    if (errorCallback) errorCallback(Service.ErrorHint.ERROR_ILLEGAL_USER_EMAIL);
                });
            };

        //-------------------------------
        //API
        //-------------------------------

        this.startUp = function(ppSettings, succCallback, errorCallback) {

            // check browser version
            if (Service.$device.isIE9OrLowerVersionBrowser()) {
                if (errorCallback) errorCallback(ErrorHint.ERROR_IE9_OR_LOWER_BROWSER);
                return;
            }
            
            //Make a copy
            var s = {};
            $.extend(true, s, ppSettings);

            //Use ppSettings init $ppSettings service
            Service.$ppSettings.init(s);
            //init view settings
            View.$settings.init(s);
            
            if (Service.$ppSettings.getAppUuid()) {

                // Use app_key and app_secret to init $api service
                Service.$api.init(Service.$ppSettings.getAppUuid(), Service.$ppSettings.getApiKey(), Service.$ppSettings.getApiSecret());
                
                //set language
                Service.$language.setLanguage(Service.$ppSettings.getLanguage());

                // 0. zero step
                Service.$api.getPPComToken(function(response) {
                    // 1. first step
                    Service.$api.getAppInfo({
                        app_uuid: Service.$ppSettings.getAppUuid(),
                    }, function(response) {
                        // Cache app info to root cache
                        Service.$app.set(response);
                        
                        var userSettings = Service.$ppSettings.getUserSettings();
                        //anonymous user
                        if (userSettings.is_anonymous) {
                            _startUpAnonymousUser(userSettings, succCallback, errorCallback);
                        } else {
                            _startUpNoneAnonymousUser(userSettings, succCallback, errorCallback);
                        }
                        
                    }, function(error) {
                        if (errorCallback) errorCallback(ErrorHint.ERROR_SERVICE_NOT_AVALIABLE);
                    });
                    
                }, function(error) {
                    if (errorCallback) errorCallback(ErrorHint.ERROR_SERVICE_NOT_AVALIABLE);
                });
            } else {
                if (errorCallback) errorCallback(ErrorHint.ERROR_ILLEGAL_APPUUID);
            }
        };
    }

    PPStartUp.bootServices = function(reboot) {
        Service.bootMe(reboot);
        View.bootMe(reboot);
    };

    Service.PPStartUp = PPStartUp;
})(Service));

((function(Service) {

    function PublicAPI() {
        this._booted = false;
        this._onShowEvent = null;
        this._onHideEvent = null;
    }

    /**
     * Clear all datas
     *
     */
    PublicAPI.prototype._clearData = function() {
        Service.$uploader.clear();
        Service.$notification.reset();
        Ctrl.$conversationPanel.stopPollingWaitingQueueLength();
    };

    /**
     * @param ppSettings
     * @param callback: 
     *     success: function(true)
     *     fail: function(false, errorCode);
     */
    PublicAPI.prototype.boot = function(ppSettings, callback) {
        if (!Service.$ppmatc.isStarted()) Service.$ppmatc.start(); // run globally as quickly as possible

        if (!ppSettings || this._booted) {
            return;
        }

        this._booted = true;
        var that = this;

        Service.$startUp.startUp(ppSettings, function() {
            that._booted = true;
            if ($.isFunction(callback)) callback(true);
        }, function(errorCode) {
            that._booted = false;
            that._clearData();
            Service.$errorHint.warn(errorCode);
            if ($.isFunction(callback)) callback(false, errorCode);
        });
    };

    PublicAPI.prototype.show = function() {
        if (!this._booted) {
            return;
        }

        var launcherCtrl = Ctrl.$launcher.get();
        if (launcherCtrl) {
            launcherCtrl.showMessageBox();
            if (this._onShowEvent && typeof this._onShowEvent === 'function') {
                this._onShowEvent();
            }
        }
    };

    PublicAPI.prototype.hide = function() {
        if (!this._booted) {
            return;
        }
        
        var sheetHeaderCtrl = Ctrl.$sheetheader;
        if (sheetHeaderCtrl) {
            sheetHeaderCtrl.minimize();

            if (this._onHideEvent && typeof this._onHideEvent === 'function') {
                this._onHideEvent();
            }
        }
    };

    PublicAPI.prototype.isOpen = function() {
        return this._booted && Ctrl.$conversationPanel.isOpen();
    };

    PublicAPI.prototype.onShow = function(event) {
        this._onShowEvent = event;
    };

    PublicAPI.prototype.onHide = function(event) {
        this._onHideEvent = event;
    };

    PublicAPI.prototype.shutdown = function() {
        if (!this._booted) {
            return;
        }
        $('#pp-container').remove();
        this._booted = false;
        this._clearData();
    };

    PublicAPI.prototype.update = function(ppSettings) {
        if (!this._booted) {
            return false;
        }
        
        var s = ppSettings;
        var api = Service.$api;
        var user = Service.$user.getUser();
        
        if (s && user
            && s.app_uuid == api.getAppUuid()
            && s.user_email == user.getInfo().user_email) {
            return false;
        }

        return true;
    };

    Service.PublicAPI = PublicAPI;
    
})(Service));

((function(Service) {

    function BaseStorage() {
    }
    BaseStorage.reposity = {};

    /**
     * 静态方法
     */
    BaseStorage.clear = function() {
        BaseStorage.reposity = {};        
    };

    BaseStorage.prototype.get = function(key) {
        return BaseStorage.reposity[key];
    };

    BaseStorage.prototype.set = function(key, value) {
        BaseStorage.reposity[key] = value;
    };

    BaseStorage.prototype.remove = function(key) {
        delete BaseStorage.reposity[key];
    };

    Service.BaseStorage = BaseStorage;
    
})(Service));

((function(Service) {

    var json = (function() {

        var jQuery = $;

        // Takes a well-formed JSON string and returns the resulting JavaScript value
        function parse(json) {
            return jQuery.parseJSON(json);
        }

        // converts a JavaScript value to JSON string
        function stringify(javaScript) {
            return JSON.stringify(javaScript);
        }

        return {
            parse: parse,
            stringify: stringify
        }
        
    })();
    
    Service.$json = json;
    
})(Service));

((function(fn) {

    function assert(condition, message) {
        if (!condition) {
            message = message || "Assertion failed";
            if (typeof Error !== "undefined") {
                throw new Error(message);
            }
            throw message; // Fallback
        }
    }

    fn.assert = assert;
    
})(fn));

/**
 *
 * Service.$schedule.schedule(function() {
 *     // something you want do immediately
 * }, eventId ) // event Id
 * .after(function() {
 *     // something you want do after `3 * 1000` time
 * }, 3 * 1000 )
 * .onCancel(function() {
 *     // something you want do when you cancle this task
 * })
 * .start(); // DON'T forget to call `start` method to let it run
 *
 * Service.$schedule.cancelAll(); // cancel all schedule tasks
 *
 */
Service.$schedule = (function() {

    var DEFAULT_DELAY = 2 * 1000 , // 2 seconds
        DEFAULT_ONCE_DELAY = 2 * 1000, // 2 seconds

        scheduleArrays = [],

        onceEventArrays = [];

    return {
        
        schedule : function ( event, id ) {
            return new Schedule ( event, id );
        },

        cancelAll : function () {
            $.each ( scheduleArrays , function ( index, item ) {

                if ( !item.finished() ) {
                    item.cancel();
                }
                
            });
        },

        cancel : function ( id ) {
            
            var i = $.inArray ( id, scheduleArrays );
            
            if ( i !== -1 ) {
                id && $clearTimeout( scheduleArrays [ id ].timer );
                scheduleArrays [ id ] = undefined;
            }
            
        },

        once: function ( e, id, waitTime ) {
            Once ( e, id, waitTime );
        }
        
    }

    //////////////////////////
    
    function Schedule ( e, id ) {

        var event = e,
            eventId = id,
            afterEvent,
            cancelEvent,
            delay,
            cancel = false,
            finished = false;

        this.after = function ( e, d ) {
            afterEvent = e;
            delay = d || DEFAULT_DELAY;
            return this;
        };

        this.onCancel = function ( event ) {
            cancelEvent = event;
            return this;
        };

        this.cancel = function () {
            cancel = true;

            // Trigger cancel event
            if ( cancelEvent !== undefined ) {
                cancelEvent();
            }
        };

        this.finished = function () {
            return finished;
        }

        this.start = function () {

            if ( scheduleArrays [ eventId ] !== undefined ) {
                $clearTimeout( scheduleArrays [ eventId ].timer );
            }
            
            if ( $.isFunction ( event ) ) {
                event(); // do it
            }

            var timer = $.isFunction ( afterEvent ) &&

                $timeout ( function () {

                    // run after event
                    !cancel && afterEvent();

                    // we are finished
                    finished = true;
                    
                    scheduleArrays [ eventId ] = undefined;
                    
                }, delay );

            scheduleArrays [ eventId ] = {
                task: this,
                timer: timer
            };
            
        };
        
    }

    /////////////////////////
    function Once ( e, id, waitTime ) {

        var event = e,
            taskId = id,
            delay = waitTime || DEFAULT_ONCE_DELAY;

        if ( !$.isFunction ( e ) || !taskId ||
             // task exist
             onceEventArrays[ taskId ] !== undefined ) return;

        onceEventArrays[ taskId ] = {
            event: e
        },

        // trigger event
        e();

        $timeout( function () {

            // remove this event
            onceEventArrays[ taskId ] = undefined;
            
        }, delay );
    }
    
})();

Service.$task = ( function() {

    var todoList = [],
        repeatList = [],
        DEFAULT_TIME = 1000;

    return {
        plan: plan,
        cancel: cancel,

        repeat: repeat,
        cancelRepeat: cancelRepeat
    }

    function plan( id, event, time ) {
        todoList [ id ] = $timeout( event, time || DEFAULT_TIME );
    }

    function cancel( id ) {
        if ( todoList [ id ] ) {
            $clearTimeout( todoList [ id ].timer );
            todoList [ id ] = undefined;
        }
    }

    function repeat( id, event, time ) {
        repeatList [ id ] = setInterval( event, time || DEFAULT_TIME );
    }

    function cancelRepeat( id ) {
        if ( repeatList [ id ] ) {
            clearInterval( repeatList [ id ] );
            repeatList [ id ] = undefined;
        }
    }
    
} )();

Service.KEYS = {
    APP_INFO: 'app_info'
};

Service.$monitor = ( function() {

    var Monitor = 'Monitor' + '/',
        Event = {
            show: Monitor + 'S',
            hide: Monitor + 'H',
            resume: Monitor + 'R',
            watch: Monitor + 'W',
            unwatch: Monitor + 'UW',
            typing: Monitor + 'T'
        };

    return {
        Event: Event,
        
        report: report,
        watch: watch
    }

    function report( event, data ) {
        Service.$pubsub.publish( event, data );
    }

    function watch( event, func ) {
        Service.$pubsub.subscribe( event, func );
    }

} )();

// DON'T write like this in other files
var __Monitor = Service.$monitor;
var __MonitorEvent = __Monitor.Event;

// Copy and modifed from https://gist.github.com/fwolf/b2433ecd482c561cb3bd
( function() {

    Service.$gb2312utf8  = {
        
        Dig2Dec : function(s){
            var retV = 0;
            if(s.length == 4){
                for(var i = 0; i < 4; i ++){
                    retV += eval(s.charAt(i)) * Math.pow(2, 3 - i);
                }
                return retV;
            }
            return -1;
        } ,

        Hex2Utf8 : function(s){
            var retS = "";
            var tempS = "";
            var ss = "";
            if(s.length == 16){
                tempS = "1110" + s.substring(0, 4);
                tempS += "10" +  s.substring(4, 10);
                tempS += "10" + s.substring(10,16);
                var sss = "0123456789ABCDEF";
                for(var i = 0; i < 3; i ++){
                    retS += "%";
                    ss = tempS.substring(i * 8, (eval(i)+1)*8);
                    retS += sss.charAt(this.Dig2Dec(ss.substring(0,4)));
                    retS += sss.charAt(this.Dig2Dec(ss.substring(4,8)));
                }
                return retS;
            }
            return "";
        } ,

        Dec2Dig : function(n1){
            var s = "";
            var n2 = 0;
            for(var i = 0; i < 4; i++){
                n2 = Math.pow(2,3 - i);
                if(n1 >= n2){
                    s += '1';
                    n1 = n1 - n2;
                }
                else
                    s += '0';
            }
            return s;
        },

        Str2Hex : function(s){
            var c = "";
            var n;
            var ss = "0123456789ABCDEF";
            var digS = "";
            for(var i = 0; i < s.length; i ++){
                c = s.charAt(i);
                n = ss.indexOf(c);
                digS += this.Dec2Dig(eval(n));
            }
            return digS;
        },

        GB2312ToUTF8 : function(s1){
            var s = escape(s1);
            var sa = s.split("%");
            var retV ="";
            if(sa[0] != ""){
                retV = sa[0];
            }
            for(var i = 1; i < sa.length; i ++){
                if(sa[i].substring(0,1) == "u"){
                    retV += this.Hex2Utf8(this.Str2Hex(sa[i].substring(1,5)));
                    if(sa[i].length){
                        retV += sa[i].substring(5);
                    }
                }
                else{
                    retV += unescape("%" + sa[i]);
                    if(sa[i].length){
                        retV += sa[i].substring(5);
                    }
                }
            }
            return retV;
        }
        
    };
    
} )();

/**
 *
 * Pub/Sub Pattern
 *
 * var pubsub = Service.$pubsub;
 *
 * // 订阅事件，绑定监听函数
 * var subscription = pubsub.subscribe( "inbox/newMessage", function(topics, data) {
 *     console.log( "Logging: " + topics + ": " + data );
 * });
 *
 * // Publishers are in charge of publishing topics or notifications of
 * // interest to the application. e.g:
 * // 发布事件: 字符串
 * pubsub.publish( "inbox/newMessage", "hello world!" );
 *
 * // or 发布事件：array
 * pubsub.publish( "inbox/newMessage", ["test", "a", "b", "c"] );
 
 * // or 发布事件：object
 * pubsub.publish( "inbox/newMessage", {
 * sender: "hello@google.com",
 * body: "Hey again!"
 * });
 *
 * // 取消订阅
 * pubsub.unsubscribe( subscription );
 *
 */
((function(Service) {

    (function(myObject) {
        
        // Storage for topics that can be broadcast
        // or listened to
        var topics = {};
        
        // An topic identifier
        var subUid = -1;
        
        // Publish or broadcast events of interest
        // with a specific topic name and arguments
        // such as the data to pass along
        myObject.publish = function( topic, args ) {
            
            if ( !topics[topic] ) {
                return false;
            }
            
            var subscribers = topics[topic],
                len = subscribers ? subscribers.length : 0;
            
            while (len--) {
                subscribers[len].func( topic, args );
            }
            
            return this;
        };
        
        // Subscribe to events of interest
        // with a specific topic name and a
        // callback function, to be executed
        // when the topic/event is observed
        myObject.subscribe = function( topic, func ) {
            
            if (!topics[topic]) {
                topics[topic] = [];
            }
            
            var token = ( ++subUid ).toString();
            topics[topic].push({
                token: token,
                func: func
            });
            return token;
        };
        
        // Unsubscribe from a specific
        // topic, based on a tokenized reference
        // to the subscription
        myObject.unsubscribe = function( token ) {
            for ( var m in topics ) {
                if ( topics[m] ) {
                    for ( var i = 0, j = topics[m].length; i < j; i++ ) {
                        if ( topics[m][i].token === token ) {
                            topics[m].splice( i, 1 );
                            return token;
                        }
                    }
                }
            }
            return this;
        };

        // Remove all subscribers
        myObject.clear = function() {
            topics = {};
            subUid = -1;            
        };
        
    }(Service.$pubsub || (Service.$pubsub = {})));
    
})(Service));

//
// - Submit a task to polling
//
// ```javascript
// Service.$polling.run( { eventID: 'get-waiting-queue-length',
//                         apiFunc: Service.$api.getWaitingQueueLength,
//                         apiRequestParams: { app_uuid: xxx },
//                         delay: 1000, // 1000ms
//                         onGet: function( response, success ) {
//                             if ( success ) console.log( 'current waiting queue length is ', response.length );
//                         } } );
// ```
//
// - Cancel a task in polling list
//
// ```
// Service.$polling.cancel( { eventID: 'get-waiting-queue-length' } );
// ```
//
Service.$polling = ( function() {

    var DEFAULT_DELAY = 3000, // ms
        OPTIONS = { eventID: undefined,
                    apiFunc: undefined,
                    apiRequestParams: undefined,
                    delay: DEFAULT_DELAY,
                    onGet: undefined },
        tasks = {};

    return {
        run: run,
        cancel: cancel
    }

    //
    // @param config: {
    //     eventID: `your eventID` *
    //     apiFunc: `api function that should be called` *
    //     apiRequestParams: `api request params`
    //     delay: `the next call after this`, DEFAULT is 3000ms
    //     onGet: `onGet callback` ( data, success )
    // }
    function run( config ) {
        var copy = $.extend( OPTIONS, config );
        if ( !copy.eventID || !copy.apiFunc ) return;
        if ( tasks[ copy.eventID ] ) return;

        tasks[ copy.eventID ] = { handler: undefined };
        execute( copy );
    }

    //
    // @param config: {
    //     eventID: `your eventID` *
    // }
    function cancel( config ) {
        if ( !config || !config.eventID ) return;
        if ( isCancel( config ) ) return;

        if ( tasks[ config.eventID ].handler ) {
            $clearTimeout( tasks[ config.eventID ].handler );
        }
        tasks[ config.eventID ] = undefined;
    }

    // ==== Helpers ====
    function isCancel( config ) {
        return tasks[ config.eventID ] === undefined;
    }
    
    function execute( config ) {
        config.apiFunc.call( Service.$api, config.apiRequestParams, function( r ) {
            if ( !isCancel( config ) ) {
                makeCallback( config, r, true );
                scheduleNext( config );
            }
        }, function( e ) {
            if ( !isCancel( config ) ) {
                makeCallback( config, e, false );
                scheduleNext( config );
            }
        } );
    }

    function makeCallback( config, r, success ) {
        if ( config.onGet ) config.onGet( r, success );
    }

    function scheduleNext( config ) {
        tasks[ config.eventID ].handler = $timeout( function() {
            if ( !isCancel( config ) ) {
                execute( config );
            };
        }, config.delay );
    }
    
} )();

/**
 * Copyright (c) 2016 hustcc
 * License: MIT
 * Version: v2.0.3
 * https://github.com/hustcc/timeago.js
**/
/* jshint expr: true */
!function (root, factory) {
  if (typeof module === 'object' && module.exports)
    module.exports = factory(root);
  else
    root.timeago = factory(root);
}(typeof window !== 'undefined' ? window : this,
function () {
  var cnt = 0, // the timer counter, for timer key
    indexMapEn = 'second_minute_hour_day_week_month_year'.split('_'),
    indexMapZh = '秒_分钟_小时_天_周_月_年'.split('_'),
    // build-in locales: en & zh_CN
    locales = {
      'en': function(number, index) {
        if (index === 0) return ['just now', 'right now'];
        var unit = indexMapEn[parseInt(index / 2)];
        if (number > 1) unit += 's';
        return [number + ' ' + unit + ' ago', 'in ' + number + ' ' + unit];
      },
      'zh_CN': function(number, index) {
        if (index === 0) return ['刚刚', '片刻后'];
        var unit = indexMapZh[parseInt(index / 2)];
        return [number + unit + '前', number + unit + '后'];
      }
    },
    // second, minute, hour, day, week, month, year(365 days)
    SEC_ARRAY = [60, 60, 24, 7, 365/7/12, 12],
    SEC_ARRAY_LEN = 6,
    ATTR_DATETIME = 'datetime';

  // format Date / string / timestamp to Date instance.
  function toDate(input) {
    if (input instanceof Date) return input;
    if (!isNaN(input)) return new Date(toInt(input));
    if (/^\d+$/.test(input)) return new Date(toInt(input));
    input = (input || '').trim().replace(/\.\d+/, '') // remove milliseconds
      .replace(/-/, '/').replace(/-/, '/')
      .replace(/T/, ' ').replace(/Z/, ' UTC')
      .replace(/([\+\-]\d\d)\:?(\d\d)/, ' $1$2'); // -04:00 -> -0400
    return new Date(input);
  }
  // change f into int, remove Decimal. just for code compression
  function toInt(f) {
    return parseInt(f);
  }
  // format the diff second to *** time ago, with setting locale
  function formatDiff(diff, locale, defaultLocale) {
    // if locale is not exist, use defaultLocale.
    // if defaultLocale is not exist, use build-in `en`.
    // be sure of no error when locale is not exist.
    locale = locales[locale] ? locale : (locales[defaultLocale] ? defaultLocale : 'en');
    // if (! locales[locale]) locale = defaultLocale;
    var i = 0,
      agoin = diff < 0 ? 1 : 0; // timein or timeago
    diff = Math.abs(diff);

    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY_LEN; i++) {
      diff /= SEC_ARRAY[i];
    }
    diff = toInt(diff);
    i *= 2;

    if (diff > (i === 0 ? 9 : 1)) i += 1;
    return locales[locale](diff, i)[agoin].replace('%s', diff);
  }
  // calculate the diff second between date to be formated an now date.
  function diffSec(date, nowDate) {
    nowDate = nowDate ? toDate(nowDate) : new Date();
    return (nowDate - toDate(date)) / 1000;
  }
  /**
   * nextInterval: calculate the next interval time.
   * - diff: the diff sec between now and date to be formated.
   *
   * What's the meaning?
   * diff = 61 then return 59
   * diff = 3601 (an hour + 1 second), then return 3599
   * make the interval with high performace.
  **/
  function nextInterval(diff) {
    var rst = 1, i = 0, d = Math.abs(diff);
    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY_LEN; i++) {
      diff /= SEC_ARRAY[i];
      rst *= SEC_ARRAY[i];
    }
    // return leftSec(d, rst);
    d = d % rst;
    d = d ? rst - d : rst;
    return Math.ceil(d);
  }
  // get the datetime attribute, jQuery and DOM
  function getDateAttr(node) {
    if(node.dataset.timeago) return node.dataset.timeago;
    if (node.getAttribute) return node.getAttribute(ATTR_DATETIME);
    if(node.attr) return node.attr(ATTR_DATETIME);
  }
  /**
   * timeago: the function to get `timeago` instance.
   * - nowDate: the relative date, default is new Date().
   * - defaultLocale: the default locale, default is en. if your set it, then the `locale` parameter of format is not needed of you.
   *
   * How to use it?
   * var timeagoLib = require('timeago.js');
   * var timeago = timeagoLib(); // all use default.
   * var timeago = timeagoLib('2016-09-10'); // the relative date is 2016-09-10, so the 2016-09-11 will be 1 day ago.
   * var timeago = timeagoLib(null, 'zh_CN'); // set default locale is `zh_CN`.
   * var timeago = timeagoLib('2016-09-10', 'zh_CN'); // the relative date is 2016-09-10, and locale is zh_CN, so the 2016-09-11 will be 1天前.
  **/
  function Timeago(nowDate, defaultLocale) {
    var timers = {}; // real-time render timers
    // if do not set the defaultLocale, set it with `en`
    if (! defaultLocale) defaultLocale = 'en'; // use default build-in locale
    // what the timer will do
    function doRender(node, date, locale, cnt) {
      var diff = diffSec(date, nowDate);
      node.innerHTML = formatDiff(diff, locale, defaultLocale);
      // waiting %s seconds, do the next render
      timers['k' + cnt] = setTimeout(function() {
        doRender(node, date, locale, cnt);
      }, nextInterval(diff) * 1000);
    }
    /**
     * nextInterval: calculate the next interval time.
     * - diff: the diff sec between now and date to be formated.
     *
     * What's the meaning?
     * diff = 61 then return 59
     * diff = 3601 (an hour + 1 second), then return 3599
     * make the interval with high performace.
    **/
    // this.nextInterval = function(diff) { // for dev test
    //   var rst = 1, i = 0, d = Math.abs(diff);
    //   for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY_LEN; i++) {
    //     diff /= SEC_ARRAY[i];
    //     rst *= SEC_ARRAY[i];
    //   }
    //   // return leftSec(d, rst);
    //   d = d % rst;
    //   d = d ? rst - d : rst;
    //   return Math.ceil(d);
    // }; // for dev test
    /**
     * format: format the date to *** time ago, with setting or default locale
     * - date: the date / string / timestamp to be formated
     * - locale: the formated string's locale name, e.g. en / zh_CN
     *
     * How to use it?
     * var timeago = require('timeago.js')();
     * timeago.format(new Date(), 'pl'); // Date instance
     * timeago.format('2016-09-10', 'fr'); // formated date string
     * timeago.format(1473473400269); // timestamp with ms
    **/
    this.format = function(date, locale) {
      return formatDiff(diffSec(date, nowDate), locale, defaultLocale);
    };
    /**
     * render: render the DOM real-time.
     * - nodes: which nodes will be rendered.
     * - locale: the locale name used to format date.
     *
     * How to use it?
     * var timeago = new require('timeago.js')();
     * // 1. javascript selector
     * timeago.render(document.querySelectorAll('.need_to_be_rendered'));
     * // 2. use jQuery selector
     * timeago.render($('.need_to_be_rendered'), 'pl');
     *
     * Notice: please be sure the dom has attribute `datetime`.
    **/
    this.render = function(nodes, locale) {
      if (nodes.length === undefined) nodes = [nodes];
      for (var i = 0; i < nodes.length; i++) {
        doRender(nodes[i], getDateAttr(nodes[i]), locale, ++ cnt); // render item
      }
    };
    /**
     * cancel: cancel all the timers which are doing real-time render.
     *
     * How to use it?
     * var timeago = new require('timeago.js')();
     * timeago.render(document.querySelectorAll('.need_to_be_rendered'));
     * timeago.cancel(); // will stop all the timer, stop render in real time.
    **/
    this.cancel = function() {
      for (var key in timers) {
        clearTimeout(timers[key]);
      }
      timers = {};
    };
    /**
     * setLocale: set the default locale name.
     *
     * How to use it?
     * var timeago = require('timeago.js');
     * timeago = new timeago();
     * timeago.setLocale('fr');
    **/
    this.setLocale = function(locale) {
      defaultLocale = locale;
    };
    return this;
  }
  /**
   * timeago: the function to get `timeago` instance.
   * - nowDate: the relative date, default is new Date().
   * - defaultLocale: the default locale, default is en. if your set it, then the `locale` parameter of format is not needed of you.
   *
   * How to use it?
   * var timeagoLib = require('timeago.js');
   * var timeago = timeagoLib(); // all use default.
   * var timeago = timeagoLib('2016-09-10'); // the relative date is 2016-09-10, so the 2016-09-11 will be 1 day ago.
   * var timeago = timeagoLib(null, 'zh_CN'); // set default locale is `zh_CN`.
   * var timeago = timeagoLib('2016-09-10', 'zh_CN'); // the relative date is 2016-09-10, and locale is zh_CN, so the 2016-09-11 will be 1天前.
   **/
  function timeagoFactory(nowDate, defaultLocale) {
    return new Timeago(nowDate, defaultLocale);
  }
  /**
   * register: register a new language locale
   * - locale: locale name, e.g. en / zh_CN, notice the standard.
   * - localeFunc: the locale process function
   *
   * How to use it?
   * var timeagoLib = require('timeago.js');
   *
   * timeagoLib.register('the locale name', the_locale_func);
   * // or
   * timeagoLib.register('pl', require('timeago.js/locales/pl'));
   **/
  timeagoFactory.register = function(locale, localeFunc) {
    locales[locale] = localeFunc;
  };

  return timeagoFactory;
});

Service.$app = (function() {

    var appInfo = {},
        
        set = function(info) {
            appInfo = info;
        },

        get = function() {
            return appInfo;
        };
    
    return {
        
        set: set,

        app: get, // appInfo

        appName: function() {// appName
            return get().app_name; 
        },

        appId: function() {
            return get().app_uuid || get().uuid;
        }
    }
    
})();

Service.$hovercardWelcome = ( function() {

    var hovercardWelcome,

        welcomeText;

    ///////////API////////////////
    return {
        
        // async get hovercard welcome info
        asyncGet: asyncGet,
        
        // directly get app welcome info
        getWelcomeText: getWelcomeText
        
    }

    //////////Implentation////////

    /**
     * zh_cn
     * en_us
     * zh_tw
     */
    function _fixLanguage (language) {
        if (language) {
            language = language.toLowerCase();
            switch (language) {
            case 'zh-cn':
                return 'zh_cn';

            case 'en':
                return 'en_us';
            }
        }
        return 'en';
    }

    function buildWelcomeInfo (team, welcomeText, serviceUsers) {
        return {
            appTeamName: team,
            appWelcomeText: welcomeText,
            
            activeAdmins: (function() {
                
                var users = [];

                serviceUsers && $.each(serviceUsers, function(index, item) {

                    var userUUID = item.uuid,
                        userName = item.user_fullname,
                        userAvatar = Service.$tools.icon.get(item.user_icon),
                        isBrowserOnline = item.is_browser_online,
                        isMobileOnline = item.is_mobile_online,
                        isOnline = item.is_mobile_online || item.is_browser_online;
                    
                    // user not exist
                    if (!Service.$users.exist(userUUID)) {
                        
                        // Create and store a user
                        Service.$users.setUser(userUUID, Service.$users.createUser({
                            is_portal_user: false,
                            user_uuid: userUUID,
                            user_fullname: userName,
                            user_avatar: userAvatar,
                            is_browser_online: isBrowserOnline,
                            is_mobile_online: isMobileOnline,
                            is_online: isOnline
                        }));
                        
                    } else {
                        
                        // Update it
                        Service.$users.getUser(userUUID).update({
                            user_fullname: userName,
                            user_avatar: userAvatar,
                            is_online: isOnline
                        });
                    }
                    
                    users.push(Service.$users.getUser(userUUID).getInfo());
                });

                return users;
                
            })()
        };
    }

    function asyncGet ( callback ) {
        
        if ( hovercardWelcome !== undefined ) {
            $onResult ( hovercardWelcome, callback );
            return;
        }
        
        Service.$api.getWelcomeTeam( {
            language: _fixLanguage( Service.$language.getLanguage() )
        }, function(response) {

            // cache data
            hovercardWelcome = buildWelcomeInfo ( response.team, response.welcome, response.list );
            welcomeText = response.welcome;
            
            $onResult ( hovercardWelcome, callback );
        }, function(error) {
            $onResult ( null, callback);
        } );
        
    }

    function getWelcomeText () {
        return welcomeText;
    }
    
} )();

Service.$conversation = ( function() {

    var conversationUsers = {
        // conversation-token: [ user_1, user_2 ]
    };

    //////// API ///////////
    
    return {
        asyncGetUser: asyncGetUser
    }

    ////// asyncGetUser ////
    // @param settings
    // {
    //     reuse: true/false - whether or not should reuse exist conversation users, default is false
    //     include: true/false - whether or not include current portal user, default is false
    // }
    function asyncGetUser( token, callback, settings ) {

        if ( settings && settings.reuse ) {
            if ( conversationUsers [ token ] !== undefined ) {
                $onResult( sort( filter( conversationUsers [ token ] ) ), callback );
                return;
            }
        }

        conversationUsers [ token ] = undefined; // remove all cached user datas
        
        Service.$api.getConversationUserList( {
            app_uuid: Service.$ppSettings.getAppUuid(),
            conversation_uuid: token
        }, function( r ) {

            if ( r && r.error_code === 0 ) {
                conversationUsers [ token ] = ( function() {
                    
                    var users = [];
                    r.list && $.each( r.list, function( index, item ) {
                        var userInfoAdapter = Service.$users.adapter( item );
                        users.push( Service.$users.getOrCreateUser( userInfoAdapter ).getInfo() );
                    } );
                    return users;
                    
                } ());
            } else {
                conversationUsers [ token ] = [];
            }

            $onResult( sort( filter( conversationUsers [ token ] ) ), callback );
            
        }, function( e ) {

            conversationUsers [ token ] = [];

            $onResult( sort( filter( conversationUsers [ token ] ) ), callback );
            
        } );

        function filter( users ) {

            // if `settings.include` === `true`
            // then include `portal` user
            if ( settings && settings.include ) {
                return users;
            }

            return excludePortalUser( users );
            
        }
        
    }

    ///////// tools ////////
    function sort( users ) {
        return users;
    }

    function excludePortalUser( users ) {
        if ( !users ) return users;

        // make a copy
        var userArray = users.slice(),
            i;
        $.each( userArray, function( index, item ) {
            if ( item.user_uuid === Service.$user.quickId() ) {
                i = index;
            }
        } );

        // arrayObject.splice(index,howmany,item1,.....,itemX)
        if ( i !== undefined ) userArray.splice( i, 1 );

        return userArray;
        
    }
    
} )();

// @description
//    global message pool store `send` and `received` messages, instead of `history` messages
Service.$messageStore = ( function() {

    var msgGroupIdToMsgIdMap = {
        // msg-id-1: msg-group-id,
        // msg-id-2: msg-group-id
        // ...
    };

    /////// API /////////
    
    return {
        map: map,
        find: find
    }

    /////// Implementation ///////

    function map( msgId, msgGroupId ) {
        msgGroupIdToMsgIdMap [ msgId ] = msgGroupId;
    }

    // Find `ppMessageJsonBody` by `messageId`
    function find( messageId ) {
        if ( !messageId ) return;

        var groupId = msgGroupIdToMsgIdMap [ messageId ],
            ppMessage;
        
        if ( groupId ) {
            var conversationContentModal = Modal.$conversationContentGroup.get( groupId );

            if ( conversationContentModal ) {
                ppMessage = conversationContentModal.find( messageId );
            }
        }

        return ppMessage;
    }
    
} )();

//
// @documentation
//     every conversation has several filed named `type`, `token`, `ts`
//
//
//     `token`: as the conversation's unique identifier:
//
//     `ts`: used for sort conversations
//
//     every conversation has several filed named `active`, `vip`
//
//     `active`: there is only ONE `active` conversation at the same time:
//     - true ( means this conversation is the user begin to chat or chatting with now )
//     - false
//
//     `vip`: means this conversation is the default conversation that will show on the welcome hovercard
//     - true
//     - false
//
//     ======================================
//     |          Get Conversation          |
//     ======================================
//
//     When the following api
//
//     - `asyncGetDefaultConversation`
//     - `asyncGetConversation`
//
//     failed to get conversation, it means you should waitting the server to
//     give you an avaliable `Conversation` after a while, here are two events you may interested on:
//
//     - `Event.WAITING` // the server is busy now, and you should waitting
//     - `Event.AVALIABLE` // Hey, a new conversation is avaliable now, and you can continue to chatting
//
//     if you interested in the event `EVENT.WAITING`, please subscribe the event
//     ```javascript
//     Service.$subpub.subscribe( Service.$conversationManager.EVENT.WAITING, function( topic, conversation ) {
//         // we should waiting to get an avaliable conversation now
//     } };
//     ```
//
//     if you interested in the event `EVENT.AVALIABLE`, please subscribe the event
//     ```javascript
//     Service.$subpub.subscribe( Service.$conversationManager.EVENT.AVALIABLE, function( topic, conversation ) {
//         // the server has give us an avaliable conversation now, so we begin talk now
//     } };
//     ```
//
Service.$conversationManager = ( function() {

    var EVENT = {
        WAITING: 'CONVERSATION_MANAGER/WAITING',
        AVALIABLE: 'CONVERSATION_MANAGER/AVALIABLE',
        CONVERSATION_UUID_AVALIABLE: 'NOTIFY_CONVERSATION/AVALIABLE'
    },
        conversationList = [],
        activeToken,
        hasLoadedAllConversationList = false;

    ////////// API ///////////
    return {
        EVENT: EVENT,

        init: init,
        all: all, // ONLY for debug, you should't call this method, instead of call `asyncGetList` to assure fully correct
        simulateConversationAvaliable: simulateConversationAvaliable, // for debug
        
        asyncGetDefaultConversation: asyncGetDefaultConversation,
        activeConversation: activeConversation, // acts as setter and getter
        vipConversation: findDefault,
        asyncGetList: asyncGetList,
        find: findByToken,

        asyncGetConversation: asyncGetConversation
    }

    ///////// all //////////////
    function init() {
        var $pubsub = Service.$pubsub;
        
        $pubsub.subscribe( EVENT.CONVERSATION_UUID_AVALIABLE, function( topics, conversationUUID ) {

            Service.$conversationAgency.requestInfo( conversationUUID, function( conv ) {
                
                if ( conv ) {
                    // We are waiting `default conversation`
                    // Now, this `default conversation` become avaliable now
                    var isDefaultConversation = !Service.$conversationAgency.isDefaultConversationAvaliable();
                    if ( isDefaultConversation ) { 
                        onDefaultConversationAvaliable( conv );
                    } else {
                        push ( conversation( conv ) );
                    }
                    $pubsub.publish( EVENT.AVALIABLE, conv );   
                }
                
            } );
            
        } );
    }
    
    function all() {
        return sort( conversationList );
    }

    function simulateConversationAvaliable() {
        Service.$conversationAgency.enableDebug( false );
        Service.$conversationAgency.request( function( defaultConversation ) {
            onDefaultConversationAvaliable( defaultConversation );
            Service.$pubsub.publish( EVENT.AVALIABLE, defaultConversation );
        } );
    }

    //////// asyncGetDefaultConversation /////////////
    function asyncGetDefaultConversation( callback ) {

        if ( findDefault() ) {
            $onResult( findDefault(), callback );
            return;
        }

        Service.$conversationAgency.request( function( defaultConversation ) {
            if ( defaultConversation ) {
                onDefaultConversationAvaliable( defaultConversation );
            } else {
                notifyToWaiting();                
            }
            $onResult( findDefault(), callback );
        } );

    }

    function onDefaultConversationAvaliable( response ) {
        push( conversation( response, true ) );
        active( response[ 'token' ] );
    }

    //////// activeConversation ///////////
    function activeConversation( token ) {

        // act as a getter method
        if ( token === undefined ) {
            if ( activeToken !== undefined ) {
                return findByToken( activeToken );
            }

            return undefined;    
        } else { // act as a setter method
            active( token );
        }
        
    }

    /////// asyncGetList //////////////
    function asyncGetList( callback ) {

        if ( hasLoadedAllConversationList ) {
            $onResult( sort( conversationList ), callback );
            return;
        }
        
        // 2. asyncGetAllConversations
        Service.$api.getConversationList( {
            user_uuid: Service.$user.getUser().getInfo().user_uuid,
            app_uuid: Service.$ppSettings.getAppUuid()
        }, function ( response ) {

            if ( response && response.error_code === 0 ) {
                var list = ( response.list || [] ).slice();
                list && $.each( list, function( index, item ) {
                    push( conversation( item ) );
                } );
            }

            // 3. success callback
            hasLoadedAllConversationList = true;
            $onResult( sort( conversationList ), callback );
            return;
            
        }, function ( error ) {
            
            // 3. error callback
            hasLoadedAllConversationList = true;
            $onResult( sort( conversationList ), callback );
            return;
                
        } );
    }

    ///////// asyncGetConversation ///////
    
    // @param config {
    //     user_uuid: xxx, create a conversation with `member_list`
    // }
    // provided `user_uuid`
    function asyncGetConversation( config, callback ) {

        var exist = ( config.user_uuid !== undefined ) ? find( config.user_uuid ) : undefined; 

        if ( !Service.$tools.isNull( exist ) ) {
            $onResult( exist, callback );
            return;
        }

        Service.$conversationAgency.create( config, function( conv ) {
            
            if ( conv ) {
                push( conversation( conv ) );
                $onResult( findByToken( conv.uuid ) , callback );
            } else {
                $onResult( undefined, callback );
                notifyToWaiting();
            }
            
        } );

        // try to match `assigned_uuid` to `userId`
        function find( userId ) {

            var r;
            $.each( conversationList, function( index, item ) {
                if ( item.assigned_uuid === userId ) {
                    r = item;
                }
            } );
            return r;
            
        }

        function shouldWaiting( r ) {
            return r.error_code !== 0 || Service.$tools.isApiResponseEmpty( r );
        }
        
    }

    ////////// set `token` to active /////////
    function active( token ) {
        
        var conversation = findByToken( token );
        if ( conversation !== undefined ) {
            
            $.each( conversationList, function ( index, item ) {
                item.active = false;
            } );

            conversation.ts = Date.now();
            conversation.active = true;
            activeToken = token;
            
        }

        vip( token );
        
    }

    function vip( token ) {

        var conversation = findDefault(),
            appWelcome,
            appName;
        
        if ( conversation !== undefined ) {
            
            appWelcome = conversation.app_welcome;
            appName = conversation.app_name;
            
            conversation.vip = false;
            delete conversation.app_welcome;
            delete conversation.app_name;
            
        }

        var newer = findByToken( token );
        if ( newer ) {

            // move welcome info and `vip` flag to the newer conversation
            newer.vip = true;
            appWelcome && ( newer.app_welcome = appWelcome );
            appName && ( newer.app_name = appName );
            
        }
        
    }

    function conversation( item, vip ) {        
        item [ 'token' ] = item.uuid;
        item [ 'ts' ] = Service.$tools.getTimestamp( item.updatetime );
        item [ 'vip' ] = ( typeof vip === 'boolean' ) ? vip : false;
        return item;
    }

    function findByToken( token ) {

        var find,
            i,
            len = conversationList.length;

        for ( i = 0; i < len; ++i ) {
            if ( token === conversationList [ i ].token ) return conversationList [ i ];
        }
        
        return undefined;        
    }

    function findDefault() {

        var find,
            i,
            len = conversationList.length;
        
        for ( i = 0 ; i < len ; ++i ) {
            if ( conversationList [ i ].vip ) return conversationList [ i ];
        }

        return undefined;
        
    }

    function sort( conversations ) {

        if ( !conversations || conversations.length <= 1 ) return conversations;
        return conversations.sort( compare );

        function compare( a, b ) {
            
            var timestampA = a.ts,
                timestampB = b.ts;

            return timestampB - timestampA;
        }
        
    }

    function push( conversation ) {

        var existItem;
        $.each( conversationList, function ( index, item ) {
            if ( existItem === undefined && item.token === conversation.token ) {
                existItem = item;
            }
        } );

        if ( existItem === undefined ) {
            conversationList.push( conversation );
        } else {
            conversation.vip = existItem.vip; // prevent `vip` override
            $.extend( existItem, conversation );
        }
        
    }

    // === helpers ===
    function notifyToWaiting() {
        Service.$pubsub.publish( EVENT.WAITING );
    }
    
} )();

Service.$sheetHeader = ( function() {

    var TITLE_DEFAULT = Service.Constants.DEFAULT_HEADER_TITLE,
        title = "",
        isClose = true,
        unread = 0,
        isShowDropDownMenu = false;

    ///////// API /////////////

    return {
        
        setHeaderTitle: setHeaderTitle,
        getHeaderTitle: getHeaderTitle,
        asyncGetHeaderTitle: asyncGetHeaderTitle,
        
        close: close,
        closed: closed,

        incrUnreadCount: incrUnreadCount,
        unreadCount: unreadCount,
        decrUnreadCount: decrUnreadCount,

        isShowDropDownButton: isShowDropDownButton,
        showDropDownButton: showDropDownButton
    }

    //////// Implementation //////////

    function setHeaderTitle(title) {
        title = title || TITLE_DEFAULT;
    }

    function getHeaderTitle() {
        return title || TITLE_DEFAULT;
    }

    function asyncGetHeaderTitle( callback ) {
        if ( title ) {
            $onResult( title, callback );
            return;
        }

        title = Service.$app.appName() || TITLE_DEFAULT;
        $onResult( title, callback );
    }

    function close( close ) {
        isClose = close;
    }

    function closed() {
        return isClose;
    }

    function incrUnreadCount() {
        unread++;
    }

    function unreadCount() {
        return unread;
    }

    function decrUnreadCount( count ) {
        unread = unread - count < 0 ?
            0 :
            unread - count;
    }

    function isShowDropDownButton() {
        return isShowDropDownMenu;
    }

    function showDropDownButton( show ) {
        isShowDropDownMenu = show;
    }
    
} )();

//
// @description
//
// After presee the `play` button, you should listen the audio's state change event:
//
// Service.$pubsub.subscribe( 'audio/' + `your audio id`, function( topics, data ) {
//
//     var state = data.state,
//         audioId = data.audioId;
//
//     switch( state ) {
//         case Service.$audioContext.STATE.NULL:
//         1. `stop play`
//         2. Service.$pubsub.unsubscribe( 'audio/' + `your audio id` );
//         break;
//
//         case Service.$audioContext.STATE.ERROR:
//         1. `play error`
//         2. Service.$pubsub.unsubscribe( 'audio/' + `your audio id` );
//         break;
//
//         case Service.$audioContext.STATE.PLAYING:
//         `begin to play`
//         break;
//     }
//
// } );
//
Service.$audioContext = ( function() {

    var STATE = 
        {
            /* Initial state */
            NULL: 0,
            
            /* Audio is playing */
            PLAYING: 1,

            /* Audio miss source file or can not play */
            ERROR: 2
        },

        _audioObj, /* type: Service.PPMessage.Audio */
        _audio; /* type: window.Audio */

    return {
        STATE: STATE,
        isPlaying: isPlaying,
        
        play: safePlay,
        stop: safeStop,
        close: close
    }

    function isPlaying( audio ) {
        return _audioObj !== undefined && _audio !== undefined && _audioObj.id() === audio.id();
    }

    // @param audio
    //     Object `Service.PPMessage.Audio`
    //     @see `service/message/pp-message-audio.js`
    function safePlay( audio  ) {

        if ( _audioObj !== undefined && audio !== undefined ) {
            
            // the `audio` is playing ...    
            if ( _audioObj.id() === audio.id() ) {
                return;    
            }

            // another `audio` is playing ... stop it
            safeStop( _audioObj );
            
        }

        // Can not play
        if ( !audio.canPlay() || !Service.$device.audioMp3() ) {
            error( audio );
            return;
        }

        //
        // var foo = { a: 123 };
        // var bar = foo.a;
        // bar = undefined;
        // foo.a => `123`
        //
        // We only store the references of `audio` object here, not the `audio` object itself
        // So it's safe to execute ` _audioObj = undefined ` on the method `safeStop`, `audio` still keep the origin value
        //
        _audioObj = audio;
        _audio = new Audio( audio.src() );

        // An `audio` element can fire various `events`.
        // @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events
        // @see http://www.runoob.com/jsref/dom-obj-event.html
        _audio.onended = function( e ) {
            safeStop( audio );
        };
        
        _audio.onerror = function( e ) {
            error( audio );
        };
        
        _audio.play();

        Service.$pubsub.publish( 'audio/' + _audioObj.id(), {
            state: STATE.PLAYING,
            audioId: _audioObj.id()
        } );
        
    }

    function safeStop( audio ) {
        if ( isPlaying( audio ) ) {

            _audio.currentTime = 0;
	        _audio.pause();

            Service.$pubsub.publish( 'audio/' + audio.id(), {
                state: STATE.NULL,
                audioId: audio.id()
            } );

            _audio = undefined;
            _audioObj = undefined;
        }
    }

    function error( audio ) {
        if ( isPlaying( audio ) ) {
            _audio = undefined;
            _audioObj = undefined;            
        }
        
        Service.$pubsub.publish( 'audio/' + audio.id(), {
            state: STATE.ERROR,
            audioId: audio.id()
        } );

    }

    function close() {
        safeStop( _audioObj );
    }
    
} )();

//
// You can do the following things:
//
// - `request` request default conversation
//     - If can not get default conversation, generally meaning we should waiting ... waiting ... the server to
//       give us a conversation when it become avaliable.
//
// - `create` request create a conversation by `member_list`
//     - If can not get conversation, meaning you should waiting ...
//       
// - `cancel` cancel request default conversation
//
Service.$conversationAgency = ( function() {

    var STATE = {
        REQUESTING: 0, // in requesting
        DONE: 1, // we have fetched default conversation successfully
        CANCEL: 2 // we have cancel request the default conversation
    },

        state = STATE.REQUESTING,
        defaultConversation,
        inDebuging = false;
    
    //////// API ///////////
    
    return {
        enableDebug: enableDebug, // Only for debug
        
        request: asyncGetDefaultConversation,
        requestInfo: asyncGetConversationInfo,
        create: asyncCreateConversation,
        cancel: cancelWaitingCreateConversation,

        isDefaultConversationAvaliable: isDefaultConversationAvaliable,
    }

    ///// Implement //////////
    
    function asyncGetDefaultConversation( callback ) {
        if ( state === STATE.DONE && defaultConversation ) {
            $onResult( defaultConversation, callback );
            return;
        }

        state = STATE.REQUESTING;
        
        Service.$api.getPPComDefaultConversation( {
            app_uuid: Service.$app.appId(),
            user_uuid: Service.$user.quickId(),
            device_uuid: Service.$user.quickDeviceUUID()
        }, function( r ) {

            if ( !shouldWaiting( r ) ) {
                defaultConversation = r;
                state = STATE.DONE;
            }

            $onResult( defaultConversation, callback );
            
        }, function( e ) {

            $onResult( defaultConversation, callback );
            
        } );
    }

    // Get conversationInfo from server by `conversationUUID`
    // @param conversationUUID
    // @param callback
    function asyncGetConversationInfo( conversationUUID, callback ) {
        if ( !conversationUUID ) {
            $onResult( undefined, callback );
            return;
        }
        
        Service.$api.getConversationInfo( {
            app_uuid: Service.$app.appId(),
            user_uuid: Service.$user.quickId(),
            conversation_uuid: conversationUUID
        }, function( r ) {
            $onResult( r , callback );
        }, function( e ) {
            $onResult( undefined , callback );
        } );        
    }

    // @param config {
    //     user_uuid: xxx, create a conversation with `member_list`
    // }
    // provided `user_uuid`
    function asyncCreateConversation( config, callback ) {
        state = STATE.REQUESTING;
        
        Service.$api.createPPComConversation( {
            user_uuid: Service.$user.getUser().getInfo().user_uuid,
            app_uuid: Service.$ppSettings.getAppUuid(),
            conversation_type: Service.Constants.MESSAGE.TO_TYPE,
            member_list: ( config.user_uuid !== undefined ) ? [ config.user_uuid ] : undefined
        }, function( r ) {

            var result = undefined;
            
            if ( !shouldWaiting( r ) ) {
                result = r;
                state = STATE.DONE;
            }

            $onResult( result, callback );
            
        }, function( e ) {
            
            $onResult( undefined, callback );
            
        } );
    }

    function cancelWaitingCreateConversation() {
        if ( state !== STATE.REQUESTING ) {
            return;
        }

        Service.$api.cancelWaitingCreateConversation( {
            app_uuid: Service.$app.appId(),
            user_uuid: Service.$user.quickId(),
        }, onCompleted, onCompleted );

        function onCompleted( someThing ) {
            state = STATE.CANCEL;
        }
        
    }

    function isDefaultConversationAvaliable() {
        return defaultConversation !== undefined;
    }

    // === helpers ===
    function shouldWaiting( response ) {
        return inDebuging ||
            response.error_code !== 0 ||
            Service.$tools.isApiResponseEmpty( response );
    }

    function enableDebug( enable ) {
        inDebuging = enable;
    }
    
} )();

/**
 * 对 apiMessage 进行适配，使其能够返回 PPMessage 的数据结构表示
 *
 * new ApiMessageAdapter(apiMessageJsonBody)
 *     .asyncGetPPMessage(function(ppMessage, success) {
 *         console.log("success: " + success + ", ppMessageJsonBody: " + ppMessage.getBody());
 *     });
 *
 * Date.now(): 1449716881332
 * apiMessage.ts: 1449649351.0 [IN SECONDS !!!]
 *
 * Date.parse("2015-12-10 09:55:35"); // 1449712535000
 * Date.parse("2015-12-10 09:55:35 719794"); // NaN
 *
 */
((function(Service) {

    function ApiMessageAdapter(apiMessageJsonBody) {

        var $json = Service.$json,
            $tools = Service.$tools,
            $emoji = Service.$emoji,
            $users = Service.$users,
            $user = Service.$user,

            apiMessageType = Service.Constants.MESSAGE_SUBTYPE,
            ppMessageType = Service.PPMessage.TYPE,
            
            apiMessage = apiMessageJsonBody,

            getMessageType = function(apiMessage) {
                var type = '',
                    msg = apiMessage;
                
                switch(msg.ms) {
                case apiMessageType.TEXT:
                    if ($tools.isShowEmojiIcon() && $emoji.isEmoji(msg.bo)) {
                        type = ppMessageType.EMOJI;
                    } else {
                        type = ppMessageType.TEXT;
                    }
                    break;
                    
                case apiMessageType.TXT:
                    type = ppMessageType.TEXT;
                    break;

                case apiMessageType.IMAGE:
                    type = ppMessageType.IMAGE;
                    break;

                case apiMessageType.FILE:
                    type = ppMessageType.FILE;
                    break;

                case apiMessageType.AUDIO:
                    type = ppMessageType.AUDIO;
                    break;
                }

                return type;
            },

            isAdmin = function(apiMessage) {
                return (apiMessage.fi != $user.getUser().getInfo().user_uuid) || apiMessage.tt == "S2P";
            },

            // services are all offline messages...
            msgByMachine = function(apiMessage) {
                return apiMessage.ft === Service.ApiMessage.TYPE_OG ||
                    apiMessage.ft === Service.ApiMessage.TYPE_AP;
            },

            innerCallback = function(ppMessageBuilder, success, callback) {

                var cb = function() {
                    if (callback) callback(ppMessageBuilder.build(), success);                    
                };
                
                // Async load user info
                if (isAdmin(apiMessage)) {

                    // msg generated by machine, not human
                    if (msgByMachine(apiMessage)) {
                        
                        ppMessageBuilder.userName(Service.Constants.i18n('SYSTEM_MSG'))
                            .userIcon(Service.Constants.ICON_DEFAULT_USER); // default server_name and user_icon

                        cb();
                        
                    } else {
                        var options = {
                            user_uuid: apiMessage.fi, // user_uuid
                            
                            user_fullname: apiMessage.from_user && apiMessage.from_user.user_fullname ?
                                apiMessage.from_user.user_fullname :
                                undefined, // user_name
                                
                            user_avatar: apiMessage.from_user && apiMessage.from_user.user_icon ?
                                $tools.getFileDownloadUrl(apiMessage.from_user.user_icon) :
                                undefined // user_avatar
                        };
                        
                        Service.$users.asyncGetUser(options, function(user) {
                            // get user info successfully !
                            if (user != null) {
                                // Update ppMessage body user info
                                ppMessageBuilder.userName(user.getInfo().user_fullname)
                                    .userIcon(user.getInfo().user_avatar);
                            } else {
                                ppMessageBuilder.userName(Service.Constants.i18n('DEFAULT_SERVE_NAME'))
                                    .userIcon(Service.Constants.ICON_DEFAULT_USER); // default server_name and user_icon
                            }

                            cb();
                        });    
                    }
                    
                } else {
                    cb();
                }
                
            },

            asyncBuildMessageData = function(ppMessageBuilder, callback) {
                var success = true;
                
                switch(apiMessage.ms) {
                case apiMessageType.TEXT:
                    if ($tools.isShowEmojiIcon() && $emoji.isEmoji(apiMessage.bo)) {
                        ppMessageBuilder.emojiMessageCode(apiMessage.bo);
                    } else {
                        ppMessageBuilder.textMessageBody(apiMessage.bo);
                    }
                    break;

                case apiMessageType.TXT:
                    $tools.getRemoteTextFileContent($json.parse(apiMessage.bo).fid, function(text) {
                        ppMessageBuilder.textMessageBody(text);
                        if (callback) callback(success);
                    }, function() {
                        success = false;
                        if (callback) callback(success);
                    });
                    return; // NOTE HERE: TXT message need async to get content

                case apiMessageType.IMAGE:
                    ppMessageBuilder.imageMessageUrl($tools.getFileDownloadUrl($json.parse(apiMessage.bo).orig));
                    break;

                case apiMessageType.FILE:
                    
                    var fileName = $json.parse(apiMessage.bo).name,
                    fileId = $json.parse(apiMessage.bo).fid,
                    fileUrl = $tools.getFileDownloadUrl(fileId, fileName),
                    fileServerUrl = fileUrl;

                    ppMessageBuilder.fileMessageLocalUrl(fileUrl)
                        .fileMessageName(fileName)
                        .fileMessageServerUrl(fileServerUrl);

                    break;

                case apiMessageType.AUDIO:
                    ppMessageBuilder.audio( $json.parse( apiMessage.bo ) );
                    break;

                default:
                    success = false;
                    break;
                }

                if (callback) callback(success);
            };

        this.asyncGetPPMessage = function(callback) {

            var ppMessageBuilder = new Service.PPMessage.Builder(getMessageType(apiMessage))
                .id(apiMessage.id)
                .timestamp(apiMessage.ts)
                .messageState( Service.PPMessage.STATE.FINISH )
                .conversationId(apiMessage.ci)
                .conversation({ uuid: apiMessage.ci })
                .rawData(apiMessage)
                .userId(apiMessage.fi)
                .admin(isAdmin(apiMessage));

            asyncBuildMessageData(ppMessageBuilder, function(success) {
                innerCallback(ppMessageBuilder, success, callback);
            });
        };
    }

    Service.ApiMessageAdapter = ApiMessageAdapter;
    
})(Service));

((function(Service) {

    function ApiMessage(apiMessageJsonBody) {

        var body = apiMessageJsonBody;
        
        this.getBody = function() {
            return body;
        };
        
    }

    ApiMessage.TYPE_OG = 'OG';
    ApiMessage.TYPE_AP = 'AP';

    function Builder(conversationId) {

        var basicApiMessage = {
            conversation_uuid: conversationId,
            to_uuid: '', // app_uuid or group_uuid
            to_type: '', // AP or OG
            conversation_type: Service.Constants.MESSAGE.TO_TYPE,
            message_type: Service.Constants.MESSAGE_TYPE.NOTI,
            message_subtype: '',
            from_uuid: '',
            device_uuid: '',

            // THE FOLLOWING THREE FILEDS ONLY WORKING FOR `SEND MESSAGE`
            uuid: '',
            from_type: 'DU',
            app_uuid: Service.$ppSettings.getAppUuid()
        };

        // `uuid`
        this.uuid = function( uuid ) {
            basicApiMessage.uuid = uuid;
            return this;
        };

        this.type = function(type) {
            basicApiMessage.message_subtype = type;
            return this;
        };

        // `ApiMessage.TYPE_OG`
        // `ApiMessage.TYPE_AP`
        this.toType = function(toType) {
            basicApiMessage.to_type = toType;
            return this;
        }

        this.toId = function(toId) {
            basicApiMessage.to_uuid = toId;
            return this;
        };

        this.fromUuid = function(fromUuid) {
            basicApiMessage.from_uuid = fromUuid;
            return this;
        };

        this.deviceUuid = function(deviceUuid) {
            basicApiMessage.device_uuid = deviceUuid;
            return this;
        };

        this.build = function() {

            var copy = $.extend({}, basicApiMessage, true);

            if ( !copy.to_uuid ) throw new Error ('to_uuid == null');
            if ( !copy.to_type ) throw new Error ('to_type == null');
            
            return new ApiMessage(copy);
        };
    }

    ApiMessage.Builder = Builder;
    Service.ApiMessage = ApiMessage;
    
})(Service));

// @ducumentation at the end of the file
Service.$messageSender = ( function() {

    var $messageStateBroadcast = messageStateBroadcast(),

        STATE = $messageStateBroadcast.STATE,

        DEFAULT = {

            // should upload
            upload: false,

            // file/txt
            uploadType: 'file',

            // put your upload content here
            uploadContent: null //file / 'large text'
            
        },

	// whether or not play sound when submiting or delivered
    	PLAY_SOUND = true;
    
    //////// API ////////////
    return {
        $messageStateBroadcast: $messageStateBroadcast,
        
        send: send,
        notifySendDone: notifySendDone,
        notifySendFail: notifySendFail
    }

    /////// Implentation ////////////
    function send( ppMessage, settings ) {
        
        // make a copy
        var set = $.extend({}, DEFAULT, settings),
            jsonBody = ppMessage.getBody();
        
        // notify we are build message finish
        onBuildMessageFinish( jsonBody, set, jsonBody.conversation.uuid );
        
        if (set.upload) {
            onBeginUpload( jsonBody, set);
        } else {
            sendToServer( jsonBody, set);
        }   
    }

    function onBuildMessageFinish(ppMessage, settings, conversationId) {
        // update ppMessage body
        ppMessage.messageConversationId = conversationId;
        ppMessage.messageIsConversationValid = !!conversationId;

        // callback
        broadcastHelper( ppMessage, STATE.BUILD_DONE, {
            conversationId: conversationId
        } );
    }

    function onBeginUpload(ppMessage, settings) {

        ppMessage.messageState = Service.PPMessage.STATE.BEGIN_UPLOAD;

        // upload file will get local upload file id
        var $fileUploader = Service.$uploader,
            
            UPLOAD_ERROR_CODE = Service.Uploader.ERROR_CODE,
            uploadContent = settings.uploadContent,
            uploadType = settings.uploadType,

            i18n = Service.Constants.i18n,
            
            uploadFileId = $fileUploader.upload({
                type: uploadType,
                content: uploadContent
            }).progress(function(percentage) {
                
                // uploading ...
                broadcastHelper( ppMessage, STATE.UPLOADING, {
                    uploadProgress: percentage
                } );
                
            }).done(function(response) {
                
                // onEndUpload callback
                ppMessage.messageState = Service.PPMessage.STATE.SENDING;
                onUploadDone(ppMessage, settings, response.fuuid);
                
            }).fail(function(errorCode) {
                
                // Upload failed
                ppMessage.messageState = Service.PPMessage.STATE.ERROR;
                
                switch (errorCode) {

                case UPLOAD_ERROR_CODE.SERVICE_NOT_AVALIABLE:
                    ppMessage.extra.errorDescription = i18n('SERVICE_NOT_AVALIABLE');
                    break;

                case UPLOAD_ERROR_CODE.CANCEL:
                    ppMessage.extra.errorDescription = i18n('CANCELED');
                    break;

                }
                
                onUploadFail(ppMessage, settings);
            }).query().uploadId;

        // begin upload
        broadcastHelper( ppMessage, STATE.BEGIN_UPLOAD, {
            uploadTaskId: uploadFileId
        } );

    }

    function onUploadFail(ppMessage, settings) {
        broadcastHelper( ppMessage, STATE.UPLOAD_FAIL );
        // on upload fail, send it to server
        sendToServer( ppMessage, settings );
    }

    function onUploadDone(ppMessage, settings, fileId) {
        broadcastHelper( ppMessage, STATE.UPLOAD_DONE, {
            fileId: fileId
        } );
        // on upload done, send it to server
        sendToServer(ppMessage, settings);
    }

    function sendToServer(ppMessage, settings) {

        //check message is valid
        if ( !ppMessage.messageIsConversationValid || ppMessage.messageState === Service.PPMessage.STATE.ERROR) {
            onSendFail( ppMessage, settings );
            return;
        }
        
        //send actually data
        var apiMessageJsonBody = new Service.PPMessageAdapter( ppMessage ).getApiMessageBody();

        try {
            
            //send by `WebSocket`    
            Service.$notifyMsg.get( Service.$notification, apiMessageJsonBody ).send();
            
        } catch ( e ) {
            
            // Try send message from `api` channel
            Service.$api.sendMessage( apiMessageJsonBody, function(response) {
                onSendSuccess( ppMessage, settings, response );
            }, function(error) {
                onSendFail( ppMessage, settings );
            });
            
        }

    }

    function onSendSuccess(ppMessage, settings, response) {
        
        // update ppMessage state when send success
        ppMessage.messageState = Service.PPMessage.STATE.FINISH;

	// play message send success audio
	if (PLAY_SOUND) {
	    Audio !== undefined && new Audio( Service.Constants.MSG_DELIVERED_SOUND_URL ).play();
	}

        // generally `response` if exist, we consider this message was send by `api`, not by `ws`
        if ( response ) {
            updateMessageStateOnSendSucc( ppMessage, response );
        }
        
        broadcastHelper( ppMessage, STATE.SEND_DONE );
    }

    function updateMessageStateOnSendSucc(ppMessage, response) {
        // Because of `response` contains no useful info here
        // So we don't need to do anyting with `response` here
    }

    function onSendFail(ppMessage, settings) {
        ppMessage.messageState = Service.PPMessage.STATE.ERROR;
        
        // Error , check errorDescription
        var errorDesc = ppMessage.extra.errorDescription;
        if (!errorDesc) errorDesc = Service.Constants.i18n('SEND_ERROR');
        ppMessage.extra.errorDescription = errorDesc;
        
        broadcastHelper( ppMessage, STATE.SEND_FAIL );
    }

    function notifySendDone( msgId ) {
        var ppMessage = Service.$messageStore.find( msgId );
        if ( ppMessage ) {
            onSendSuccess( ppMessage );            
        }
    }

    function notifySendFail( msgId ) {
        var ppMessage = Service.$messageStore.find( msgId );
        if ( ppMessage ) {
            onSendFail( ppMessage );
        }
    }

    function broadcastHelper( ppMessage, state, stateInfo ) {
        $messageStateBroadcast.broadcast( ppMessage.messageId, {
            body: ppMessage,
            state: state,
            stateInfo: stateInfo || {}
        } );
    }

    /////// Message State Broadcast ///////////

    function messageStateBroadcast() {

        var STATE = {
            
            BUILD_DONE: 'BUILD_DONE',
            BEGIN_UPLOAD: 'BEGIN_UPLOAD',
            UPLOADING: 'UPLOADING',
            UPLOAD_DONE: 'UPLOAD_DONE',
            UPLOAD_FAIL: 'UPLOAD_FAIL',
            SEND_DONE: 'SEND_DONE',
            SEND_FAIL: 'SEND_FAIL'
            
        };

        return {
            STATE: STATE,
            broadcast: broadcast
        }

        // @param `data`:
        //     {
        //         body: `ppMessageJsonBody`,
        //         state: xxx,
        //         stateInfo: { xxx }
        //     }
        function broadcast( messageIdentifier, data ) {

            Service.$pubsub.publish( 'msg/send/' + messageIdentifier, data );
            
        }
        
    }

    
} )();

////////////////////////////
//// Documentation /////////
////////////////////////////

// - How to listen message send states change event:

// Service.$pubsub.subscribe( 'msg/send/' + messageIdentifier, function ( topics, data ) {

//     var sendState = data.state,
//         stateInfo = data.stateInfo, // new state info will be stored at `data.stateInfo`
//         ppMessageJsonBody = data.body;

//     switch ( sendState ) {

//     case 'BUILD_FINISH':
//         // the message body is build finish, generally meaning it get a `conversation_id` which required by server-side
//         var conversationId = stateInfo.conversationId;
//         break;

//     case 'BEGIN_UPLOAD':
//         // 'file'/'large-txt' need upload
//         var uploadTaskId = stateInfo.uploadTaskId;
//         break;

//     case 'UPLOADING':
//         // 0 ~ 100
//         var uploadProgress = stateInfo.uploadProgress;
//         break;

//     case 'UPLOAD_DONE':
//         var fileId = stateInfo.fileId; // `fileId` returned by server-side
//         break;

//     case 'UPLOAD_FAIL':
//         break;

//     case 'SEND_DONE':        
//         break;

//     case 'SEND_FAIL':
//         break;

//     }

// });

/**
 *
 * @description: 
 *
 * 1. messageBox not visible (launcher is showing):
 *     publish('msgArrived/launcher', ppMessageJsonBody);
 *
 * 2. messageBox visible:
 *
 *     2.1 in chating panel and you are chatting with `group_id`:
 *         publish('msgArrived/chat', ppMessageJsonBody);
 *
 *     2.2 in group list panel:
 *         publish('msgArrived/group', ppMessageJsonBody);
 *
 */
Service.$messageReceiverModule = (function() {

    var PLAY_SOUND = true, // play notification sound

    	browserTabNotify,
        
        isGroupOnChatting = function ( groupUUID ) {
            return groupUUID &&
                View.$conversationContentContainer.visible() &&
                PP.isOpen() &&
                Service.$conversationManager.activeConversation() && 
                Service.$conversationManager.activeConversation().uuid === groupUUID;
        },
        
        getModal = function ( groupUUID ) {
            return Modal.$conversationContentGroup.get( groupUUID );
        },

        onNewMessageArrived = function(topics, ppMessage) {
            
            var $pubsub = Service.$pubsub,
                body = ppMessage.getBody(),
                groupId = body.conversation.uuid;

            if ( browserTabNotify ) { // browser tab notify
                browserTabNotify.notify( ppMessage );
            }

	    if ( PLAY_SOUND ) { // Play notification sound when new message arrived
		Audio !== undefined && new Audio( Service.Constants.MSG_NOTIFICATION_SOUND_URL ).play();
	    }

            if ( isGroupOnChatting ( groupId ) ) { // we are chating with `converstionId`

                $pubsub.publish('msgArrived/chat', ppMessage);
                
            } else {

                // store message && record unread count
                var modal = getModal ( groupId );
                modal.addMessage ( body );
                modal.incrUnreadCount();
                Ctrl.$sheetheader.incrUnread();

                // conversation list is showing
                if ( PP.isOpen() && 
                     Ctrl.$conversationPanel.mode() === Ctrl.$conversationPanel.MODE.LIST ) {
                    $pubsub.publish('msgArrived/group', ppMessage);
                } else {
                    // launcher is showing
                    $pubsub.publish('msgArrived/launcher', ppMessage);
                }
                
            }

        },

        // Start me by call this method !
        // settings: {user_uuid: xxxx, device_uuid: xxxx}
        start = function(settings) {

            if (!settings) return;

            // Initialization notification by user_uuid and device_uuid, and start it !
            Service.$notification.init({
                user_uuid: settings.user_uuid,
                device_uuid: settings.device_uuid,
                app_uuid: settings.app_uuid
            }).start();

            // listen page visibility change event
            if ( browserTabNotify )
                browserTabNotify.unregister();
            browserTabNotify = BrowserTabNotify();
            browserTabNotify.register();

            // Subscribe newMessageArrivced event
            Service.$pubsub.subscribe("ws/msg", onNewMessageArrived);
        };
    
    return {
        start: start
    };

    /////////////////////////////////////////
    //        Browser Tab Notify           //
    /////////////////////////////////////////

    //
    // https://www.w3.org/TR/page-visibility/
    //
    // @description:
    //     Let website title in browser tab change and scroll, when new message
    // arrived & page not visible.
    //
    // ```
    // var browserNotify = BrowserTabNotify();
    // browserNotify.register(); // listen `page visibility` change event
    //
    // browserNotify.notify( ppMessage ); // notify browser title to change and scroll
    // ...
    // browserNotify.unregister(); // unlisten `page visiblility` change event
    // ```
    //
    // NOTE: Only notify in PC browser 
    //
    function BrowserTabNotify() {

        var hiddenType,
            pageHidden = false,
            registered = false,
            originTitle,
            timeoutToken,
            scrollMsg,
            scrollPosition = 0;

        return {
            register: register,
            unregister: unregister,

            notify: notify
        }
        
        function register() {
            if ( registered ) return;
            
            var hidden;

            // Standards:
            if ((hidden = "hidden") in document)
                document.addEventListener("visibilitychange", onchange);
            else if ((hidden = "mozHidden") in document)
                document.addEventListener("mozvisibilitychange", onchange);
            else if ((hidden = "webkitHidden") in document)
                document.addEventListener("webkitvisibilitychange", onchange);
            else if ((hidden = "msHidden") in document)
                document.addEventListener("msvisibilitychange", onchange);

            registered = hidden !== undefined;
            hiddenType = hidden;

            originTitle = document.title;
            
        }

        function unregister() {
            if (registered) {
                if ( hiddenType === 'hidden' )
                    document.removeEventListener( 'visibilitychange', onchange );
                else if ( hiddenType === 'mozHidden' )
                    document.removeEventListener( 'mozvisibilitychange', onchange );
                else if ( hiddenType === 'webkitHidden' )
                    document.removeEventListener( 'webkitvisibilitychange', onchange );
                else if ( hiddenType === 'msHidden' )
                    document.removeEventListener( 'msvisibilitychange', onchange );
            }
            
            registered = false;
            hiddenType = undefined;

            resumeTitle();
            
        }

        function onchange( event ) {
            pageHidden = document[ hiddenType ];

            if ( !pageHidden ) {
                resumeTitle();
            }
        }

        function notify( ppMessage ) {
            if ( canNotify() ) {
                clearScroll();
                scrollMsg = buildMsgTitle( ppMessage );
                scrollTitle();
            }
        }

        function canNotify() {
            return registered &&
                hiddenType !== undefined &&
                ( !Service.$device.isMobileBrowser() ) &&
                pageHidden;
        }

        function buildMsgTitle( ppMessage ) {
            return Service.Constants.i18n( 'PPMESSAGE' ) +
                ': ' +
                ppMessage.getMessageSummary() +
                '... ';
        }

        function changeTitle( title ) {
            if ( title ) document.title = title;
        }

        function resumeTitle() {
            clearScroll();
            if ( originTitle ) {
                changeTitle( originTitle );
            }
        }

        function scrollTitle() {
            var title = scrollMsg;

            var newTitle = title.substring( scrollPosition , title.length ) + title.substring( 0, scrollPosition );
            scrollPosition++;

            changeTitle( newTitle );

            if ( scrollPosition > title.length ) scrollPosition = 0;
            
            timeoutToken = $timeout( scrollTitle, 200 );
        }

        function clearScroll() {
            if ( timeoutToken ) {
                $clearTimeout( timeoutToken );
                timeoutToken = undefined;
            }
            scrollMsg = undefined;
            scrollPosition = 0;
        }
        
    }
    
})();

((function(Service) {

    var $messageToolsModule = (function Tools() {

        function encodeTextWithUtf8(s) {
            return unescape(encodeURIComponent(s));
        }

        function isTextLengthLargerThan128(text) {
            return encodeTextWithUtf8(text).length > Service.Constants.MESSAGE.TEXT_MAX_LEN;
        }

        function isMessageTextOverflow(msg) {
            return isTextLengthLargerThan128(msg.message.text.body);
        }

        // Currently, we have the following message types:
        //
        // -TEXT
        // -EMOJI
        // -IMAGE
        // -FILE
        // -AUDIO
        //
        // -WELCOME
        // -TIMESTAMP
        //
        // `WELCOME` and `TIMESTAMP` was generated by ourself to faciliate our programming, not a real message
        function isMessage(msg) {
            if (!msg || !msg.messageType) return false; // illegal message

            var TYPE = Service.PPMessage.TYPE;
            return $.inArray(msg.messageType.toUpperCase(), [
                TYPE.TEXT,
                TYPE.EMOJI,
                TYPE.IMAGE,
                TYPE.FILE,
                TYPE.AUDIO
            ]) !== -1;
        }

        // detect to_type
        function toType() {
            return 'DU';
        }

        return {
            isTextLengthLargerThan128: isTextLengthLargerThan128,
            isMessageTextOverflow: isMessageTextOverflow,

            isMessage: isMessage,

            toType: toType
        }
        
    })();

    Service.$messageToolsModule = $messageToolsModule;
    
})(Service));

((function(Service) {

    function PPMessage(ppMessageJsonBody) {

        var body = ppMessageJsonBody;

        //----------------------
        // Set info
        //----------------------

        this.setConversationId = function(conversationId) {
            body.messageConversationId = conversationId;
            return this;
        };

        this.setConversationIdValid = function(valid) {
            body.messageIsConversationValid = valid;
            return this;
        };

        this.setMessageState = function(state) {
            body.messageState = state;
            return this;
        };

        this.setRawData = function(data) {
            body.messageRawData = data;
            return this;
        };

        //----------------------
        // Get Info
        //----------------------

        this.isConversationValid = function() {
            return body.messageIsConversationValid;
        };

        this.getBody = function() {
            return body;
        };

        this.getMessageState = function() {
            return body.messageState;
        };

        this.getMessageSummary = function() {
            return PPMessage.getMessageSummary( body );
        };

        //----------------------
        // Send information
        //----------------------

        this.send = function() {
            
            // Send message callback
            var settings = Service.$sendSettingsFactory.get( body );
            Service.$msgStateReceiverFactory.get( body.messageType ).listen( body.messageId );
            Service.$messageSender.send( this, settings );

        };
    }

    PPMessage.STATE = {
        BEGIN_UPLOAD: 'BEGIN_UPLOAD', /** Before sending, prepare to upload **/
        SENDING: 'SENDING', /** In sending state, we have send out, but we don't know whether or not it has send succeed**/
        ERROR: 'ERROR', /** Send failed or upload failed or some other reasons **/
        FINISH: 'FINISH' /** Send to server, and we have received the ack message from server **/
    };

    // supported types now
    PPMessage.TYPE = {
        TEXT: 'TEXT',
        EMOJI: 'EMOJI',
        IMAGE: 'IMAGE',
        FILE: 'FILE',
        AUDIO: 'AUDIO',
        
        WELCOME: 'WELCOME',
        TIMESTAMP: 'TIMESTAMP',
        SMS_EMAIL: 'SMS_EMAIL'
    };

    // TO_TYPE
    //
    // @see ApiMessage.TYPE_OG
    //      ApiMessage.TYPE_AP
    PPMessage.TO_TYPE = {
        AP: 'AP',
        OG: 'OG'
    };

    // static method
    // get message summary
    PPMessage.getMessageSummary = function( ppMessageJsonBody ) {

        var summary = "",
            message = ppMessageJsonBody,
            TYPE = PPMessage.TYPE,
            i18n = Service.Constants.i18n;

        if (!message || !message.messageType) return ""; //messageType not exist !
        
        switch(message.messageType) {
        case TYPE.TEXT:
            summary = message.message.text.body;
            break;
            
        case TYPE.EMOJI:
            summary = message.message.emoji.code;
            break;

        case TYPE.FILE:
            summary = '[' + i18n('FILE') + ': ' + message.message.file.fileName + ']';
            break;

        case TYPE.IMAGE:
            summary = '[' + i18n('IMAGE') + ']';
            break;

        case TYPE.AUDIO:
            summary = '[' + i18n('AUDIO') + ']';
            break;

        case TYPE.WELCOME:
            summary = '';
            break;

        default:
            summary = "";
            break;
        }

        return summary;
    };

    function Builder(messageType) {

        var ppMessage = {
            messageId: Service.$tools.getUUID(),
            messageTimestamp: Date.now() / 1000,
            messageType: messageType,
            messageToType: Service.$messageToolsModule.toType(), // detect toType
            messageState: PPMessage.STATE.SENDING,
            messageConversationId: '',
            messageIsConversationValid: true,
            messageRawData: '',
            extra: {
                errorDescription: '',
                description: ''
            },
            message: {
                text: {},
                file: {},
                image: {},
                welcome: {},
                emoji: {},
                audio: {},
                timestamp: {
                    time: Date.now()
                }
            },
            user: {
                id: null,
                admin: false,
                name: '',
                avatar: Service.Constants.ICON_DEFAULT_USER
            },
            conversation: undefined
        };

        //----------------------
        //BASIC INFO
        //----------------------
        
        this.id = function(id) {
            ppMessage.messageId = id;
            return this;
        };

        this.timestamp = function(timestamp) {
            ppMessage.messageTimestamp = timestamp;
            return this;
        };

        this.toType = function(toType) {
            ppMessage.messageToType = toType;
            return this;
        };

        this.conversationId = function(conversationId) {
            ppMessage.messageConversationId = conversationId;
            return this;
        };

        this.conversationIsValid = function(valid) {
            ppMessage.messageIsConversationValid = valid;
            return this;
        };

        this.rawData = function(rawData) {
            ppMessage.messageRawData = rawData;
            return this;
        };

        this.messageState = function(messageState) {
            ppMessage.messageState = messageState;
            return this;
        };

        this.extraDescription = function(description) {
            ppMessage.extra.description = description;
            return this;
        };

        this.conversation = function( conversation ) {
            ppMessage.conversation = conversation;
            return this;
        };

        //----------------------
        //USER
        //----------------------
        
        this.admin = function(isAdmin) {
            ppMessage.user.admin = isAdmin;
            return this;
        };

        this.userName = function(name) {
            ppMessage.user.name = name;
            return this;
        };

        this.userIcon = function(icon) {
            ppMessage.user.avatar = icon;
            return this;
        };

        this.userId = function(userId) {
            ppMessage.user.id = userId;
            return this;
        };

        //----------------------
        //WELCOME
        //----------------------

        /**
         * the param `welcomeBody` is something like the following structure: 
         *
         * {
         *     appTeamName: 'ppMessage', 
         *     appWelcomeText: 'Hello boy!', 
         *     activeAdmins: [
         *         {name: 'jin.he', avatar: 'aa.png'},
         *         {name: 'kun.zhao', avatar: 'bb.png'},
         *         ...
         *     ]
         * }
         */
        this.welcomeBody = function(welcomeBody) {
            ppMessage.message.welcome = welcomeBody;
            return this;
        };

        //----------------------
        //EMOJI
        //----------------------
        
        this.emojiMessageCode = function(code) {
            ppMessage.message.emoji.code = code;
            return this;
        };

        //----------------------
        //TEXT
        //----------------------
        
        this.textMessageBody = function(text) {
            ppMessage.message.text.body = text;
            return this;
        };

        //----------------------
        //FILE
        //----------------------

        /**
         * the param `fileBody` is something like the following structure:
         */
        this.fileBody = function(fileBody) {
            ppMessage.message.file = fileBody;
            return this;
        };

        this.fileMessageLocalUrl = function(fileLocalUrl) {
            ppMessage.message.file.fileUrl = fileLocalUrl;
            return this;
        };

        this.fileMessageName = function(fileName) {
            ppMessage.message.file.fileName = fileName;
            return this;
        };

        this.fileMessageServerUrl = function(fileServerUrl) {
            ppMessage.message.file.fileServerUrl = fileServerUrl;
            return this;
        };

        //----------------------
        //IMAGE
        //----------------------
        
        /**
         * the params `imageBody` is something like the following structure:
         */
        this.imageBody = function(imageBody) {
            ppMessage.message.image = imageBody;
            return this;
        };

        this.imageMessageUrl = function(imageUrl) {
            ppMessage.message.image.url = imageUrl;
            return this;
        };

        //----------------------
        //AUDIO
        //----------------------
        
        this.audio = function( config ) {
            ppMessage.message.audio = new PPMessage.Audio( config );
            return this;
        };

        //----------------------
        //TIMESTAMP
        //----------------------

        this.timestampBody = function(timestampBody) {
            ppMessage.message.timestamp = timestampBody;
            return this;
        };

        //Build PPMessage
        this.build = function() {
            
            // make a copy
            var copy = $.extend({}, ppMessage, true);
            if ( copy.conversation === undefined ) {
                copy.conversation = Service.$conversationManager.activeConversation();   
            }

            return new PPMessage(copy);
        };
        
    }

    PPMessage.Builder = Builder;
    Service.PPMessage = PPMessage;
    
})(Service));

//
// @note: put the file after file `service/pp-message.js`
//
( function() {

    Service.PPMessage.Audio = AudioMessage;

    // @description
    //     build a new Audio Obj
    //
    // @param options {
    //     dura: 0 ~ +Infinity, default: 0
    //     fid: `fid`, default: undefined
    //     file: `file`, default: undefined
    // }
    function AudioMessage( options ) {

        var config = $.extend( { dura: 0,
                                 fid: undefined,
                                 file: undefined } , options.mp3 ),

            error = false,
            read = false,
            
            id = Service.$tools.getUUID(),
            duration = config.dura,
            fileId = config.fid,
            file = config.file,
            fileUrl = !Service.$tools.isNull( fileId ) ? Service.$tools.getFileDownloadUrl( fileId ) : undefined;

        //////// Public API //////////
        
        this.id = getId;
        this.src = getSrc;
        this.duration = getDuration;
        this.canPlay = canPlay;
        this.markError = markError;
        this.hasRead = hasRead;
        this.markRead = markRead;

        function getSrc() { return fileUrl };

        function getDuration() { return duration; }
        
        function getId() { return id; }

        function canPlay() {
            return !error && !Service.$tools.isNull( getSrc() );
        }

        function hasRead() { return read; }

        // Mark this `audio` is not `playable` or meet some unknown error when try to play
        function markError() { error = true; }

        // Mark this `audio` has read
        function markRead() { read = true; }
        
    };
    
} )();

/**
 * 对 PPMessage 进行适配，使其能够返回 apiMessage 的数据结构表示
 *
 * var apiMessageJsonBody = new PPMessageAdapter(ppMessageJsonBody).getApiMessageBody();
 *
 */
((function(Service) {

    function PPMessageAdapter(ppMessageJsonBody) {        

        var $json = Service.$json,
            $messageToolsModule = Service.$messageToolsModule,
            data = ppMessageJsonBody,

            getMessageType = function(ppMessageBody) {
                var type = '',
                    msg = ppMessageBody;
                
                switch(msg.messageType) {
                case Service.Constants.MESSAGE.TYPE_EMOJI:
                    type = Service.Constants.MESSAGE_SUBTYPE.TEXT;
                    break;

                case Service.Constants.MESSAGE.TYPE_TEXT:
                    type = $messageToolsModule.isMessageTextOverflow(msg) ? Service.Constants.MESSAGE_SUBTYPE.TXT : Service.Constants.MESSAGE_SUBTYPE.TEXT;
                    break;
                    
                case Service.Constants.MESSAGE.TYPE_FILE:
                    type = Service.Constants.MESSAGE_SUBTYPE.FILE;
                    break;

                case Service.Constants.MESSAGE.TYPE_IMAGE:
                    type = Service.Constants.MESSAGE_SUBTYPE.IMAGE;
                    break;
                }

                return type;
            },

            getMessageFileType = function(msg) {
                var type = '';
                var DEFAULT = 'application/octet-stream';
                switch(msg.messageType) {
                case Service.PPMessage.TYPE.FILE:
                    type = msg.message.file.file.type || DEFAULT;
                    break;

                case Service.PPMessage.TYPE.IMAGE:
                    type = msg.message.image.file.type || DEFAULT;
                    break;

                case Service.PPMessage.TYPE.TEXT:
                    type = msg.message.image.file.type || DEFAULT;
                    break;

                default:
                    type = DEFAULT;
                }

                return type;
            },

            getMessageToType = function() {
                return data.messageToType;
            };

        /**
         * get apiMessage body
         */
        this.getApiMessageBody = function() {

            var apiMessage = new Service.ApiMessage.Builder(data.messageConversationId)
                .uuid(data.messageId)
                .type(getMessageType(data))
                .toType(getMessageToType())
                .toId( data.conversation.token )
                .fromUuid(Service.$user.getUser().getInfo().user_uuid)
                .deviceUuid(Service.$user.getUser().getInfo().device_uuid)
                .build()
                .getBody();
            
            switch(data.messageType) {
            case Service.PPMessage.TYPE.TEXT:
                var body = {
                    fid: data.message.text.fuuid
                };
                apiMessage['message_body'] = $messageToolsModule.isMessageTextOverflow(data) ? $json.stringify(body) : data.message.text.body;
                break;

            case Service.PPMessage.TYPE.EMOJI:
                apiMessage['message_body'] = data.message.emoji.code;
                break;

            case Service.PPMessage.TYPE.FILE:
                var body = {
                    fid: data.message.file.fuuid,
                    mime: getMessageFileType(data)
                };
                apiMessage['message_body'] = $json.stringify(body);
                break;

            case Service.PPMessage.TYPE.IMAGE:
                var body = {
                    fid: data.message.image.fuuid,
                    mime: getMessageFileType(data)
                };
                apiMessage['message_body'] = $json.stringify(body);
                break;
            }
            
            return apiMessage;    
        };
        
    }

    Service.PPMessageAdapter = PPMessageAdapter;
    
})(Service));

((function(Service) {

    var factory = (function() {

        var build = function(ppMessageJsonBody) {
            var body = ppMessageJsonBody;
            
            sendSettings = function(){
                
                switch (body.messageType) {
                case Service.PPMessage.TYPE.TEXT:
                    return Service.$textMessageSendSettings.build(body);
                    
                case Service.PPMessage.TYPE.EMOJI:
                    return Service.$emojiMessageSendSettings.build(body);
                    
                case Service.PPMessage.TYPE.IMAGE:
                    return Service.$imageMessageSendSettings.build(body);

                case Service.PPMessage.TYPE.FILE:
                    return Service.$fileMessageSendSettings.build(body);
                }
            }();

            return sendSettings;
        };
        
        return {
            get: build
        }
        
    })();

    Service.$sendSettingsFactory = factory;
    
})(Service));

((function(Service) {

    var textMessageSendSettings = (function() {

        function buildSettings(body) {

            var text = body.message.text.body,
                overflow = Service.$messageToolsModule.isTextLengthLargerThan128( text ),
                upload = body.messageIsConversationValid && overflow;
            
            return {
                
                upload: upload,
                uploadType: 'txt',
                uploadContent: text
                
            };
            
        }
        
        return {

            build: buildSettings
            
        }
        
    })();

    Service.$textMessageSendSettings = textMessageSendSettings;
    
})(Service));

((function(Service) {

    var fileMessageSendSettings = (function() {
        
        function buildSettings(body) {

            return {
                upload: true,
                uploadContent: body.message.file.file
            };
            
        }
        
        return {
            build: buildSettings
        }
        
    })();

    Service.$fileMessageSendSettings = fileMessageSendSettings;
    
})(Service));

((function(Service) {

    var imageMessageSendSettings = (function() {

        function buildSettings(body) {
            
            return {

                upload: true,
                uploadContent: body.message.image.file

            };
            
        }
        
        return {
            build: buildSettings
        }
        
    })();

    Service.$imageMessageSendSettings = imageMessageSendSettings;
    
})(Service));

((function(Service) {

    var emojiMessageSendSettings = (function(){

        function buildSettings(body) {
            
            return {}
            
        }

        return {
            build: buildSettings
        }
        
    })();

    Service.$emojiMessageSendSettings = emojiMessageSendSettings;
    
})(Service));

Service.$msgStateReceiverFactory = ( function() {

    return {
        get: get
    }

    function get( ppMessageType ) {

        switch ( ppMessageType ) {

        case Service.PPMessage.TYPE.TEXT:
            return Service.$msgStateTextReceiver;

        case Service.PPMessage.TYPE.EMOJI:
            return Service.$msgStateEmojiReceiver;

        case Service.PPMessage.TYPE.FILE:
            return Service.$msgStateFileReceiver;

        case Service.PPMessage.TYPE.IMAGE:
            return Service.$msgStateImageReceiver;

        default:
            
            return {
                listen: function () {}
            }
            
        }
        
    }
    
} )();

Service.$msgStateTextReceiver = ( function() {

    return {
        listen: textMessageStateChangeReceiver
    }

    function textMessageStateChangeReceiver ( messageIdentifier ) {
        
        var subscriber = Service.$pubsub.subscribe( 'msg/send/' + messageIdentifier, function( topics, data ) {

            var body = data.body,
                STATE = Service.$messageSender.$messageStateBroadcast.STATE;

            switch ( data.state ) {

            case STATE.BUILD_DONE:
                Ctrl.$conversationContent.appendMessage( body );
                View.$userTextMessage.onSending( body );
                break;

            case STATE.UPLOAD_DONE:
                body.message.text.fuuid = data.stateInfo.fileId;
                break;

            case STATE.SEND_DONE:
                View.$userTextMessage.onSendDone( body );
                Service.$pubsub.unsubscribe( subscriber );
                break;

            case STATE.SEND_FAIL:
                View.$userTextMessage.onSendFail( body );
                Service.$pubsub.unsubscribe( subscriber );
                break;
            }
            
        } );
        
    }
    
} )();

Service.$msgStateEmojiReceiver = ( function() {

    return {
        listen: emojiMessageStateChangeReceiver
    }

    function emojiMessageStateChangeReceiver( messageIdentifier ) {

        var subscriber = Service.$pubsub.subscribe( 'msg/send/' + messageIdentifier, function( topics, data ) {

            var body = data.body,
                STATE = Service.$messageSender.$messageStateBroadcast.STATE;

            switch ( data.state ) {

            case STATE.BUILD_DONE:
                Ctrl.$conversationContent.appendMessage( body );
                View.$userEmojiMessage.onSending( body );
                View.$composerContainer.focus();
                break;

            case STATE.SEND_DONE:
                View.$userEmojiMessage.onSendFinish( body );
                Service.$pubsub.unsubscribe( subscriber );
                break;

            case STATE.SEND_FAIL:
                View.$userEmojiMessage.onSendFail( body );
                Service.$pubsub.unsubscribe( subscriber );
                break;
            }
            
        } );
        
    }
    
} )();

Service.$msgStateFileReceiver = (function() {

    return {
        listen: fileMessageStateChangeReceiver
    }

    function fileMessageStateChangeReceiver( messageIdentifier ) {

        var subscriber = Service.$pubsub.subscribe( 'msg/send/' + messageIdentifier, function( topics, data ) {

            var body = data.body,
                STATE = Service.$messageSender.$messageStateBroadcast.STATE;

            switch ( data.state ) {

            case STATE.BEGIN_UPLOAD:                
                body.message.file.fileUploadId = data.stateInfo.uploadTaskId;

                Ctrl.$conversationContent.appendMessage( body );
                
                View.$composerContainer.focus();
                View.$userFileMessage.onBeginUpload( body );
                break;

            case STATE.UPLOADING:
                var progress = data.stateInfo.uploadProgress;
                View.$userFileMessage.onUploading( body, progress );
                break;

            case STATE.UPLOAD_DONE:
                var fileId = data.stateInfo.fileId;
                
                body.message.file.fuuid = fileId;
                body.message.file.fileServerUrl = Service.$tools.getFileDownloadUrl(fileId, body.message.file.fileName);

                View.$userFileMessage.onUploadDone( body );
                View.$userFileMessage.onSending( body );
                break;

            case STATE.UPLOAD_FAIL:
                View.$userFileMessage.onUploadFail( body );
                break;

            case STATE.SEND_DONE:
                View.$userFileMessage.onSendDone( body );               
                Service.$pubsub.unsubscribe( subscriber );
                break;

            case STATE.SEND_FAIL:
                View.$userFileMessage.onSendFail( body );                
                Service.$pubsub.unsubscribe( subscriber );
                break;
            }
            
        } );
        
    }
    
})();

Service.$msgStateImageReceiver = (function() {

    return {
        listen: imageMessageStateChangeReceiver
    }

    function imageMessageStateChangeReceiver( messageIdentifier ) {

        var subscriber = Service.$pubsub.subscribe( 'msg/send/' + messageIdentifier, function( topics, data ) {

            var body = data.body,
                STATE = Service.$messageSender.$messageStateBroadcast.STATE;

            switch ( data.state ) {

            case STATE.BEGIN_UPLOAD:
                
                body.message.image.fileUploadId = data.stateInfo.uploadTaskId;

                Ctrl.$conversationContent.appendMessage( body );
                
                View.$composerContainer.focus();
                
                View.$userImageMessage.onBeginUpload( body );
                
                break;

            case STATE.UPLOADING:
                var progress = data.stateInfo.uploadProgress;
                View.$userImageMessage.onUploading( body, progress );
                break;

            case STATE.UPLOAD_DONE:
                var fileId = data.stateInfo.fileId;
                
                body.message.image.fuuid = fileId;
                body.message.image.fileServerUrl = Service.$tools.getFileDownloadUrl(fileId);

                View.$userImageMessage.onUploadDone( body );
                View.$userImageMessage.onSending( body );
                break;

            case STATE.UPLOAD_FAIL:
                View.$userImageMessage.onUploadFail( body );
                break;

            case STATE.SEND_DONE:
                View.$userImageMessage.onSendDone( body );
                Service.$pubsub.unsubscribe( subscriber );
                break;

            case STATE.SEND_FAIL:
                View.$userImageMessage.onSendFail( body );
                Service.$pubsub.unsubscribe( subscriber );
                break;
            }
            
        } );
        
    }
    
})();

Service.$notifyAuth = (function() {

    var AUTH_TYPE = 'auth';

    //////// API ////////////
    return {
        get: authMessageDispatcher
    }

    function authMessageDispatcher ( $notifyService, authMsg ) {
        
        return {
            auth: auth,
            dispatch: onAuth
        }

        function auth () {
            
            var $api = Service.$api,
                $json = Service.$json,
                wsSettings = $notifyService.getWsSettings(),

                // auth params
                api_token = $api.getApiToken(),
                user_uuid = wsSettings.user_uuid,
                device_uuid = wsSettings.device_uuid,
                app_uuid = wsSettings.app_uuid,
                is_service_user = false,
                extra_data = {
                    title: document.title,
                    location: ( ( function() { // fetch `window.location`
                        var loc = {};
                        for (var i in location) {
                            if (location.hasOwnProperty(i) && (typeof location[i] == "string")) {
                                loc[i] = location[i];
                            }
                        }
                        return loc;
                    } )() )
                };

            // register webSocket
            $notifyService.write($json.stringify({
                type: AUTH_TYPE,
                api_token: api_token,
                app_uuid: app_uuid,
                user_uuid: user_uuid,
                device_uuid: device_uuid,
                extra_data: extra_data,
                is_service_user: is_service_user
            }));

        }

        function onAuth () {
            
            if ( !authMsg ) return;

            // auth success
            if ( authMsg.error_code === 0 || authMsg.code === 0 ) {
                Modal.$conversationContentGroup.tryLoadLostMessages();                
            }
        }
        
    }
    
})();

Service.$notifyMsg = (function() {

    var TYPE_SEND = 'send',
        WHAT_SEND = 'SEND';

    //////// API //////////////
    return {
        get: messageDispatcher
    }

    function messageDispatcher ( $notifyService, msg ) {

        var $api = Service.$api,
            $pubsub = Service.$pubsub,
            $debug = Service.$debug;
        
        return {
            send: send,
            dispatch: dispatch
        }

        // @description:
        //     if `WebSocket` is not ok, then this method will throw a Exception
        function send () {

            var apiMessage = msg;

            if ( apiMessage ) {
                
                var wsMsg = Service.$json.stringify( {
                    type: TYPE_SEND,
                    send: apiMessage
                } );

                $notifyService.write( wsMsg, function() {
                    throw new Error( 'ws not open' );
                } );
                
            }
            
        }

        function dispatch () {
            
            var isAckMessage = ( msg.what !== undefined && msg.what === WHAT_SEND );

            if ( isAckMessage ) {
                dispatchAckMessage( msg );
            } else {
                dispatchWsMessage( msg );
            }
            
        }

        function dispatchAckMessage( ackMessage ) {
            var msgId = ackMessage.extra.uuid; // the message id
            if ( msgId ) {

                if ( ackMessage.code === 0 ) { // success
                    Service.$messageSender.notifySendDone( msgId );
                } else {
                    Service.$messageSender.notifySendFail( msgId );
                }
                
            }
        }

        function dispatchWsMessage( apiMessage ) {

            //ack message if pid exist
            //for history message no pid
            if (apiMessage.pid) {
                $api.ackMessage({
                    list: [ apiMessage.pid ]
                });
            }

            //convert api message to ppMessage
            new Service.ApiMessageAdapter(apiMessage)
                .asyncGetPPMessage(function(ppMessage, succ) {
                    if (succ) {
                        // publish new message arrived msg
                        $pubsub.publish("ws/msg", ppMessage);
                    }
                });            
        }
        
    }
    
})();

/**
 *
 * WebSocket.readyState
 *
 * CONNECTING	0	The connection is not yet open.
 * OPEN	1	The connection is open and ready to communicate.
 * CLOSING	2	The connection is in the process of closing.
 * CLOSED	3	The connection is closed or couldn't be opened.
 *
 * - Start:
 *
 * Service.$notification.init({user_uuid: xxxx, device_uuid: xxxx}).start();
 *
 * - onNewMessageArrived:
 *     Service.$pubsub.publish('ws/msg', ppMessage);
 *
 * - onTypingMessageArrived:
 *     Service.$pubsub.publish('ws/typing', { type: 'typing', 'user_uuid': user_uuid, 'conversation_uuid': conversation_uuid } );
 *
 * - onUserOnlineMessageArrived:
 *     Service.$pubsub.publish('ws/online, { type: 'online' } );
 *
 * - onLogoutMessageArrived:
 *     `We will close webSocket`
 *
 * - reset:
 *
 * reset $notification to initialization status
 *
 */
Service.$notification = (function() {

    var wsSettings = null,
        ws = null, // WebSocket
        wsUrl = Configuration.web_socket_url,
        supportWebSocket = !(typeof WebSocket === "undefined"), // Does browser support webSocket ?

        checkWebSocketIntervalHandle = null, // check webSocket status every 10s
        _resetCallback = null, // reset callback

        // On WebSocket open
	    // An event listener to be called when the WebSocket connection's readyState changes to OPEN;
        // this indicates that the connection is ready to send and receive data. 
        onWebSocketOpen = function() {

            if (wsSettings == null) return;
            if (ws == null) return;

            // send auth message
            Service.$notifyAuth.get( Service.$notification ).auth();
            
        },

        // on webSocket close
        // An event listener to be called when the WebSocket connection's readyState changes to CLOSED.
        onWebSocketClose = function( event ) {
            Service.$debug.d( '[WebSocket][Close]: ', event );
            if (wsSettings == null) return;            
            // reset status
            ws = null;
            // reset callback
            if (_resetCallback) {
                _resetCallback();
            }
        },

        // on webSocket message
        // An event listener to be called when a message is received from the server.
        onWebSocketMessage = function(event) {
            var $json = Service.$json,
                $debug = Service.$debug,
                apiMessage =
                ( typeof event.data === 'string' && function () {
                    try {
                        return $json.parse(event.data);
                    } catch ( e ) {
                        e && $debug.d ( e );
                        return undefined;
                    }
                } () ) || ( typeof event.data === 'object' && event.data );

            if ( apiMessage !== undefined ) {
                
                //debug api message
                $debug.d('[Message][Arrived][WsMessage]:', apiMessage);

                Service.$notifyFactory.get( Service.$notification, apiMessage ).dispatch();

            }
            
        },

        // on webSocket error
        onWebSocketError = function(event) {
            Service.$debug.error( '[WebSocket][Error]: ', event );
            ws = null;
        },

        // Close webSocket
        closeWebSocket = function() {
            if (ws == null) return;            
            ws.close();
        },

        // check webSocket connect status
        checkWebSocketConnectStatus = function() {

            if (ws == null ||
                ws.readyState == WebSocket.CONNECTING ||
                ws.readyState == WebSocket.CLOSED) {
                reconnect();
            }
            
        },

        // reconnect 
        reconnect = function() {
            start();
        },

        // cancel reconnect task
        cancelCheckWebSocketStatus = function() {
            if (checkWebSocketIntervalHandle == null) return;

            // Cancel task
            clearInterval(checkWebSocketIntervalHandle);
            checkWebSocketIntervalHandle = null;
        },

        // check webSocket status every 10s
        startCheckWebSocketStatusAndTryReconnectTask = function() {
            cancelCheckWebSocketStatus();
            checkWebSocketIntervalHandle = setInterval(checkWebSocketConnectStatus, 1000 * 10);
        },
        
        // Initialization
        init = function(settings) {
            wsSettings = settings;
            return this;
        },

        // Start 
        start = function() {
            if (!supportWebSocket) return;
            if (wsSettings == null) return;
            if (ws != null) return;
            
            ws = new WebSocket(wsUrl);
            ws.onopen = onWebSocketOpen;
            ws.onclose = onWebSocketClose;
            ws.onmessage= onWebSocketMessage;
            ws.onerror = onWebSocketError;

            startCheckWebSocketStatusAndTryReconnectTask();
        },

        // generally, this method called only by `PP.shutdown()`, so we clear all status
        reset = function(resetCallback) {
            _resetCallback = resetCallback;
            
            closeWebSocket();
            cancelCheckWebSocketStatus();
        },

        getWebSocket = function () {
            return ws;
        };

    ///////// API //////////////
    
    return {

        init: init,
        start: start,
        reset: reset,

        write: write,
        getWs: getWs,
        isWsOk: isWsOk,
        getWsSettings: getWsSettings,

        onWebSocketMessage: onWebSocketMessage
        
    }

    // @param `errorCallback` :
    //        NOTE: this is an `error callback`, it will called when the `WebSocket` is not open
    function write ( data, errorCallback ) {
        if ( isWsOk() ) {
            
            getWs().send( data );
            Service.$debug.d( '[Message][Send]', data );
            
        } else {
            if ( errorCallback ) errorCallback ( data );
        }
    }

    function getWs () {
        return ws;
    }

    function isWsOk () {
        return ws != null && ws.readyState === WebSocket.OPEN;
    }

    function getWsSettings () {
        return wsSettings;
    }
    
})();

Service.$notifyFactory = ( function() {

    var TYPE = {
        AUTH:    'AUTH',
        ACK:     'ACK', // ack
        MSG:     'MSG', // message arrived
        ONLINE : 'ONLINE',
        SYS:     'SYS',
        TYPING : 'TYPING'
    };

    var WHAT = {
        AUTH: "AUTH",
        SEND: 'SEND'
    };

    //////// API ///////////
    
    return {
        get: get
    }

    ////////////////////////

    function get ( $notifyService, msg ) {

        var type = findType( msg ),
            handler;

        switch ( type ) {
            
        case TYPE.MSG:
            handler = Service.$notifyMsg;
            break;

        case TYPE.ONLINE:
            handler = Service.$notifyOnline;
            break;

        case TYPE.TYPING:
            handler = Service.$notifyTyping;
            break;

        case TYPE.AUTH:
            handler = Service.$notifyAuth;
            break;

        case TYPE.SYS:
            handler = Service.$notifySys;
            break;

        default:
            handler = Service.$notifyUnknown;
            break;
        }

        return handler.get( $notifyService, msg.msg ? msg.msg : msg );
        
    }

    function findType ( msg ) {

        var t = msg.type;

        if ( t === TYPE.MSG )  { // fix 'LOGOUT' message

            if ( msg.msg.mt === TYPE.SYS ) {
                
                t = TYPE.SYS;
            } 
            
        } else if ( t === TYPE.ACK ) {

            switch ( msg.what ) {

            case WHAT.AUTH:
                t = TYPE.AUTH;
                break;

            case WHAT.SEND:
                t = TYPE.MSG;
                break;                
            }
            
        }

        return t;
        
    }
    
} )();

Service.$notifyOnline = (function () {

    return {
        get: onlineMessageDispatcher
    }

    function onlineMessageDispatcher ( $notifyService, onlineMessage ) {

        return {
            dispatch: dispatch
        }

        function dispatch () {
            onlineMessage && Service.$pubsub.publish ( 'ws/online', onlineMessage );
        }
        
    }
    
})();

Service.$notifySys = (function () {

    var SUB_TYPE = 'LOGOUT';
    
    ////// API /////////////
    
    return {
        get: logoutMessageDispatcher
    }

    // {mt: "SYS", bo: "57bedf0e-a88f-11e5-b287-00163e00061e", ms: "LOGOUT"}
    // 'bo' meaning: 'device_uuid'
    function logoutMessageDispatcher ( $notifyService, sysMessage ) {

        return {
            
            dispatch: dispatch
        }

        function dispatch () {

            if ( sysMessage ) {

                if ( isLogoutMessage( sysMessage ) ) {
                    $notifyService.reset();
                }

            }
            
        }

        function isLogoutMessage ( jsonMessageBody ) {
            // TODO
            // check jsonMessageBody.bo ( divice_uuid ) is current user's device_uuid
            return jsonMessageBody && jsonMessageBody.ms && jsonMessageBody.ms === SUB_TYPE;
        }
    }
    
})();

Service.$notifyTyping = (function() {

    var TYPING_WATCH = 'typing_watch',
        TYPING = 'typing',
        TYPING_UNWATCH = 'typing_unwatch';
    
    //////// API //////////////
    
    return {
        get: get,
    }

    function get ( $notifyService, typingMsg ) {
        
        return {
            dispatch: dispatch,
            
            watch: watch,
            unWatch: unWatch,
            typing: typing
        }

        // when some_one is typing ...
        // will publish a event
        // `Service.$pubsub.publish('ws/typing', { type: 'typing', user_uuid: 'xxxx' })`
        function watch ( conversationUUID ) {
            
            if ( $notifyService.isWsOk() ) {
                
                $notifyService.write( Service.$json.stringify( { type: TYPING_WATCH, conversation_uuid: conversationUUID } ) );

                __Monitor.report( __MonitorEvent.watch, conversationUUID );
                
            }
            
        }

        function unWatch ( conversationId ) {
            if ( conversationId && $notifyService.isWsOk() ) {

                $notifyService.write( Service.$json.stringify( { type: TYPING_UNWATCH, conversation_uuid: conversationId } ) );

                __Monitor.report( __MonitorEvent.unwatch, conversationId );
                
            }
        }

        function typing () {
            
            if ( $notifyService.isWsOk() ) {
                
                $notifyService.write( Service.$json.stringify( { type: TYPING } ) );

                __Monitor.report( __MonitorEvent.typing, TYPING );
                
            }
            
        }

        function dispatch () {

            typingMsg !== undefined && Service.$pubsub.publish( 'ws/typing', typingMsg );
            
        }
        
    }
    
})();

Service.$notifyUnknown = (function() {

    return {
        get: unknownHandler
    }

    function unknownHandler( $notifyService, msg ) {

        return {
            dispatch: dispatch
        }

        function dispatch() {
            Service.$debug.d( 'unknown msg : ', msg );
        }
        
    }
    
})();

((function() {

    View._booted = false;

    View.bootMe = function(reboot) {
        if (!View._booted || reboot) {

            View.$settings = new View.PPSettings();
            View.$textUrlChecker = new View.TextUrlChecker();
            
            View._booted = true;
        }
    };

    View._pool = {};

    View.add = function(key, value) {
        View._pool[key] = value;
    };

    View.find = function(key) {
        return View._pool[key];
    };
    
})());

/**
 * TODO: REFACTOR
 */
((function(View) {

    /**
     * @constructor
     */
    function Element(tag, attrs, ctrl) {
        var isObj = (attrs && typeof attrs === "object"),
            _id = (isObj) ? (attrs["id"]) : attrs,
            _e = _create(tag, attrs, isObj, _id),
            controller = ctrl;

        // bind controller to this
        this.controller = controller;

        function _create (tag, attrs, isObj, id) {
            var _attr = {};
            if (attrs) {
                if (isObj) {

                    $.each( attrs, function ( key, value ) {

                        if ( value !== undefined || value !== null ) {

                            switch ( key ) {
                            case 'className':
                                _attr [ 'class' ] = value;
                                break;

                            default:
                                _attr [ key ] = value;
                                break;
                            }
                            
                        }
                        
                    } );
                    
                    if (!_attr['class'] && _attr['id']) {
                        _attr['class'] = _attr['id'];
                    }
                } else {
                    if (id) {
                        _attr['id'] = id;
                        _attr['class'] = id;
                    }
                }
            }
            var e = document.createElement(tag);
            for (var key in _attr) {
                if (key != 'event' && key != 'selector') {
                    e.setAttribute(key, _attr[key]);
                }
            }
            if (_attr['event']) {

                var jQuerySelector = id ? '#' + id : _attr['selector'],
                    avaliableEvents = [
                        'click', 'mouseover', 'mouseleave', 'mousedown', 'keydown', 'keyup', 'change', 'input propertychange', 'focus', 'blur', 'init'
                    ];

                if (!jQuerySelector) throw new Error('No jQuerySelector');

                if (jQuerySelector) {

                    $.each(_attr['event'], function (key, value) {
                        if ($.inArray(key, avaliableEvents) != -1) {
                            
                            switch (key) {
                            case 'init':
                                setTimeout(function() {
                                    value.apply(this, arguments);
                                });
                                break;

                            case 'change':
                                setTimeout(function() {
                                    $(jQuerySelector).bind(key, function(e) {
                                        value.apply(this, $(this)); 
                                    });
                                });
                                break;

                            default:
                                setTimeout(function() {
                                    $(jQuerySelector).bind(key, function(e) {
                                        value.apply(this, arguments);
                                    });                              
                                });
                                break;
                            }
                        } 
                    });
                }
                
            }
            return $(e);
        }

        /**
         * 得到JQuery元素
         */
        this.getElement = function() {
            return _e;
        };

        this.getHTML = function() {
            return _e[0].outerHTML;
        };

        /**
         * 添加元素
         */
        this.add = function(e) {
            _e.append(e.getElement()[0].outerHTML);
            return this;
        };

        /**
         * 添加文字
         */
        this.text = function(str) {
            _e.text(str);
            return this;
        };

        /**
         * html...
         */
        this.html = function(htmlString) {
            _e.html(htmlString);
            return this;
        };

        /**
         * 显示或者隐藏该元素
         */
        this.show = function(show) {
            _e.css('display', show ? 'block' : 'none');
            return this;
        };

        /**
         * 设置 Controller
         */
        this.ctrl = function(ctrl) {
            controller = ctrl;
        }

        /**
         * 得到 Controller
         */
        this.getController = function() {
            return controller;
        };

        this.renderTo = function( $el ) {
        }
    }
    
    View.PPElement = Element;
    View.Element = Element;
    
})(View));

/**
 * After run the build command `sh merge.sh`:
 * { css } will be replaced by the content of ppcom/jquery/assets/css/output.min.css
 */
((function(View) {

    function CssStyle() {
        View.PPElement.call(this, 'style', {
            id: 'pp-styles',
            type: 'text/css'
        });
        
        this.text("@charset \"UTF-8\" .pp-container,.pp-location{z-index:2147483647;position:absolute;bottom:0;right:0}.pp-container p,.pp-p-no-margin{-webkit-margin-before:0!important;-webkit-margin-after:0!important;-webkit-margin-start:0!important;-webkit-margin-end:0!important}.pp-group-item,.pp-group-item *,.pp-launcher-icon:hover,.pp-sheet-header .clickable,.pp-sheet-header .down-icon,.pp-sheet-header-button:hover{cursor:pointer}.pp-container a,.pp-container b,.pp-container div,.pp-container p,.pp-container span,.pp-container textarea,.pp-container u{font-family:'Helvetica Neue',Helvetica,Arial,sans-serif!important;font:normal normal 100% 'Helvetica Neue',Helvetica,Arial,sans-serif;font-style:normal;letter-spacing:normal;font-stretch:normal;font-variant:normal;-webkit-text-emphasis:none;text-shadow:none;text-transform:none;-webkit-font-smoothing:antialiased;word-wrap:break-word}.pp-container *,.pp-container :after,.pp-container :before{-webkit-box-sizing:content-box!important;-moz-box-sizing:content-box!important;box-sizing:content-box!important}.pp-conversation-container{display:none}.pp-text-link-user{color:#fff!important}.pp-text-link-admin{color:#455A64!important}.pp-container .pp-box-sizing{-webkit-box-sizing:content-box!important;-moz-box-sizing:content-box!important;box-sizing:content-box!important}.pp-container .pp-box-sizing-borderbox{-webkit-box-sizing:border-box!important;-moz-box-sizing:border-box!important;box-sizing:border-box!important}.pp-fixme{clear:both}.pp-selectable{-o-user-select:text;-moz-user-select:text;-webkit-user-select:text;user-select:text}.pp-unselectable{-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.pp-launcher-icon{position:absolute;bottom:0;right:0;width:50px;height:50px;max-width:50px;border-radius:25px;box-shadow:0 6px 13px 0 rgba(0,0,0,.23)}.pp-sheet-header{z-index:2147483002;box-shadow:0 1px 2px 0 rgba(0,0,0,.12);background:#fff;border-radius:10px 10px 0 0;overflow:hidden;position:absolute;top:0;right:0;width:100%;height:75px}.pp-sheet-header-title-container{position:absolute;left:0;top:0;width:100%;height:100%}.pp-container .pp-sheet-header-title{font-size:16px;line-height:75px;font-weight:500;color:#465C66;letter-spacing:.2px;max-width:200px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:inline}.pp-sheet-header-button{position:relative;margin:0 20px 0 15px;height:75px;float:right}.pp-sheet-header-button-minimize-container{position:relative;margin:0;height:75px;width:75px;float:right;cursor:pointer}.pp-sheet-header-minimize-button-icon{background-position:center center;width:16px;background-repeat:no-repeat;background-size:15px 15px;height:75px;position:relative;margin:auto}.pp-sheet-header .title-container{display:inline-block}.pp-sheet-header .down-icon{display:inline-block;height:10px;margin-left:5px;width:10px}.pp-container .pp-group-content-container{box-sizing:border-box;background-color:#fff;border-radius:0 0 10px 10px;bottom:0;display:none;position:fixed;margin:0 auto 10px;overflow-y:auto;width:100%;top:75px}.pp-group-item{border-top:1px solid #f3f4f5;padding:32px 30px}.pp-group-item:hover{background-color:#f7f8fa;border-top:1px solid #ebedf1}.pp-group-item:last-child{border-bottom:1px solid #f3f4f5}.pp-group-item-body{position:relative;margin-left:50px}.pp-group-item-meta{margin-bottom:2px;min-height:15px}.pp-group-item-meta::after{clear:both}.pp-group-item-body-author{float:left;color:rgba(73,76,93,.7)}.pp-group-item-body-unread-dot{display:inline-block;background-color:#1F8CEB;margin-right:9px;width:9px;height:9px;border-radius:50%;content:'';float:right;margin-top:3px}.pp-group-item-body-timestamp{float:right;text-align:right;color:rgba(73,76,93,.7)}.pp-group-item-body-author,.pp-group-item-body-timestamp{font-size:13px!important;max-width:49%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.pp-group-item-content{position:relative}.pp-group-item-content-container{margin-right:25px;color:#3a3c4c;font-size:13px;min-height:15px;line-height:19px}.pp-group-item-content-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-size:13px!important;font-color:#3a3c4c}.pp-group-item-body-user-icon{background-size:16px 14px;background-repeat:no-repeat;display:inline-block;background-position:50%;width:16px;position:absolute;top:0;bottom:0;right:0}.pp-group-item img{border-radius:50%;float:left;display:inline-block;width:35px;height:35px}.pp-sheet-header .pp-sheet-header-body{display:none;padding:20px 0 0 80px}.pp-sheet-header .pp-sheet-header-title{color:#fff;font-size:16px;line-height:1.1em}.pp-sheet-header .pp-sheet-header-app-name{color:hsla(0,0%,100%,.8);font-size:13px;line-height:1.1em}.pp-sheet-header .pp-sheet-conversations-button{background-repeat:no-repeat;background-position:50%;width:75px;height:75px;float:left;display:none;position:relative}.pp-sheet-header .pp-sheet-header-button-icon{background-size:15px 12px;background-repeat:no-repeat;background-position:center;margin:0 auto;width:18px;height:100%;float:left}.pp-sheet-header .pp-header-buttons-close{background-position:50%;background-size:14px 14px;background-repeat:no-repeat;display:none;position:absolute;top:0;right:0}.pp-composer-container-action-btn,.pp-launcher-button{background-position:center;background-repeat:no-repeat;cursor:pointer}.pp-emoji-selector-triangle,.pp-emoji-selector-triangle-mask{right:25px;position:absolute;z-index:2147483646;pointer-events:none}.pp-sheet-header .pp-header-buttons-back-contents,.pp-sheet-header .pp-header-buttons-close-contents{cursor:pointer;width:50px;height:50px;padding:8px;margin:13px;box-sizing:border-box!important;border-radius:8px}.pp-sheet-header .pp-header-buttons-back-contents:hover,.pp-sheet-header .pp-header-buttons-close-contents:hover,.pp-sheet-header .pp-sheet-header-team-profile-container:hover{background-color:rgba(0,0,0,.1)}.pp-sheet-header .pp-unread-count{border-radius:50%;font-size:11px;line-height:16px;background-color:red;text-align:center;color:#fff;position:absolute;width:16px;height:16px;top:11px;left:44px;cursor:pointer;display:none}.pp-relative-time{cursor:pointer}.pp-emoji-selector{background-color:#fff;width:324px;height:257px;float:right;margin-right:16px;border-radius:3px;border:1px solid #D0D4D8;box-shadow:0 0 3px 1px rgba(0,0,0,.1)}.pp-emoji-selector-triangle{border:solid transparent;border-color:rgba(170,170,170,0);border-top-color:#aaa;border-width:8px}.pp-emoji-selector-triangle-mask{border:solid transparent;border-color:rgba(170,170,170,0);border-top-color:#FFF;margin-top:-1px;border-width:8px}.pp-container .pp-emoji-selector-panel-header{background-color:#fff;height:35px;width:100%;border-radius:3px;text-align:center;font-size:24px}.pp-emoji-selector-panel-header span{line-height:30px;width:45px;margin-top:5px;text-align:center;display:inline-block;border-radius:3px 3px 0 0;cursor:pointer;margin-right:5px}.pp-emoji-selector-panel-header span.active{box-shadow:0 -1px 3px 0 rgba(0,0,0,.1);background-color:#FFF}.pp-emoji-selector-content{box-shadow:0 -1px 3px 0 rgba(0,0,0,.1);background-color:#fff;height:212px;width:314px;overflow-y:auto;display:block;border-radius:0 0 3px 3px;position:relative;left:0;top:0;padding:5px}.pp-container .pp-emoji-selector-content span{margin:6px;width:30px;line-height:30px;display:inline-table;cursor:pointer;text-align:center;font-size:21px}.pp-emoji-selector-sibling{background-color:transparent;overflow:hidden;height:259px}.pp-messenger-panel{width:368px;height:calc(100% - 95px - 20px);position:fixed;right:20px;bottom:95px;border-radius:10px;z-index:2147483646;box-shadow:0 0 4px 1px rgba(0,0,0,.08);min-height:250px}.pp-container .pp-launcher-badge{position:absolute;right:-7px;top:0;border-radius:50%;font-size:12px;line-height:18px;background-color:#ff3c00;text-align:center;color:#fff;width:18px;height:18px;cursor:pointer;opacity:1;display:block;visibility:visible}.pp-launcher-button,.pp-launcher-button-container{width:60px;height:60px}.pp-launcher-button{border-radius:50%;border-style:solid;border-width:0;position:absolute;bottom:0;right:0;border-color:#004c88;box-shadow:0 6px 13px 0 rgba(0,0,0,.23)}.pp-launcher-button-container-inactive{transition:opacity,.1s;opacity:0;visibility:hidden}.pp-launcher-button-container-active{opacity:1;visibility:visible}.pp-launcher-button-minimized{-webkit-animation:pp-launcher-minimize .1s linear 0s both;animation:pp-launcher-minimize .1s linear 0s both;transition:background-image 0s linear .1s}.pp-launcher-button-maximize{-webkit-animation:pp-launcher-maximize .1s linear 0s both;animation:pp-launcher-maximize .1s linear 0s both}.pp-launcher-button-inactive{visibility:hidden}.pp-launcher-container{position:fixed;height:60px;z-index:2147483646}.pp-loading{box-sizing:border-box;display:none;height:100%;margin:0 auto;top:75px}.pp-loading-spinner{width:28px;height:28px;background-size:28px 28px;background-repeat:no-repeat;position:absolute;left:50%;top:50%;margin-left:-14px;animation:loading 1s linear 0s infinite both;-o-animation:loading 1s linear 0s infinite both;-moz-animation:loading 1s linear 0s infinite both;-webkit-animation:loading 1s linear 0s infinite both}.pp-loading-text{color:gray;font-size:14px!important;width:100%;position:absolute;text-align:center;top:calc(50% + 35px)}@-webkit-keyframes loading{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes loading{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes loading{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes loading{100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes pp-launcher-minimize{0%{-webkit-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0);transform:scale(0)}}@-keyframes pp-launcher-minimize{0%{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0)}}@-webkit-keyframes pp-launcher-maximize{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1)}}@-keyframes pp-launcher-maximize{0%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}.pp-conversation-content-maximize{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1);-webkit-transform-origin:bottom right;-ms-transform-origin:bottom right;transform-origin:bottom right;transition:opacity .1s linear .15s,-webkit-transform .25s ease-in-out;transition:transform .25s ease-in-out,opacity .1s linear .15s;transition:transform .25s ease-in-out,opacity .1s linear .15s,-webkit-transform .25s ease-in-out}.pp-conversation-sheet-minimized{opacity:0;-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);-webkit-transform-origin:bottom right;-ms-transform-origin:bottom right;transform-origin:bottom right;transition:opacity .1s linear,visibility 0s linear .25s,-webkit-transform .25s ease-in-out;transition:transform .25s ease-in-out,opacity .1s linear,visibility 0s linear .25s;transition:transform .25s ease-in-out,opacity .1s linear,visibility 0s linear .25s,-webkit-transform .25s ease-in-out}.pp-composer{position:relative;margin:0 auto}#pp-composer-container{border-radius:0 0 10px 10px}.pp-composer-container-action-btn{height:15px;width:15px;position:relative;float:right;top:5px;margin:0 2px 0 0;padding:5px;opacity:.4;background-size:15px 15px}.pp-composer-container-emoji-btn{display:inline;margin-right:2px}.pp-composer-container-tools-container{position:absolute;top:3px;right:6px}.pp-composer-container-warning{bottom:60px;background:0 0;width:100%;text-align:center}.pp-composer-container-form{margin-bottom:0!important;padding:0!important;float:right;width:100%}.pp-container .pp-composer-container-warning-span{font-size:14px;color:red}.pp-container .pp-composer-container-textarea{line-height:20px;border-radius:0 0 10px 10px;height:100%;width:100%;outline:0!important;resize:none;font-size:14px;padding:18px 100px 18px 30px;word-break:break-all;overflow:hidden;max-height:210px;min-height:40px;border:none;transition:background-color .2s ease,box-shadow .2s ease;color:#565867;background-color:#f0f3f5}.pp-container .pp-composer-container-textarea:focus{outline:0;background-color:#fff;box-shadow:0 0 100px 0 rgba(150,165,190,.24)}.pp-container .pp-conversation-part-pulltorefreshbutton{font-size:14px;color:gray;cursor:pointer}.pp-composer-container-input{display:none!important}.pp-conversation-part{margin-bottom:16px}.pp-conversation-part-welcome-outer-1{display:block;margin-bottom:16px}.pp-conversation-part-welcome-outer-2{border-top:0;border-bottom:1px solid #e4e5e7;padding:0 20px 20px}.pp-conversation-part-welcome-icon{bacground-size:28px 28px;background-repeat:no-repeat;width:28px;height:28px;margin:0 auto 15px}.pp-container .pp-conversation-part-welcome-body{font-weight:400;font-size:14px;color:#90A4AE;line-height:18px;text-align:center;display:block;-moz-user-select:text;-webkit-user-select:text;-ms-user-select:text}.pp-conversation-content{background-color:#FAFAFA;overflow-y:auto;position:absolute;top:75px;bottom:56px;right:0;width:100%;padding:8px;box-sizing:border-box;transition-timing-function:cubic-bezier(.1,.57,.1,1);-webkit-transition-timing-function:cubic-bezier(.1,.57,.1,1);transition-duration:0s;-webkit-transition-duration:0s;transform:translate(0,0) translateZ(0)}.pp-conversation-part-text-by-admin-outer{text-align:left;margin-bottom:16px;clear:both}.pp-conversation-part-text-by-admin-outer-2{position:relative;width:100%}.pp-conversation-part-text-by-admin-avatar{margin-right:5px;border-radius:50%;width:28px;height:28px;float:left;position:relative;overflow:hidden}.pp-conversation-part-text-by-admin-outer-3{position:relative}.pp-conversation-part-text-by-admin-body-container{border-color:#dadee2;border-radius:4px;border-width:1px;border-style:solid;position:relative;max-width:80%;display:inline-block;background-color:#fff;color:#455A64;-moz-user-select:text;-webkit-user-select:text;-ms-user-select:text;top:3px}.pp-container .pp-conversation-part-serve-name{font-size:12px;color:#455A64;text-align:left}.pp-container .pp-conversation-part-text-by-admin-body{font-size:14px;font-weight:400;line-height:20px;padding:12px 17px;text-align:left;word-break:break-all;white-space:pre-wrap;color:#606273;background-color:#eff3f6}.pp-conversation-part-text-by-admin-triangle{width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;border-right:4px solid #dadee2;position:relative;float:left;margin-top:10px;margin-right:-1px;top:3px}.pp-container .pp-conversation-part-text-by-admin-timestamp-container{font-size:12px;line-height:20px;color:#c9cbcf;position:relative;top:0;display:inline-block}.pp-conversation-part-emoji-by-admin-outer{text-align:right;margin-bottom:16px;width:100%;position:relative;overflow:hidden}.pp-conversation-part-emoji-by-admin-avatar{margin-right:7px;border-radius:50%;width:28px;height:28px;float:left;position:relative}.pp-conversation-part-emoji-by-admin-body-container{float:left;position:relative}.pp-container .pp-conversation-part-emoji-by-admin-body{font-size:96px;line-height:1.1;float:left;position:relative;margin-top:5px}.pp-container .pp-conversation-part-emoji-by-admin-timestamp{font-size:12px;line-height:20px;color:#c9cbcf;clear:both;display:block;float:left;margin-top:5px}.pp-conversation-part-image-by-user{text-align:right;margin-bottom:16px}.pp-conversation-part-image-by-user-o{text-align:right;margin-bottom:16px;position:relative;overflow:hidden;clear:both}.pp-conversation-part-image-by-user-img{cursor:pointer;border-radius:4px;margin:0 0 5px;padding:0;right:0;max-width:242px;float:right}.pp-container .pp-conversation-part-image-by-user-timestamp{position:relative;float:right;font-size:12px;line-height:20px;color:#c9cbcf;clear:both}.pp-conversation-part-image-by-admin-o{text-align:right;margin-bottom:16px;clear:both}.pp-conversation-part-image-by-admin-o1{position:relative;width:100%}.pp-conversation-part-image-by-admin-avatar{margin-right:7px;border-radius:50%;width:28px;height:28px;float:left;position:relative;overflow:hidden}.pp-conversation-part-image-by-admin-o2{overflow:hidden;position:relative}.pp-conversation-part-image-by-admin-o3{overflow:hidden}.pp-conversation-part-image-by-admin-o4{max-width:242px;float:left;position:relative}.pp-conversation-part-image-by-admin-img{cursor:pointer;border-radius:4px;margin:3px 0 0;padding:0;width:100%}.pp-container .pp-conversation-part-image-by-admin-timestamp-container{position:relative;float:left;font-size:12px;line-height:20px;color:#c9cbcf}.pp-conversation-part-file-by-admin-outer{text-align:right;margin-bottom:16px;clear:both}.pp-conversation-part-file-by-admin-outer-2{position:relative;width:100%}.pp-conversation-part-file-by-admin-avatar{margin-right:7px;border-radius:50%;width:28px;height:28px;float:left;position:relative;overflow:hidden}.pp-conversation-part-file-by-admin-outer-3{overflow:hidden;position:relative}.pp-conversation-part-file-by-admin-outer-4{max-width:80%;float:left;position:relative;margin-top:3px}.pp-conversation-part-file-by-admin-outer-5{display:block;background-color:#0071b2;border-radius:4px;border-width:1px;border-style:solid;padding:5px;overflow:hidden}.pp-conversation-part-file-by-admin-upload-icon{position:relative;float:left;width:32px;height:32px;background-size:16px 15px;background-position:center;background-repeat:no-repeat;border-right:1px solid rgba(255,255,255,.3)}.pp-conversation-part-file-by-admin-outer-6{vertical-align:middle;margin:5px 10px 0;overflow:hidden}.pp-container .pp-conversation-part-file-by-admin-file-link{font-size:14px;font-weight:400;line-height:20px;position:relative;float:left;color:#fff;text-decoration:underline;cursor:pointer;overflow:hidden;word-break:break-all;max-height:20px;margin-left:5px}.pp-container .pp-conversation-part-file-by-admin-timestamp-container{position:relative;float:left;font-size:12px;line-height:20px;color:#c9cbcf}.pp-conversation-part-file-by-user-o{width:100%;position:relative;overflow:hidden}.pp-conversation-part-file-by-user-o2{float:right;padding:5px;background-color:#0071b2;border-radius:4px;border-width:1px;border-style:solid;margin-bottom:5px;max-width:80%}.pp-conversation-part-file-by-user-upload-icon{float:left;width:32px;height:32px;background-size:16px 15px;background-position:center;background-repeat:no-repeat;border-right:1px solid rgba(255,255,255,.3)}.pp-conversation-part-file-by-user-link-container{max-height:20px;overflow:hidden;margin:5px 5px 0 32px}.pp-container .pp-conversation-part-file-by-user a{color:#fff;font-size:14px;font-weight:400;line-height:20px;text-decoration:underline;word-break:break-all;margin:5px 5px 0 10px}.pp-container .pp-conversation-part-file-by-user-timestamp{font-size:12px;line-height:20px;color:#c9cbcf;clear:both;text-align:right}.pp-conversation-part-center{display:table;margin:0 auto 10px}.pp-uploading-bar,.pp-uploading-bar-remove{display:inline-block;vertical-align:middle}.pp-container .pp-conversation-part-timestamp-time{background-color:#cecece;padding:4px;border-radius:4px;font-size:14px}.pp-uploading-bar{border-radius:4px;position:relative;width:50px;height:6px;border:1px solid #ccc;background-color:#fff;margin:0 5px}.pp-uploading-bar-state{transition:width .4s;border-radius:3px;background-color:#0071b2;position:absolute;top:0;left:0;bottom:0}.pp-uploading-bar-remove{background-size:14px 14px;background-repeat:no-repeat;opacity:.8;cursor:pointer;width:14px;height:14px;right:-22px;top:2px}.pp-container .pp-uploading-bar-outer{color:#c9cbcf;font-size:14px;display:block;float:right}.pp-launcher-preview-outer{height:100px;max-width:274px;float:right;margin-right:52px;width:100%;position:relative;margin-top:-60px}.pp-launcher-preview-outer-2{padding:10px;position:relative;float:right;cursor:pointer}.pp-launcher-preview-outer-3{border-radius:10px;background:#fff;padding:13px;position:relative;box-shadow:0 6px 13px 0 rgba(0,0,0,.23)}.pp-launcher-preview-close{background-size:18px 18px;background-repeat:no-repeat;cursor:pointer;width:20px;height:20px;float:left;margin-top:-20px;margin-left:-20px;display:none}.pp-launcher-preview{position:relative}.pp-launcher-preview-p-outer{overflow:hidden;max-height:37px;min-height:18px}.pp-launcher-preview-p{word-break:break-all;line-height:19px;color:#333}.pp-launcher-preview-triangle-container{float:right;margin-right:-15px;position:relative}.pp-launcher-preview-triangle{width:0;height:0;border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff;margin-left:calc(100% - 12px);margin-top:18px}.pp-no-conversations-icon{background-size:79px 59px;background-repeat:no-repeat;display:block;width:79px;height:59px;margin:0 auto 10px}.pp-container .pp-no-conversations-p{color:#CDCFD2;width:96px;margin:auto;font-size:16px;text-align:center}.pp-no-conversations{margin-top:200px}.pp-composer-container{width:100%;background:0 0;position:absolute;bottom:0;right:0}.pp-composer-send-button{border-radius:4px;margin-left:8px;height:40px;float:right;text-decoration:none;padding:0 9px;display:inline-block;color:#fff;cursor:pointer;background:#CCC}.pp-admin-avatar,.pp-admin-avatar img{margin:0 auto;border-radius:50%}.pp-composer-send-button p{font-size:14px;line-height:25px}.pp-app-profile-container{padding:16px 16px 0}.pp-app-profile{padding:20px 12px 26px;background-color:#fff;overflow:hidden;box-shadow:0 0 3px rgba(0,0,0,.2);border-radius:5px}.pp-active-admins{text-align:center;color:#364850;padding-top:24px}.pp-container .pp-app-profile-text{padding:14px 30px 0;text-align:center;font-weight:400;font-size:13px;color:#78909C;line-height:19px}.pp-container .pp-app-profile-team{text-align:center;color:#455a64;font-weight:500;font-size:15px;line-height:1.8}.pp-active-admin{display:inline-block}.pp-admin-avatar img{width:48px;height:48px}.pp-active-admin .state{margin-top:10px;font-size:12px}.pp-active-admin .online{color:#A6D84F}.pp-active-admin .offline{color:#F90}.pp-container .pp-active-admin-name{font-size:12px;color:#90A4AE;text-align:center;padding-top:7px;width:80px;overflow:hidden;text-overflow:ellipsis}.pp-launcher-hovercard{background-color:#fafafb;border-radius:5px;border:1px solid rgba(0,0,0,.1);box-shadow:0 0 10px rgba(0,0,0,.08);width:340px;position:absolute;bottom:64px;right:-5px}.pp-launcher-hovercard-welcome{background-color:#fff;border-radius:5px 5px 0 0;border-bottom:1px solid #dfe0e1;box-shadow:0 1px 1px #f0f0f1;padding:26px 20px;overflow:hidden;cursor:pointer}.pp-launcher-hovercard-close{opacity:1;transition:opacity .2s ease-in-out;cursor:pointer;position:absolute;top:-30px;right:-1px;border-radius:40px;box-shadow:0 0 20px rgba(0,0,0,.12);padding:6px 10px 5px 22px;font-size:12px;color:#fff;background-position:10px center;line-height:12px;background-size:8px 8px;background-repeat:no-repeat}.pp-launcher-hovercard-textarea{padding:18px 16px;font-size:16px;border-radius:0 0 5px 5px;height:42px;cursor:pointer}.pp-container .pp-launcher-hovercard-textarea-textarea{width:100%;height:42px;background-color:#fff;font-weight:400;color:#455a64;resize:none;border:1px solid #cfd8dc;font-size:14px;line-height:20px;padding:10px 70px 5px 14px;border-radius:4px;outline:0}.pp-container .pp-textarea-focus{border-color:#74BEFF;box-shadow:0 0 4px 0 rgba(75,171,255,.38)}.pp-launcher-hovercard-admins{width:107px;position:relative;float:left;height:50px;padding-bottom:35px;cursor:pointer;text-align:center}.pp-launcher-hovercard-text{float:right;width:174px;font-family:Helvetica Neue,Helvetica,Arial,sans-serif;cursor:pointer}.pp-container .pp-launcher-hovercard-app-name{font-weight:700;font-size:14px;color:#37474f;margin-bottom:7px;cursor:pointer}.pp-container .pp-launcher-hovercard-welcome-text{font-size:12px;color:#78909c;line-height:1.5;cursor:pointer}.pp-launcher-hovercard:after,.pp-launcher-hovercard:before{top:100%;right:20px;border:solid transparent;content:' ';height:0;width:0;position:absolute;pointer-events:none}.pp-launcher-hovercard:before{border-color:rgba(204,204,204,0);border-top-color:rgba(0,0,0,.14);border-width:9px;margin-left:-6px}.pp-launcher-hovercard:after{border-color:rgba(250,250,251,0);border-top-color:#fafafb;border-width:8px;margin-left:-5px;right:21px}.pp-launcher-hovercard .groups-header{margin:30 auto 20;text-align:center;font-size:20px;color:#000}.pp-launcher-hovercard .groups-footer{margin:30 auto;text-align:center;clear:both;color:#989494}.pp-launcher-hovercard .groups-body{width:290px;margin:10 auto}.pp-launcher-hovercard .groups-body .item{background-color:#F3F3F3;border:1px solid #FBF0F0;border-radius:5px;box-shadow:2px 2px 1px #E6E3E3;clear:both;cursor:pointer;height:50px;margin-bottom:20px;padding:5 5 5 15px}.pp-launcher-hovercard .groups-body .left{float:left;width:50px}.pp-launcher-hovercard .groups-body .img-container{display:inline-block;margin-left:-22px;position:relative}.pp-launcher-hovercard .groups-body .img-container:first-child{margin-left:0}.pp-launcher-hovercard .groups-body .right{float:left;margin-left:10px}.pp-launcher-hovercard .group-name{margin-top:5px;font-size:16px;color:#3E3C3C}.pp-launcher-hovercard .online-time{font-size:14px;margin-top:5px;color:gray}.pp-launcher-hovercard img{width:46px;height:46px;margin:0 auto;border-radius:50%;border:2px solid #fff}.pp-launcher-admin-avatar{position:relative;display:inline-block;top:0;cursor:pointer;margin-left:-22px}.pp-launcher-admin-avatar:first-child{margin-left:0}.pp-launcher-admin-avatar img{width:46px;height:46px;margin:0 auto;border-radius:50%;border:2px solid #fff}.pp-container img.grayscale{-webkit-filter:grayscale(1);-webkit-filter:grayscale(100%);filter:grayscale(100%);filter:gray}#pp-container .pp-image-viewable{cursor:-webkit-zoom-in;cursor:zoom-in}#pp-container .pp-image-viewer-overlay{z-index:2147483647;position:fixed;top:0;right:0;bottom:0;left:0;background:#000;cursor:-webkit-zoom-out;cursor:zoom-out;opacity:0}#pp-container .pp-zoomed-image{z-index:2147483648;position:fixed;cursor:-webkit-zoom-out;cursor:zoom-out;transition:all .3s ease}.pp-container .group-member-hovercard{background-color:#fafafb;border-radius:5px;border:1px solid rgba(0,0,0,.1);left:42px;box-shadow:0 0 10px rgba(0,0,0,.08);position:absolute;width:260px;-webkit-box-sizing:initial!important;-moz-box-sizing:initial!important;box-sizing:initial!important}.pp-container .group-member-hovercard .body{background-color:#fff;border-radius:5px 5px 0 0;border-bottom:1px solid #dfe0e1;box-shadow:0 1px 1px #f0f0f1;padding:13px 10px 1px;overflow:hidden;cursor:pointer}.pp-container .group-member-hovercard .img-container{display:inline-block;top:0;width:60px;position:relative;float:left;height:50px;padding-bottom:35px;cursor:pointer;text-align:center}.pp-container .group-member-hovercard img{width:60px;height:60px;margin:0 auto;border-radius:50%;border:2px solid #fff}.pp-container .group-member-hovercard .info{float:right;width:164px;cursor:pointer}.pp-container .group-member-hovercard .name{font-weight:700;font-size:14px;color:#37474f;margin-bottom:7px;cursor:pointer}.pp-container .group-member-hovercard .signature{font-size:12px;color:#78909c;line-height:1.5;cursor:pointer}.pp-container .group-member-hovercard .textarea-container{padding:9px 8px;font-size:16px;border-radius:0 0 5px 5px;height:36px;cursor:pointer}.pp-container .group-member-hovercard textarea{width:100%;height:36px;background-color:#fff;font-weight:400;color:#455a64;resize:none;border:1px solid #cfd8dc;font-size:14px;line-height:20px;padding:7px 35px 5px 10px;border-radius:4px;outline:0}.pp-container .group-member-hovercard textarea:focus{border-color:#74BEFF;box-shadow:0 0 4px 0 rgba(75,171,255,.38)}.pp-container .group-member-hovercard .arrow-down{width:0;height:0;border-left:9px solid transparent;border-right:9px solid transparent;border-top:8px solid #000;display:inline-block;right:10px}.pp-container .group-member-hovercard .arrow-up{width:0;height:0;border-left:9px solid transparent;border-right:9px solid transparent;border-bottom:8px solid #000}.pp-container .group-member-hovercard *,.pp-container .group-member-hovercard:after,.pp-container .group-member-hovercard:before{-webkit-box-sizing:content-box!important;-moz-box-sizing:content-box!important;box-sizing:content-box!important}.pp-container .group-member-hovercard textarea{-webkit-box-sizing:border-box!important;-moz-box-sizing:border-box!important;box-sizing:border-box!important}.pp-container .group-members{background-color:#FFF;box-shadow:0 0 10px rgba(0,0,0,.08);display:none;max-height:-moz-calc(100% - 48px);max-height:-webkit-calc(100% - 48px);max-height:calc(100% - 48px);opacity:0;overflow-y:auto;padding-bottom:10px;position:relative;right:0;width:100%}.pp-container .group-members-container{max-height:100%;width:320px;margin:0 auto}.pp-container .group-members .member{float:left;height:101px;margin-left:20px;margin-right:20px;padding-top:20px}.pp-container .group-members .pp-wrapper{position:relative}.pp-container .group-members img.pp-avatar{border-radius:50%;border:2px solid #3F65D6;cursor:pointer;height:60px;width:60px}.pp-container .group-members img.pp-state{bottom:5px;display:none;position:absolute;right:5px}.pp-container .group-members img.pp-state.pp-active{display:block}.pp-container .group-members .member .name{color:#888;font-size:14px;max-height:19px;max-width:60px;overflow:hidden;padding-top:5px;text-align:center;text-overflow:ellipsis}.pp-container .pp-group-member-hovercard-panel{display:none;z-index:2147483002;position:absolute}.pp-container .pp-conversation-part-error{color:red;display:block}.pp-container .pp-conversation-part-emoji-by-user{position:relative;top:0;font-size:12px;line-height:20px;color:#c9cbcf;margin-right:6px}.pp-container .pp-conversation-part-emoji-by-user .pp-emoji-container{text-align:right;margin-bottom:16px}.pp-container .pp-conversation-part-emoji-by-user .pp-emoji{display:block;font-size:96px;line-height:1.1;text-align:right}.pp-conversation-part-text-by-user-outer{text-align:right;margin-bottom:16px}.pp-conversation-part-text-by-user-outer .pp-wrapper{text-align:right}.pp-container .pp-conversation-part-text-by-user-timestamp-outer{position:relative;top:0;font-size:12px;line-height:20px;color:#c9cbcf;margin-right:6px}.pp-conversation-part-text-by-user-triangle{width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;position:relative;top:50%;float:right;margin-left:-1px;margin-top:10px}.pp-conversation-part-text-by-user-body-outer{border-radius:4px;border-width:1px;border-style:solid;position:relative;max-width:80%;display:inline-block;color:#fff;min-height:36px}.pp-container .pp-conversation-part-text-by-user-body{font-size:14px;font-weight:400;line-height:20px;padding:12px 17px;text-align:left;-moz-user-select:text;-webkit-user-select:text;-ms-user-select:text;white-space:pre-wrap}.pp-container .msg-audio-admin .pp-avatar{border-radius:50%;width:28px;height:28px;float:left;position:relative;overflow:hidden;clear:both}.pp-container .msg-audio-admin .pp-content{float:left;width:80%;margin-left:5px;margin-bottom:16px}.pp-container .msg-audio-admin .pp-name{color:#455A64;display:block;font-size:12px;text-align:left}.pp-container .msg-audio-admin .pp-voice{position:relative}.pp-container .msg-audio-admin .pp-body{border-color:#dadee2;border-radius:4px;border-width:1px;border-style:solid;cursor:pointer;position:relative;padding:10px;max-width:80%;display:inline-block;background-color:#fff;color:#455A64;top:3px}.pp-container .msg-audio-admin .pp-triangle{width:0;height:0;border-top:4px solid transparent;border-bottom:4px solid transparent;border-right:4px solid #dadee2;position:relative;float:left;margin-top:10px;margin-right:-1px;top:3px}.pp-container .msg-audio-admin i{width:23px;height:23px;vertical-align:middle;display:inline-block}.pp-container .msg-audio-admin .pp-dura{font-size:14px;margin-left:10px}.pp-container .msg-audio-admin .pp-unread{border-radius:50%;background-color:red;display:inline-block;width:7px;height:7px;margin-left:10px;margin-bottom:2px}.pp-container .msg-audio-admin .pp-desc{font-size:12px;margin-left:5px;display:block;margin-top:5px}#pp-container .msg-sms-email-admin{position:relative;padding:16px 20px 20px;border:1px solid #dadfe3;border-radius:5px;max-width:60%}#pp-container .msg-sms-email-title{position:relative;margin-bottom:5px;font-size:14px;line-height:24px;color:#606273;transition:opacity .3s 1s,max-height .4s 1s}#pp-container .msg-sms-email-options-container{height:30px;opacity:1;transition:opacity .3s .3s,height .4s 1s}#pp-container .msg-sms-email-options-container a{color:#a8b6c2;cursor:pointer;font-size:13px;line-height:20px}#pp-container .msg-sms-email-options-container a.msg-sms-email-options-container-active,#pp-container .msg-sms-email-options-container a:hover{color:#565867;border-bottom:1px solid}#pp-container .msg-sms-email-options-container a:first-child{margin-right:15px}#pp-container .msg-sms-email-input-container{position:relative;font-style:normal;display:-webkit-inline-box;display:-ms-inline-flexbox;margin-bottom:10px}#pp-container .msg-sms-email-input{max-width:100%;-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto}#pp-container .msg-sms-email-input input{box-sizing:border-box!important;height:40px;width:100%;padding:0 12px;font-size:14px;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;color:#565867;border-radius:4px 0 0 4px;border:1px solid #38a652;-webkit-appearance:none;transition:border .3s,color .4s .6s,padding .3s .6s,height .4s 1s}#pp-container .msg-sms-email-input input.msg-sms-email-input-success{opacity:.7;transition:none;height:20px;color:#a8b6c2;-webkit-text-fill-color:#a8b6c2;padding:0;border:1px solid #FAFAFA;background-color:#FAFAFA}#pp-container .msg-sms-email-input input:focus{outline:0}#pp-container .msg-sms-email-submit-container{cursor:pointer;width:40px;-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto}#pp-container .msg-sms-email-submit-button{width:40px;height:40px;border-radius:0 4px 4px 0;background-color:#38a652;box-shadow:0 1px 2px 0 rgba(0,0,0,.15);transition:border-radius .3s,opacity .3s .6s,height .4s 1s}#pp-container .msg-sms-email-submit-icon{width:40px;height:40px;background-position:50%;background-size:8px 13px;background-repeat:no-repeat;opacity:1;-webkit-transform:rotate(180deg);transform:rotate(180deg)}#pp-container .msg-sms-email-valid-icon{background-size:18px 14px;background-repeat:no-repeat;opacity:0;-webkit-transform:rotate(-90deg) scale(.5);transform:rotate(-90deg) scale(.5)}#pp-container .msg-sms-email-error{height:0;bottom:0;color:#fc576b;font-size:13px;line-height:10px}.pp-sheet-header .pp-sheet-header-team-profile{padding-left:60px;margin:5px 20px 5px 5px}.pp-sheet-header .pp-sheet-header-team-profile-container{border-radius:8px;cursor:pointer;padding:12.5px 0 0 28px;height:50px}.pp-sheet-header .pp-sheet-header-team-profile-avatar-container{display:inline-block;vertical-align:middle;white-space:nowrap;float:left;padding-right:10px}.pp-sheet-header .pp-sheet-header-team-profile-avatar{position:relative;display:inline-block;border-radius:100%}.pp-sheet-header .pp-sheet-header-team-profile-avatar img{width:32px;height:32px;margin-left:-18px;line-height:32px;border-radius:100%;border:2px solid #1F8CEB}.pp-sheet-header .pp-sheet-header-team-profile-body{height:50px;box-sizing:border-box;border-radius:8px}.pp-sheet-header .pp-sheet-header-team-profile-app-name{color:#fff;font-size:17px;line-height:1.1em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.pp-sheet-header .pp-sheet-header-team-profile-description{color:hsla(0,0%,100%,.8);font-size:13px;line-height:1.3em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.pp-sheet-header .pp-sheet-header-team-profile-full{padding:18px 0 30px;box-sizing:border-box}.pp-sheet-header .pp-sheet-header-team-profile-full-team-name{color:#fff;font-size:17px;line-height:1.1em;white-space:nowrap;text-align:center;width:60%;margin:0 auto;overflow:hidden;text-overflow:ellipsis}.pp-sheet-header .pp-sheet-header-team-profile-full-description{color:#fff;font-weight:700;font-size:13px;line-height:1.1em;width:60%;text-align:center;margin:0 auto;padding-top:2px}.pp-sheet-header .pp-sheet-header-team-profile-full-avatar-container{width:100%;text-align:center;padding-top:22px;padding-bottom:18px}.pp-sheet-header .pp-sheet-header-team-profile-full-avatar{border-radius:50%;line-height:50px;display:inline-block;vertical-align:middle;padding-left:10px;padding-right:10px}.pp-sheet-header .pp-sheet-header-team-profile-full-avatar-container img{border-radius:50%;cursor:pointer;display:inline-block;padding-left:10px;padding-right:10px;text-align:center;width:50px;height:50px}.pp-sheet-header .pp-sheet-header-team-profile-full-name{color:#fff;font-size:13px;width:100%;max-width:85px;text-align:center;padding-top:6px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.pp-sheet-header .pp-sheet-header-team-profile-full-hovercard-container{color:transparent;height:140px}@media (max-width:736px){.pp-messenger-panel,.pp-sheet-header{top:0;width:100%;border-left:1px solid #e7e7e7;right:0;border-radius:0}.pp-messenger-panel{bottom:0;background-color:#fff;z-index:2147483646}.pp-sheet-header{box-shadow:0 1px 2px 0 rgba(0,0,0,.08);background:#fff;position:fixed;border-bottom:1px solid #e7e7e7;z-index:2147483647}.pp-sheet-header-button{position:relative;margin:0;height:48px;width:48px;float:right}.pp-sheet-header-button-icon{background-size:13px 13px;background-repeat:no-repeat;width:16px;height:100%;background-position:center center;margin:auto}.pp-sheet-header .pp-header-buttons-close{display:block}.pp-conversation-part-welcome-outer-2{border-top:0;padding:0 20px 20px;border-image:initial}.pp-emoji-icon{font-family:AppleColorEmoji;margin:6px;width:30px;line-height:30px;display:inline-table;cursor:pointer;text-align:center;font-size:21px}.pp-composer-container{border-radius:0;width:100%;background:0 0;position:fixed;bottom:0;right:0}.pp-container .pp-composer-container-textarea{border-radius:0}.pp-no-conversations-icon{background-color:#fff}.pp-powered-by{display:none}.pp-conversation-content{bottom:49px}.pp-composer{max-width:100%}}@media (max-width:480px){.pp-emoji-selector{max-width:280px;width:100%;height:175px}.pp-emoji-selector-content{max-width:270px;width:100%;height:130px}.pp-emoji-selector-panel-header{max-width:280px;width:100%}.pp-emoji-selector-sibling{height:177px}}");
    }
    extend(CssStyle, View.PPElement);

    View.CssStyle = CssStyle;
    
})(View));

((function(View) {

    /**
     * @constructor
     */
    function PPDiv(attrs, ctrl) {
        View.PPElement.call(this, 'div', attrs, ctrl);
    }
    extend(PPDiv, View.PPElement);

    View.PPDiv = PPDiv;
    View.Div = PPDiv;
    
})(View));

((function(View) {
    
    function Span(attrs, ctrl) {
        View.PPElement.call(this, 'span', attrs, ctrl);
    }
    extend(Span, View.PPElement);

    View.Span = Span;
    
})(View));

((function(View) {
    
    function P(attrs, ctrl) {
        View.PPElement.call(this, 'p', attrs, ctrl);
    }
    extend(P, View.PPElement);

    View.P = P;
    
})(View));

((function(View) {
    
    function Img(attrs, ctrl) {
        View.PPElement.call(this, 'img', attrs, ctrl);
    }
    extend(Img, View.PPElement);

    View.Img = Img;
    
})(View));

View.$sheetHeader = (function() {

    /**
     * @constructor
     */
    function PPSheetHeader() {
        
        var ctrl = Ctrl.$sheetheader,
            PPDiv = View.PPDiv,
            Div = PPDiv,
            PPElement = View.PPElement,

            iconBack = Configuration.assets_path + 'img/icon-back.png',
            iconClose = Configuration.assets_path + 'img/close.png',

            buildHeaderContent = function() {
                return new PPDiv( { className: 'pp-sheet-header-title-container', 
                                    style: 'background-color:' + View.Style.Color.main_color })
                    .add( buildTeamProfile( [
                        { user_avatar: Configuration.assets_path + 'img/avatar_1.jpg' },
                        { user_avatar: Configuration.assets_path + 'img/avatar_2.jpg' },
                        { user_avatar: Configuration.assets_path + 'img/avatar_3.jpg' }
                    ] ) )
                    .add( buildTeamProfileFull( [
                        { user_avatar: Configuration.assets_path + 'img/avatar_1.jpg', user_fullname: 'Tom', user_uuid: '7e2c6cd2-d08f-11e6-afb1-74de2b58a3a8' },
                        { user_avatar: Configuration.assets_path + 'img/avatar_2.jpg', user_fullname: 'Jak', user_uuid: 'A' },
                        { user_avatar: Configuration.assets_path + 'img/avatar_3.jpg', user_fullname: 'Emma', user_uuid: 'B' }
                    ] ) )
                    .add( buildHeaderBody() );
            },

            buildConversationsButton = function() {
                return new PPDiv({
                    'class': 'pp-sheet-conversations-button',
                    style: 'background-image:url(' + iconBack + ')'
                }).add(new PPDiv({
                    'class': 'pp-header-buttons-back-contents',
                })).add(new PPDiv({
                    'class': 'pp-unread-count pp-font pp-box-sizing'
                }));
            },

            buildHeaderBody = function() {
                return new PPDiv('pp-sheet-header-body')
                    .add(new PPDiv('pp-sheet-header-title').text('Conversations'))
                    .add(new PPDiv('pp-sheet-header-app-name').text('PPMessage'));
            },

            buildCloseButton = function() {
                return new PPDiv({
                    'class':'pp-header-buttons-close',
                    style: 'background-image:url(' + iconClose + ')'
                }).add(new PPDiv({
                    'class': 'pp-header-buttons-close-contents'
                }))
            },

            buildTeamAvatars = function( users ) {
                users = users || [];
                
                var parent = new Div( teamProfileClassPrefix + '-avatar-container' ),
                    MAX = 3, 
                    i = 0;

                while ( i < MAX && i < users.length ) {
                    var user = users[ i ];
                    parent.add( new Div( teamProfileClassPrefix + '-avatar'  )
                                .add( new View.Img( { src: user.user_avatar  } ) ));
                    i++;
                }
                    
                return parent;
            },

            buildTeamProfileFullAvatars = function( users ) {
                users = users || [];
                var parent = new Div( teamProfileFullClassPrefix + '-avatar-container' ),
                    MAX = 3,
                    i = 0;

                while ( i < MAX && i < users.length ) {
                    var user = users[ i ];
                    parent.add( new Div( teamProfileFullClassPrefix + '-avatar' )
                              .add( new View.Img( { src: user.user_avatar, user_uuid: user.user_uuid } ) )
                              .add( new View.Div( teamProfileFullClassPrefix + '-name' ).text( user.user_fullname ) ) );
                    i++;
                }

                return parent;
            },

            buildTeamProfile = function( users ) {
                return new Div( teamProfileClassPrefix )
                    .add( new Div( { className: teamProfileClassPrefix + '-container', 
                                     selector: '.' + teamProfileClassPrefix + '-container',
                                     event: { 
                                         click: showTeamProfileFull
                                     } }  )
                          .add( buildTeamAvatars( users )  )
                          .add( new Div( teamProfileClassPrefix + '-body' )
                                .add( new View.P( teamProfileClassPrefix + '-app-name'  ) )
                                .add( new View.P( teamProfileClassPrefix + '-description' ).text( 'Typically replies in under 30m' ) )));
            },

            buildTeamProfileFull = function( users ) {
                return new Div( teamProfileFullClassPrefix )
                    .add( new Div( teamProfileFullClassPrefix + '-team-name' ).text( 'PPMessage' ) )
                    .add( new Div( teamProfileFullClassPrefix + '-description' ).text( 'Typically replies in under 30m' ) )
                    .add( buildTeamProfileFullAvatars( users ) );
            },

            buildSheetHeaderEvent = function() {
                $('#' + id).bind('click', ctrl.onSheetHeaderClicked);
            },

            buildConversationsButtonEvent = function() {
                var selector = '#pp-container .pp-header-buttons-back-contents';
                $(selector)
                    .bind('click', function() {
                        Ctrl.$conversationList.show();
                        showHeaderBody();
                    });
            },

            buildCloseButtonEvent = function() {
                var selector = '#pp-container .pp-header-buttons-close';
                $(selector).bind( 'click', function() {
                    Ctrl.$sheetheader.minimize();
                } );
            },

            buildUnreadButtonEvent = function() {
                var selector = '.pp-sheet-conversations-button .pp-unread-count';
                $ ( selector )
                    .bind('mouseover', function () {
                        $ ( groupButtonIconSelector ).mouseover();
                    })
                    .bind('mouseleave', function () {
                        $ ( groupButtonIconSelector ).mouseleave();
                    })
                    .bind('click', function () {
                        $ ( groupButtonIconSelector ).click();
                    });
            };
        
        PPDiv.call(this, {
            id: id,
            'class': id + ' pp-box-sizing pp-unselectable'
        }, ctrl);

        // Build HTML
        this.add(buildHeaderContent())
            .add(buildConversationsButton())
            .add(buildCloseButton());

        // Bind event
        $timeout(function() {
            ctrl.onSheetHeaderInit();
            buildSheetHeaderEvent();
            buildConversationsButtonEvent();
            buildCloseButtonEvent();
            buildUnreadButtonEvent();
        });
    }
    extend(PPSheetHeader, View.PPDiv);

    var id = 'pp-sheet-header',
        classPrefix = 'pp-sheet-header-',
        teamProfileClassPrefix = classPrefix + 'team-profile',
        teamProfileFullClassPrefix = teamProfileClassPrefix + '-full',
        titleSelector = '.pp-sheet-header-app-name',
        unreadCountSelector = '.pp-unread-count',
        groupButtonSelector = '.pp-sheet-conversations-button',
        groupButtonIconSelector = groupButtonSelector + ' .pp-sheet-header-button-icon',
        titleSelector = '.pp-sheet-header .title-container',

        teamProfileFullShowing = false,
        TEAM_PROFILE_FULL_HEIGHT = 100,
        TEAM_PROFILE_FULL_ANIM_DURATION = 200, // duration in millseconds

        isMouseoverImg = false,
        REMOVE_GROUP_MEMBER_HOVERCARD_EVENT_ID = 'rm-group-member-hovercard',
        mEventToken = REMOVE_GROUP_MEMBER_HOVERCARD_EVENT_ID,

        build = function() {
            return new PPSheetHeader();
        },

        // unreadCount > 0, show unread number
        // unreadCount <= 0, hide unread number
        setUnreadCount = function(unreadCount) {
            if (unreadCount > 0) {
                $(unreadCountSelector).show().text(unreadCount);
            } else {
                $(unreadCountSelector).hide();
            }
        },

        showGroupButton = function() {
            $(groupButtonSelector).show();
        },

        hideGroupButton = function() {
            $(groupButtonSelector).hide();
        },

        setTitle = function(title) {
            $( titleSelector ).text( title );
            $( '.' + classPrefix + 'team-profile-app-name' ).text( title );
        };

    ///////// API //////////////
    return {
        build: build,

        height: height,

        setUnreadCount: setUnreadCount,
        showGroupButton: showGroupButton,
        hideGroupButton: hideGroupButton,

        showDropDownButton: showGroupMembersDropDownButton,
        hideDropDownButton: hideGroupMembersDropDownButton,
        changeDropDownButtonToHideState: changeGroupMembersDropDownButtonToHideState,
        changeDropDownButtonToShowState: changeGroupMembersDropDownButtonToShowState,

        setTitle: setTitle,

        showHeaderBody: showHeaderBody,
        showTeamProfile: showTeamProfile,
        isShowingTeamProfileFull: isShowingTeamProfileFull,
        showTeamProfileFull: showTeamProfileFull,
        hideTeamProfileFull: hideTeamProfileFull
    }

    ////////// Implementation /////

    function showGroupMembersDropDownButton () {

        if ( Service.$sheetHeader.isShowDropDownButton() ) return;
        
        Service.$sheetHeader.showDropDownButton( true ); // update state
        
        var $el = $( titleSelector );
        
        $el.append( new View.Element( 'i', {
            className: 'down-icon',
            style: 'background: url(' + Configuration.assets_path + 'img/icon-down.png) 0 -795px'
        } ).getHTML() )
            .addClass( 'clickable' )
            .on( 'click', function() {

                var $groupMembers = Ctrl.$groupMembers;

                if ( $groupMembers.isShow() ) {
                    changeGroupMembersDropDownButtonToHideState();
                    $groupMembers.hide();
                } else {
                    changeGroupMembersDropDownButtonToShowState();
                    $groupMembers.show();
                }
                
            } );
        
    }

    function hideGroupMembersDropDownButton () {

        Service.$sheetHeader.showDropDownButton( false ); // update state
        
        var $el = $( titleSelector );

        // remove drop-down button
        $el.find( 'i' ).detach();

        $el.removeClass( 'clickable' );
        $el.off( 'click' );
        
    }

    function changeGroupMembersDropDownButtonToHideState() {
        $( titleSelector ).find( 'i' )
            .attr( 'style', 'background: url(' + Configuration.assets_path + 'img/icon-down.png) 0 -795px' );
    }
    
    function changeGroupMembersDropDownButtonToShowState() {
        $( titleSelector ).find( 'i' )
            .attr( 'style', 'background: url(' + Configuration.assets_path + 'img/icon-down.png) 0 -2362px' );
    }

    function height() {
        return $( '#' + id ).height();
    }

    function showHeaderBody() {
        hideTeamProfileFull( function() {
            hideTeamProfile();
            $( '.' + classPrefix + 'body' ).show();
        } );
    }

    function hideHeaderBody() {
        $( '.' + classPrefix + 'body' ).hide();
    }

    function showTeamProfile() {
        hideHeaderBody();
        $( '.' + classPrefix + 'team-profile' ).show();
    }

    function hideTeamProfile() {
        $( '.' + classPrefix + 'team-profile' ).hide();
    }

    function isShowingTeamProfileFull() {
        return teamProfileFullShowing;
    }

    function showTeamProfileFull( config ) {
        if ( teamProfileFullShowing ) return;
        teamProfileFullShowing = true;

        hideTeamProfile();
        
        var $full = $( '.' + teamProfileFullClassPrefix ),
            $conversationList = $( '#pp-conversation-content' );

        $full.css( 'margin-top', -TEAM_PROFILE_FULL_HEIGHT ).show();
        $full.animate( { 'margin-top': "+=" + TEAM_PROFILE_FULL_HEIGHT }, TEAM_PROFILE_FULL_ANIM_DURATION );
        $conversationList.animate( { scrollTop: 0 }, 0 );
        $conversationList.animate( { 'top': "+=" + TEAM_PROFILE_FULL_HEIGHT }, TEAM_PROFILE_FULL_ANIM_DURATION );
        $( '#' + id ).animate({ height: "+=" + TEAM_PROFILE_FULL_HEIGHT }, TEAM_PROFILE_FULL_ANIM_DURATION );
        
        _bindEvent( [
            { user_avatar: Configuration.assets_path + 'img/avatar_1.jpg', user_fullname: 'Tom', user_uuid: '7e2c6cd2-d08f-11e6-afb1-74de2b58a3a8' },
            { user_avatar: Configuration.assets_path + 'img/avatar_2.jpg', user_fullname: 'Jak', user_uuid: 'A' },
            { user_avatar: Configuration.assets_path + 'img/avatar_3.jpg', user_fullname: 'Emma', user_uuid: 'B' }
        ] );
    }

    function hideTeamProfileFull( callback ) {
        if ( !teamProfileFullShowing ) {
            callback && callback();
            return;
        }
        teamProfileFullShowing = false;

        var $full = $( '.' + teamProfileFullClassPrefix );
        $full.animate( { 'margin-top': "-=" + TEAM_PROFILE_FULL_HEIGHT }, TEAM_PROFILE_FULL_ANIM_DURATION );
        $( '#pp-conversation-content' ).animate( { 'top': "-=" + TEAM_PROFILE_FULL_HEIGHT }, TEAM_PROFILE_FULL_ANIM_DURATION );
        $( '#' + id ).animate({ height: "-=" + TEAM_PROFILE_FULL_HEIGHT }, TEAM_PROFILE_FULL_ANIM_DURATION, _completed );

        function _completed() {
            $( '.' + teamProfileFullClassPrefix ).hide();
            showTeamProfile();
            callback && callback();
        }
    }

    function _bindEvent( users ) {
        if ( Service.$device.isMobileBrowser() ) {
            _bindMobileEvent( users );
        } else {
            _bindPCEvent( users );
        }
    }

    function _bindMobileEvent( users ) {
        $( '.' + teamProfileFullClassPrefix + '-avatar img' )
            .on( 'click', function ( e ) {
                
                var userId = $( this ).attr( 'user_uuid' );

                View.$loading.show();
                Ctrl.$groupMembers.hide();
                Ctrl.$groupMembers.onMemberClicked( userId, function() {
                    View.$loading.hide();
                } );
                
            } );
    }

    function _bindPCEvent( users ) {
        $( '.' + teamProfileFullClassPrefix + '-avatar img' )
            .bind( 'mouseover', function( e ) {
                e.stopImmediatePropagation();

                isMouseoverImg = true;
                Service.$task.cancel( mEventToken );

                var user = _findUser( users, $( this ).attr( 'user_uuid' ) );
                
                View.$groupMemberHovercard.remove();
                View.$groupMemberHovercard.show( user, { e: e, el: $( this ) } );
            } )
            .bind( 'mouseleave', function( e ) {
                isMouseoverImg = false;
            } );

        $( '#' + teamProfileFullClassPrefix )
            .bind( 'click', function ( e ) {
                !isMouseoverImg && View.$groupMemberHovercard.remove();
            } )
            .bind( 'mouseover', function ( e ) {
                if ( View.$groupMemberHovercard.isShow() && !View.$groupMemberHovercard.isMouseover() ) {
                    
                    Service.$task.plan( mEventToken , function() {
                        !isMouseoverImg &&
                            !View.$groupMemberHovercard.isMouseover() &&
                            View.$groupMemberHovercard.remove();
                    } );
                    
                }
                
            } );
    }

    function _findUser( users, userId ) {

        var user;
        $.each( users, function( index, item ) {
            if ( userId === item.user_uuid ) {
                user = item;
            }
        } );

        return user;
        
    }
    
})();

View.$groupContent = (function() {

    function GroupContent () {
        View.PPDiv.call(this, {
            'class': elementClass
        });

        // on new message arrived
        // change this group state to unread
        Service.$pubsub.subscribe('msgArrived/group', function(topics, ppMessage) {

            var groupId = ppMessage.getBody().conversation.uuid,
                $groupContentItemView = View.$groupContentItem;
            
            $groupContentItemView.showUnread(
                groupId,
                Modal.$conversationContentGroup
                    .get( groupId )
                    .unreadCount());

            // update each group item's description when new message arrived
            $groupContentItemView.description( groupId, ppMessage.getMessageSummary() );
            $groupContentItemView.timestamp( groupId, new timeago().format( ppMessage.getBody().messageTimestamp * 1000 ) );
            
        });
    }
    extend(GroupContent, View.PPDiv);

    var elementClass = 'pp-group-content-container',
        elSelector = '.' + elementClass,

        show = function() {
            $(elSelector).show();
            return this;
        },

        hide = function() {
            $(elSelector).hide();
            return this;
        },

        update = function(groupInfo) {
            $( elSelector ).empty();
            var html = '';
            $.each(groupInfo, function(index, item) {                
                html += View.$groupContentItem.build(item).getHTML();
            });
            $(elSelector).append(html);
            return this;
        },

        empty = function() {
            return $(elSelector).is(':empty');
        },

        visible = function () {
            return $(elSelector).is(':visible');
        },

        build = function() {
            return new GroupContent();
        };

    ////////// API ///////////////
    
    return {
        build: build,

        show: show,
        hide: hide,
        update: update,
        focus: focus,
        empty: empty,
        visible: visible
    }
    
})();

View.$groupContentItem = (function() {

    var userIcon = Configuration.assets_path + 'img/icon-user-conversation.png',
        userIconStyle = 'background-image:url(' + userIcon + ')';

    function Item(data) {
        View.PPDiv.call(this, {
            'class': 'pp-group-item',
            group_uuid: data.uuid
        });

        var groupName = data.name,
            timeStamp = '',
            groupID = data.uuid,
            icon = data.icon,
            summary = data.summary;

            buildAvatar = function() {
                return new View.Img( {
                    src: icon
                } );
            },
            
            buildBody = function() {
                return new View.PPDiv({ className: 'pp-group-item-body' })
                    .add(new View.PPDiv({ className: 'pp-group-item-meta' })
                         .add(new View.PPDiv({ className: 'pp-group-item-body-author' }).text( groupName ))
                         .add(new View.PPDiv({ className: 'pp-group-item-body-timestamp' }).text( timeStamp ))
                         .add(new View.PPDiv({ className: 'pp-group-item-body-unread-dot' })))
                    .add(new View.PPDiv({ className: 'pp-group-item-content' })
                         .add(new View.PPDiv({ className: 'pp-group-item-content-container' })
                              .add(new View.PPDiv({ className: 'pp-group-item-content-text' }).text( summary )))
                         .add(new View.Div({ className: 'pp-group-item-body-user-icon', style: userIconStyle })));
            },

            buildEvent = function() {
                var $e = findItem(groupID);
                
                $e.click('click', function() {
                    Ctrl.$conversationList.showItem( groupID );
                });
                
            };

        // Build HTML
        this.add(buildAvatar())
            .add(buildBody());

        // Build Event
        $timeout(buildEvent);

    }
    extend(Item, View.PPDiv);
    
    var clsSummary = 'pp-group-item-content-text',
        clsSummarySelector = '.' + clsSummary,
        classPrefix = 'pp-group-item-body',

        findItem = function(groupUUID) {
            return $('.pp-group-content-container')
                .find('div[group_uuid=' + groupUUID +']');
        },

        // @param groupUUID
        // @param unread > 0 --> show blue circle
        showUnread = function(groupUUID, unread) {
            if ( unread > 0 ) {
                var $item = findItem(groupUUID);
                $item.find('.' + classPrefix + '-unread-dot').show();
                $item.find('.' + classPrefix + '-timestamp').css( {
                    color: View.Style.Color.main_color,
                    'font-weight': 'bold'
                } );
            }
        },

        hideUnread = function(groupUUID) {
            var $item = findItem(groupUUID);
            $item.find( '.' + classPrefix + '-unread-dot').hide();
            $item.find('.' + classPrefix + '-timestamp').css( {
                color: '',
                'font-weight': ''
            } );
        },

        findGroupItemImg = function ( groupUUID ) {
            return $( '.pp-group-content-container div[group_uuid=' + groupUUID + '] img' );
        },

        groupIcon = function ( groupUUID, user ) {

            if ( groupUUID && user ) {
                
                findGroupItemImg ( groupUUID )
                    .attr( 'src', user.user_avatar )
                    .attr( 'user_uuid', user.user_uuid );
                
            } else {
                return findGroupItemImg ( groupUUID )
                    .attr( 'src' );
            }
            
        },

        build = function(data) {
            return new Item(data);
        };

    return {
        build: build,

        showUnread: showUnread,
        hideUnread: hideUnread,

        // act as setter and getter
        groupIcon: groupIcon,

        // act as setter
        description: description,
        timestamp: timestamp
    }

    function description( token, desc ) {
        findItem( token ).find( clsSummarySelector ).text( desc );
    }

    function timestamp( token, timeago ) {
        findItem( token ).find( '.' + classPrefix + '-timestamp' ).text( timeago );
    }
    
})();

View.$groupMembers = (function() {

    var parentSelector = '#pp-conversation-container',
        groupMembersSelector = '.pp-container .group-members',
        groupMembersContainerSelector = '.pp-container .group-members-container',
        groupMembersSelectorAvatars = groupMembersSelector + ' img.pp-avatar',

        ANIMATE_DURATION = 250,
        showDuration = ANIMATE_DURATION,

        isMouseoverImg = false,
        REMOVE_GROUP_MEMBER_HOVERCARD_EVENT_ID = 'rm-group-member-hovercard',
        mEventToken = REMOVE_GROUP_MEMBER_HOVERCARD_EVENT_ID;

    ///////// API ///////////
    return {
        build: build,

        isShow: isShow,
        show: show,
        hide: hide,
        opacity: opacity,
        scrollbarWidth: scrollbarWidth,

        _show: _show, // FOR DEBUG
    }

    ///////// Implementation ////////
    function show( groupId ) {

        Service.$conversation.asyncGetUser( groupId, function( userList ) {
            _show( userList );
        } );
        
    }

    function _show( userList ) {
        var users = userList || [],
            html = '';
        
        // we build one if not exist
        if ( !( $( parentSelector ).find( '.group-members' ).length) ) build();

        $( groupMembersContainerSelector ).empty();
        $.each( users, function ( index, item ) {
            html += View.$groupMember.build( item ).getHTML();
        } );
        $( groupMembersContainerSelector ).append( html );

        // show with animation
        $( groupMembersSelector )
            .show()
            .animate( {
                opacity: 1.0,
                top: 48
            } , showDuration );

        // bind event
        bindEvent( users );
    }

    // @param groupId
    // @animate default is true
    function hide( groupId, animate ) {

        var $el = $( groupMembersSelector ),
            anim = ( typeof animate === 'boolean' ) ? animate : true,
            innerHide = function() {
                $el.hide();
                $( groupMembersContainerSelector ).empty();
                View.$groupMemberHovercard.remove();
            };
        
        if ( anim ) {
            $el.animate( {
                opacity: .0,
                top: 0
            }, showDuration, innerHide );
        } else {
            innerHide();
        }

    }

    function isShow() {
        var $el = $( groupMembersSelector );
        return $el.length !== 0 && $el.is( ':visible' );
    }

    function opacity( val ) {
        $( groupMembersSelector ).css( 'opacity', val );
    }

    // @return vertical scrollbar width
    function scrollbarWidth() {
        var hasScrollbar = $( groupMembersSelector ).height()
            + View.$sheetHeader.height()
            + Service.$tools.scrollbarWidth >= window.innerHeight;
        return hasScrollbar ? Service.$tools.scrollbarWidth : 0;
    }

    function build() {
        $( parentSelector ).append( buildContainer().getHTML() );
    }

    function bindEvent( users ) {
        if ( Service.$device.isMobileBrowser() ) {
            bindMobileEvent( users );
        } else {
            bindPCEvent( users );
        }
    }

    function bindMobileEvent( users ) {
        $( groupMembersSelectorAvatars )
            .on( 'click', function ( e ) {
                
                var userId = $( this ).attr( 'user_uuid' );

                View.$loading.show();
                Ctrl.$groupMembers.hide();
                Ctrl.$groupMembers.onMemberClicked( userId, function() {
                    View.$loading.hide();
                } );
                
            } );
    }

    function bindPCEvent( users ) {
        // bind `mouseover` event or `mouseleave` event
        $( groupMembersSelectorAvatars )
            .bind( 'mouseover', function ( e ) {
                e.stopImmediatePropagation();

                isMouseoverImg = true;
                Service.$task.cancel( mEventToken );

                var user = findUser( users, $( this ).attr( 'user_uuid' ) );
                View.$groupMemberHovercard.remove();
                View.$groupMemberHovercard.show( user, { e: e, el: $( this ) } );
            } )
            .bind( 'mouseleave', function ( e ) {
                isMouseoverImg = false;
            });

        $( groupMembersSelector )
            .bind( 'click', function ( e ) {
                !isMouseoverImg && View.$groupMemberHovercard.remove();
            } )
            .bind( 'mouseover', function ( e ) {
                if ( View.$groupMemberHovercard.isShow() && !View.$groupMemberHovercard.isMouseover() ) {
                    
                    Service.$task.plan( mEventToken , function() {
                        !isMouseoverImg &&
                            !View.$groupMemberHovercard.isMouseover() &&
                            View.$groupMemberHovercard.remove();
                    } );
                    
                }
                
            } );        
    }

    function buildContainer () {
        
        return new View.Div( {
            className: 'group-members'
        } )
            .add(new View.Div( {
                className: 'group-members-container'
            } ));
        
    }

    function findUser( users, userId ) {

        var user;
        $.each( users, function( index, item ) {
            if ( userId === item.user_uuid ) {
                user = item;
            }
        } );

        return user;
        
    }
    
})();

View.$groupMember = (function() {

    var groupMembersSelector = '.pp-container .group-members',
        mobileOnlineIcon = Configuration.assets_path + 'img/state_mobile_online.png';
    
    return {
        build: build
    }

    /////// Implementation ////////

    function build( user ) {

        var container = new View.PPDiv( {
            className : 'member'
        } );

        container.add( buildAvatar( user ) );
        container.add( buildName( user ) );

        return container;
        
    }

    function buildAvatar( user ) {

        var container = new View.Div( { className: 'pp-wrapper' } ),
            isOnline = user.is_online;

        container.add( new View.Img( {
            
            className: 'pp-avatar' +
                ( isOnline ? '' : ' grayscale' ), // if not online, apply `gray style` to the user avatar, `grayscale` not support `IE 10+`
            
            src: user.user_avatar,
            user_uuid: user.user_uuid } ) );

        if ( isOnline ) {
            if ( user.is_mobile_online ) {
                container.add( new View.Img( { className: 'pp-state pp-active', src: mobileOnlineIcon } ) );    
            } else if ( user.is_mobile_online ) {
                // add pc online icon
            }
        }

        return container;
    }

    function buildName( user ) {
        return new View.Div( {
            className: 'name'
        } ).text( user.user_fullname );
    }

    function imgSelector( user ) {
        return groupMembersSelector + ' img[user_uuid=' + user.user_uuid + ']';
    }
    
} )();

View.$groupMemberHovercard = (function() {

    var globalSelector = '.pp-container',
        parentSelector = '#pp-group-member-hovercard-panel',
        hovercardClassName = 'group-member-hovercard',
        elSelector = globalSelector + ' .' + hovercardClassName,
        textareaElSelector = elSelector + ' textarea',
        bodyElSelector = elSelector + ' .body',
        textareaContainerElSelector = elSelector + ' .textarea-container',

        HOVERCARD_HEIGHT = 156, // default hovercard height
        HOVERCARD_TOP_OFFSET = 25,
        IMG_WIDTH = 70, // width of `img`

        mouseover = false; // mouse `over` or `leave` on current hovercard ? 

    /////// API ////////////
    
    return {
        show: show,
        remove: remove,
        isShow: isShow,
        isMouseover: isMouseover
    }

    // @param user:
    // {
    //     user_fullname: xxx,
    //     user_uuid: xxx,
    //     user_signature: xxx,
    //     user_avatar: xxxxxx
    // }
    // @param config:
    // {
    //     e: `mouseevent`,
    //     el: `jQuery element`
    // }
    function show( user, config ) {
        View.$groupMemberHovercardPanel.show();

        var position = calcHovercardPosition( config );
        
        $( parentSelector ).append( build( user, position ).getHTML() );

        // bind event on show
        bindHovercardEvent( user, position );
    }

    function remove() {
        isShow() && $( elSelector ).detach();
        unbindHovercardEvent();
        mouseover = false;
        View.$groupMemberHovercardPanel.hide();
    }

    function isShow() {
        return $( elSelector ).length > 0;
    }

    // GroupMemberHovercard.Views
    ////////////////////////////

    function build( memberInfo, position ) {
        
        var hoverCard = new GroupMemberHovercard( memberInfo, position );
        hoverCard
            .add( buildBody( memberInfo ) )
            .add( buildTextarea( memberInfo ) )
            .add( buildPseudoStyle( position.arrowRight ) );

        bindHovercardEvent( memberInfo, position );

        return hoverCard;
    }

    function buildBody( memberInfo ) {
        return new View.Div({
            className: 'body'
        })
            .add( buildUserAvatar( memberInfo ) )
            .add( buildUserInfo( memberInfo ) );
    }

    function buildUserAvatar( memberInfo ) {

        var avatar = memberInfo.user_avatar;

        return new View.Div({
            className: 'img-container'
        }).add(new View.Img({
            src: avatar
        }));
        
    }

    function buildUserInfo( memberInfo ) {

        var name = memberInfo.user_fullname,
            signature = memberInfo.user_signature;

        return new View.Div({
            className: 'info'
        }).add(new View.Div({
            className: 'name'
        }).text( name ))
            .add(new View.Div({
                className: 'signature'
            }).text( signature ));
        
    }

    function buildTextarea( memberInfo ) {
        var placeHolder = Service.Constants.i18n('HOVER_CARD_TEXTAREA_HINT');

        return new View.Div({
            className: 'textarea-container'
        }).add(new View.Element('textarea', {
            placeholder: placeHolder
        }));
    }

    //GroupMemberHovercard.Views.CssStyle
    /////////////////////////////////////

    // @param right: arrow right margin, 'number' type
    function buildPseudoStyle( right ) {
        var style = new View.Element('style', {
            type: 'text/css',
            className: hovercardClassName + '-style'
        });

        style.text( getArrowUpStyle( right ) );

        return style;
    }

    function getArrowUpStyle ( right ) {
        return '.pp-container .group-member-hovercard:after, .pp-container .group-member-hovercard:before{' +
            'top: -16px;' + 
            'right: ' + right + 'px;' + 
            'border: solid transparent;content: " ";height: 0;width: 0;position: absolute;pointer-events: none;}' + 
            '.pp-container .group-member-hovercard:before {border-color: rgba(204,204,204,0);border-bottom-color: rgba(0,0,0,0.07);border-width: 9px;margin-left: -5px;top: -18px;}' + 
            '.pp-container .group-member-hovercard:after {border-color: rgba(250,250,251,0);border-bottom-color: #fff;border-width: 9px;margin-left: -6px;}';
    }

    //GroupMemberHovercard.Position
    ////////////////////////////////
    
    // @param `config` {
    //     e: `mouseevent`,
    //     el: `jQuery element`
    // }
    //
    // @return {
    //     top: hovercard top margin relative to the window top edge
    //     arrowRight: arrow right margin relative to the window right edge
    // }
    function calcHovercardPosition( config ) {

        var upEdgeDistance = config.el.offset().top - $( window ).scrollTop(),
            hovercardOffsetY = HOVERCARD_TOP_OFFSET;

        return {
            top: upEdgeDistance + hovercardOffsetY,
            arrowRight: calcArrowRight( config.e )
        };
        
    }

    function calcArrowRight( mouseEvent ) {
        var HALF_IMG_WIDTH = IMG_WIDTH / 2,

            // @see http://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y
            // `screenX` and `screenY`: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.
            // `clientX` and `clientY`: Relative to the upper left edge of the content area (the viewport) of the browser window. This point does not move even if the user moves a scrollbar from within the browser.
            marginRight = $( window ).width() - mouseEvent.clientX - IMG_WIDTH,
            fix = HALF_IMG_WIDTH - mouseEvent.offsetX;

        // number `5` is a magic number that let `hovercard` a little closer from right
        return marginRight - fix - 20;
    }

    //GroupMemberHovercard.Event
    ////////////////////////////
    function bindHovercardEvent( memberInfo, position ) {

        $( textareaElSelector )
            .on( 'focus', function( e ) {
                // `onMemberClicked` event will break the transition animation
                // so must make `onMemberClicked` triggerd after the animation transition completed
                smoothTransitionToMessagePanel( position, function() {
                    Ctrl.$groupMembers.onMemberClicked( memberInfo.user_uuid );    
                } );
            } );

        $( elSelector )
            .on( 'mouseover', function ( e ) {
                mouseover = true;                
            } )
            .on( 'mouseleave', function ( e ) {
                mouseover = false;
            } );
        
    }

    function unbindHovercardEvent() {
        $( textareaElSelector ).off( 'focus' );
        $( elSelector ).off( 'mouseover' ).off( 'mouseleave' );
    }

    function smoothTransitionToMessagePanel( position, completeCallback ) {

        var textareaHeight = 46,
            fixTextareaPaddingBottom = 0,
            textareaTargetHeight = 40,
            textareaTargetMargin = 0,
            bodyHeight = 100,
            messagePanelWidth = 368,
            duration = 300,
            sheetHeaderHeight = 0,
            windowHeight = $( '#pp-conversation' ).height(),
            hovercardTargetHeight = windowHeight - sheetHeaderHeight,
            marginTop = ( $( elSelector ).offset().top - sheetHeaderHeight - $( window ).scrollTop() ) +
            ( windowHeight - ( $( textareaElSelector ).offset().top - $( window ).scrollTop() ) ) -
            ( bodyHeight - textareaHeight ) -
            fixTextareaPaddingBottom;

        $( elSelector )
            .animate( {
                width: messagePanelWidth,
                height: hovercardTargetHeight,
                left: 0,
                top: sheetHeaderHeight
            }, duration );

        $( bodyElSelector )
            .animate( {
                opacity: .0
            }, duration );

        $( textareaElSelector )
            .animate( {
                height: textareaTargetHeight
            } );

        $( textareaContainerElSelector )
            .animate( {
                height: textareaTargetHeight,
                'margin-top': marginTop,
                'margin-left': textareaTargetMargin,
                'margin-right': textareaTargetMargin
            }, duration, function () {

                View.$groupMembers.opacity( .0 );
                
                $( elSelector ).animate( {
                    opacity: .0
                }, duration, function () {
                    
                    Ctrl.$groupMembers.hide( false );
                    View.$composerContainer.focus();

                    $onResult( undefined, completeCallback );
                    
                });
                
            });

    }

    function isMouseover() {
        return mouseover;
    }

    //GroupMemberHovercard
    ////////////////////////
    function GroupMemberHovercard( memberInfo, position ) {
        View.Div.call(this, {
            className: hovercardClassName,
            style: 'top:' + position.top + 'px'
        });
    }
    extend( GroupMemberHovercard, View.Div );
    
})();

View.$groupMemberHovercardPanel = (function() {

    var classPrefix = 'pp-group-member-hovercard-panel';

    function GroupMemberHovercardPanel() {
        View.Div.call(this, {
            id: classPrefix,
            'class': classPrefix + ' pp-box-sizing'
        });
    }
    extend(GroupMemberHovercardPanel, View.Div);

    return {
        build: build,

        show: show,
        hide: hide
    }

    function build() {
        return new GroupMemberHovercardPanel();
    }

    function show() {
        $( '#' + classPrefix ).show();
    }

    function hide() {
        $( '#' + classPrefix ).hide();
    }

}());

View.$loading = (function() {

    /**
     * @constructor
     */
    function PPLoading() {
        var PPDiv = View.PPDiv;
        
        PPDiv.call(this, {
            id: id,
            'class': id + ' pp-box-sizing'
        });

        this
            .add(new PPDiv({
                id: 'pp-loading-spinner',
                style: 'background-image:url(' + Configuration.assets_path + 'img/spinner.png)'
            }))
            .add( new View.P( { className: 'pp-loading-text' } ) );

    }
    extend(PPLoading, View.PPDiv);

    var id = 'pp-loading',
        elSelector = '#' + id,
        textSelector = '.pp-loading-text',

        show = function() {
            $(elSelector).fadeIn();
        },

        hide = function() {
            $(elSelector).fadeOut();
            $( textSelector ).hide().text( '' );
        },

        text = function( text ) {
            text && $( textSelector ).show().text( text );
        },

        build = function() {
            return new PPLoading();
        };

    return {
        build: build,

        show: show,
        hide: hide,
        text: text
    }
    
})();

View.$launcher = (function() {

    /**
     * @constructor
     */
    function PPLauncher() {
        var ctrl = Ctrl.$launcher.get(),
            showLauncher = ctrl.shouldShowLauncherWhenInit(),
            PPDiv = View.PPDiv;
        
        PPDiv.call(this, {
            id: 'pp-launcher',
            'class': 'pp-launcher'
        }, ctrl);
        
        var self = this;
        var launcherButtonImageCssStyle = 'background-image: url(' + NORMAL_BG + ');' + 'background-color:' + View.Style.Color.launcher_background_color;

        var bottomMargin = ctrl.getLauncherBottomMargin(),
            rightMargin = ctrl.getLauncherRightMargin(),
            style = 'bottom:' + bottomMargin + "; right:" + rightMargin;
        
        this.add(new PPDiv({
            id: 'pp-launcher-container',
            style: style,
            event: {
                init: function() {
                    ctrl.onLauncherInit();
                }
            }
        }, ctrl)
                 .add(new PPDiv('pp-launcher-button-container')
                      .add(new PPDiv({
                          id: 'pp-launcher-button',
                          'class': 'pp-launcher-button pp-unselectable',
                          style: launcherButtonImageCssStyle,
                          event: {
                              click: function() {
                                  self.controller.onClickEvent();
                              }
                          }
                      })))
                 .add(new PPDiv({
                     id: 'pp-launcher-badge',
                     'class':'pp-launcher-badge pp-font',
                     style: 'display:none'
                 }, ctrl))
                 .add(View.$launcherPreview.init().build())
                 .add(View.$hoverCard.build()))
            .show(showLauncher);
    }
    extend(PPLauncher, View.PPDiv);

    var selectorButton = '#pp-launcher-button',
        clsButtonMaximize = 'pp-launcher-button-maximize',
        clsButtonMinimize = 'pp-launcher-button-minimized',

        selectorButtonContainer = '#pp-launcher-button-container',
        clsButtonContainerActive = 'pp-launcher-button-container-active',
        clsButtonContainerInActive = 'pp-launcher-button-container-inactive',

        STATE = { NORMAL: 'normal', CLOSE: 'close' },
        NORMAL_BG = Configuration.assets_path + 'img/icon-newacquire.png',
        CLOSE_BG = Configuration.assets_path + 'img/close.png',
        state = STATE.NORMAL,

        getState = function() {
            return state;
        },

        build = function() {
            return new PPLauncher();
        },

        hideLauncher = function() {
            $( selectorButton ).removeClass( clsButtonMaximize ).addClass( clsButtonMinimize );
            $( selectorButtonContainer ).removeClass( clsButtonContainerActive ).addClass( clsButtonContainerInActive );
        },
        
        // state: View.$launcher.STATE
        showLauncher = function( _state ) {
            var $launcher = $( selectorButton );
            $launcher.removeClass( clsButtonMinimize ).addClass( clsButtonMaximize );
            $( selectorButtonContainer ).removeClass( clsButtonContainerInActive ).addClass( clsButtonContainerActive );

            state = _state;
            var bgURL = (state == STATE.NORMAL) ? NORMAL_BG : CLOSE_BG;
            $launcher.css( 'background-image', 'url(' + bgURL + ')' );
        },
        
        showMessageBox = function() {
            showLauncher( STATE.CLOSE );
            View.$launcherPreview.text( '' ).hide();
            $('#pp-messenger').show();
            View.$conversation.show();
            Ctrl.$hoverCard.get().hideHoverCardNow();
        };
    
    return {
        STATE: STATE,
        build: build,

        hideLauncher: hideLauncher,
        showLauncher: showLauncher,
        showMessageBox: showMessageBox,

        state: getState
    }
    
})();

((function(View) {

    /**
     * @constructor
     */
    function PPContainer() {
        var PPDiv = View.PPDiv;
        PPDiv.call(this, {
            id: 'pp-container',
            'class': 'pp-container pp-box-sizing pp-location'
        });

        this.add(new View.CssStyle())
            .add(View.$launcher.build())
            .add(new View.PPMessenger());
    }
    extend(PPContainer, View.PPDiv);

    View.PPContainer = PPContainer;
    
})(View));

View.$launcherPreview = (function() {

    var id = 'pp-launcher-preview',
        closeElId = 'pp-launcher-preview-close',
        previewBodyElId = 'pp-launcher-preview-outer-2',
        
        selector = '#' + id,
        previewTextEl = 'pp-launcher-preview-p',
        previewTextElCls = '.' + previewTextEl,

        self = {
            build: build,
            init: init,

            show: show,
            hide: hide,
            text: text    
        };

    ///////// API ////////////////
    
    return self;

    /////// Implementation ///////

    function init() {
        // on message arrived
        Service.$pubsub.subscribe( 'msgArrived/launcher', function( topics, ppMessage ) {
            if ( !Service.$device.inMobile() ) {
                self.show().text( ppMessage.getMessageSummary() );
            }
        });
        return self;
    }

    function build() {
        return new PPLauncherPreview();
    }

    function show() {
        $( selector ).show();
        return self;
    }

    function hide() {
        $( selector ).hide();
        return self;
    }

    function text(text) {
        $( previewTextElCls ).text(text);
        return self;
    }

    /**
     * @constructor
     */
    function PPLauncherPreview() {
        var PPDiv = View.Div;
        
        PPDiv.call(this, { id: id, style: 'display:none' } );

        this.add(new PPDiv('pp-launcher-preview-outer')
                 .add(new PPDiv({ id: previewBodyElId })
                      .add(new PPDiv('pp-launcher-preview-outer-3')
                           .add(new PPDiv({
                               id: closeElId,
                               style: 'background-image:url(' + Configuration.assets_path + 'img/icon-preview-close.png)'
                           }))
                           .add(new PPDiv('pp-launcher-preview-p-outer')
                                .add(new View.Span({
                                    className: previewTextEl
                                })))))
                 .add(new PPDiv('pp-launcher-preview-triangle')));

        // Build Event
        $timeout( buildEvent );

        function buildEvent() {

            var $close = $('#' + closeElId),
                $previewBody = $('#' + previewBodyElId);
            
            $previewBody
                .bind('mouseover', function() {
                    $close.show();
                })
                .bind('mouseleave', function() {
                    $close.hide();
                });

            $close
                .bind('click', function() {
                    hide();
                });
            
        }
    }
    extend(PPLauncherPreview, View.PPDiv);
    
})();

((function(View) {

    /**
     * @constructor
     */
    function PPMessenger() {
        View.PPDiv.call(this, {
            id: 'pp-messenger',
            style: 'display:none'
        }, null);

        this.add(new View.PPDiv('pp-messenger-box-container')
                 .add(View.$conversation.build()));
    }
    extend(PPMessenger, View.PPDiv);

    View.PPMessenger = PPMessenger;
    
})(View));

View.$conversation = (function() {

    var id = 'pp-conversation',
        selector = '#' + id,

        clsMaximize = 'pp-conversation-content-maximize',
        clsMinimize = 'pp-conversation-sheet-minimized';

    return {
        
        build: function() {
            return new PPConversation();
        },

        show: function() {
            $( selector ).removeClass( clsMinimize ).addClass( clsMaximize );
        },

        hide: function() {
            $( selector ).removeClass( clsMaximize ).addClass( clsMinimize );
        }
        
    }

    /**
     * @constructor
     */
    function PPConversation() {
        View.PPDiv.call(this, {
            id: id,
            style: 'background-color:' + View.Style.Color.base,
            'class': 'pp-messenger-panel pp-box-sizing'
        });
        
        this.add(View.$sheetHeader.build())
            .add(View.$groupContent.build())
            .add(View.$conversationContentContainer.build())
            .add(View.$loading.build())
            .add(View.$groupMemberHovercardPanel.build());
    }
    extend(PPConversation, View.PPDiv);
    
})();

//autoExpandHeight-TextArea
//see-->http://codepen.io/vsync/pen/frudD
View.$composerContainer = (function() {

    /**
     * @constructor
     */
    function PPComposerContainer() {
        var ctrl = Ctrl.$composerContainer.get();
        View.PPDiv.call(this, {
            id: containerId,
            style: 'background-color:' + View.Style.Color.base,
            'class': containerId + ' pp-box-sizing-borderbox pp-font'
        }, ctrl);
        
        var self = this;
        
        this.add(self.getUploadingWarningHtml(ctrl))
            .add(self.getComposerEmojiContainerHtml(ctrl))
            .add(new View.PPDiv({id: 'pp-composer'})
                 .add(self.getComposerSendButtonContainer(ctrl))
                 .add(self.getComposerFormContainerHtml(ctrl)));
        
        this.calcInputTextAreaRows();
    }
    extend(PPComposerContainer, View.PPDiv);

    /**
     * Uploading warning html code
     */
    PPComposerContainer.prototype.getUploadingWarningHtml = function(ctrl) {
        return new View.PPDiv('pp-composer-container-warning')
            .add(new View.PPElement('span', {
                id: 'pp-composer-container-warning-span',
                'class': 'pp-composer-container-warning-span pp-font'
            }))
            .show(false);
    };

    /**
     * emoji container html code
     */
    PPComposerContainer.prototype.getComposerEmojiContainerHtml = function(ctrl) {
        var container = new View.PPDiv({style: 'position: relative'});
        
        container.add(new View.$emojiSelector.build());
        container.add(new View.PPDiv({
            'class': 'pp-emoji-selector-sibling',
            id: 'pp-emoji-selector-sibling',
            event: {
                click: function() {
                    ctrl.onEmojiSelectorSiblingClicked();
                },
                init: function() {
                    $('#pp-emoji-selector-sibling').css('display', 'none');
                }
            }
        }, ctrl));

        return container;
        
    };

    /**
     * form container html code
     */
    PPComposerContainer.prototype.getComposerFormContainerHtml = function(ctrl) {

        var container = new View.PPDiv({
            style: "position: relative; overflow: hidden;"
        }),

            inMobile = Service.$device.isMobileBrowser(),

            self = this,
            
            form = new View.PPElement('form', {
                id: "pp-composer-container-form",
                name: "pp-composer-container-form",
                enctype: "multipart/form-data",
                target: "pp-composer-uploadframe",
                method: "post"
            }),

            placeHolder = Service.Constants.i18n(inMobile ? 'START_CONVERSATION_MOBILE_HINT' : 'START_CONVERSATION_HINT'),

            textareaClass = 'pp-composer-container-textarea pp-box-sizing-borderbox pp-font';
        
        if (Service.$device.isIE()) {
            textareaClass += ' pp-composer-container-textarea-min-height';
        }
        form.add(new View.PPElement('textarea', {
            id: inputID,
            'class': textareaClass,
            'data-min-rows': 1,
            placeholder: placeHolder,
            style: ctrl.getTextareaPaddingStyle(),
            rows: 1,
            event: {
                keydown: function(event) {
                    ctrl.onChatTextareaKeyDown(event);
                },
                focus: function() {
                    ctrl.onChatTextareaFocus();
                },
                blur: function() {
                    ctrl.onTextareaFocusOut();
                },
                init: function() {
                    ctrl.onTextareaInit();
                },
                'input propertychange': function() {
                    ctrl.onTextareaChange();
                }
            }
        }, ctrl));
        form.add(new View.PPElement('input', {
            id: 'pp-composer-container-content-txt',
            name: 'content_txt',
            type: 'hidden'
        }));
        form.add(new View.PPElement('input', {
            name: 'upload_type',
            type: 'hidden',
            value: 'content_txt'
        }));
        form.add(new View.PPElement('iframe', {
            id: 'pp-composer-uploadframe',
            name: "pp-composer-uploadframe",
            style: 'display:none'
        }));

        form.add(self.getComposerToolsContainerHtml(ctrl));

        container.add(form);

        return container;
    };

    /**
     * composer tools container html code
     */
    PPComposerContainer.prototype.getComposerToolsContainerHtml = function(ctrl) {
        var container = new View.PPDiv('pp-composer-container-tools-container');

        var emojiIconCssUrl = 'background-image: url(' + Configuration.assets_path + 'img/icon-emoji.png)';
        container.add(new View.PPElement('strong', {
            id: 'pp-composer-container-emoji-btn',
            'class': 'pp-composer-container-action-btn pp-composer-container-emoji-btn pp-box-sizing',
            style: ctrl.isShowEmojiIcon() ? 'display:block;' + emojiIconCssUrl : 'display:none',
            event: {
                click: function() {
                    ctrl.onEmojiSelectorBtnClicked();
                },
                mouseover: function() {
                    ctrl.onEmojiSelectorBtnMouseOver();
                },
                mouseleave: function() {
                    ctrl.onEmojiSelectorBtnMouseLeave();
                }
            }
        }));

        var fileSelectorIconCssUrl = 'background-image: url(' + Configuration.assets_path + 'img/icon-upload.png)';
        container.add(new View.PPElement('strong', {
            id: 'pp-composer-container-file-selector',
            'class': 'pp-composer-container-action-btn pp-box-sizing',
            style: fileSelectorIconCssUrl,
            event: {
                click: function() {
                    ctrl.onFileSelectorBtnClicked();
                },
                mouseover: function() {
                    ctrl.onFileSelectorBtnMouseOver();
                },
                mouseleave: function() {
                    ctrl.onFileSelectorBtnMouseLeave();
                }
            }
        }, ctrl));
        
        container.add(new View.PPElement('input', {
            id: 'pp-composer-container-input',
            type: 'file',
            event: {
                change: function(file) {
                    ctrl.onFileSelect(file);
                }
            }
        }, ctrl));
        
        return container;
    };

    /**
     * composer send button container html code
     *
     * Used for Android, iOS ... Mobile Devices
     */
    PPComposerContainer.prototype.getComposerSendButtonContainer = function(ctrl) {
        var show = ctrl.isSendButtonShow(),
            sendText = Service.Constants.i18n('SEND');

        return new View.PPDiv({
            id: 'pp-composer-send-button',
            'class': 'pp-composer-send-button pp-unselectable',
            style: 'display:' + (show ? 'block' : 'none'),
            event: {
                mousedown: function(e) {
                    ctrl.onSendButtonMouseDown(e);
                },
                init: function() {
                    ctrl.onSendButtonInit();
                }
            }
        })
            .add(new View.PPElement('p', {
                style: 'padding-top: 7.5px;',
                'class': 'pp-p-no-margin'
            }).text(sendText));
    };

    /**
     * Calculate textarea initial rows
     */
    PPComposerContainer.prototype.calcInputTextAreaRows = function() {
        $(document)
            .one('focus.textarea', inputSelector, function() {
                var savedValue = this.value;
                this.value = '';
                baseScrollHeight = this.scrollHeight || this[0].scrollHeight;
                this.value = savedValue;
                minRows = this.rows;
            })
            .on('input.textarea', inputSelector, function() {
                onTyping();
                fixInputRows();
            });
    };

    var containerId = 'pp-composer-container',
        inputID = 'pp-composer-container-textarea',
        inputSelector = '#' + inputID,
        
        minRows, // input min rows
        baseScrollHeight, // input initial height

        getSingleRowHeight = function() {
            return Service.$device.inMobile() ? 28 : Service.$device.isIE() ? 17 : 23; // how height single row
        },
        
        fixInputRows = function() {
            var _minRows = 1;
            var _baseScrollHeight = baseScrollHeight;
            var _e = jQuery(inputSelector)[0];
            var _rowHeight = getSingleRowHeight();

            //in IE, if set _e.rows = 0, will throw Error ("Invalid Value");
            if (_e && _e.rows && _e.scrollHeight) {
                _e.rows = _minRows;
                _e.rows = _minRows + Math.ceil((_e.scrollHeight - _baseScrollHeight) / _rowHeight);
            }
        },

        onTyping = function () {
            // every 2 seconds, only send once `typing` info to server
            Service.$schedule.once ( Service.$notifyTyping.get( Service.$notification ).typing, 'typing', 2 * 1000 );
        };

    return {
        
        build: function() { // build a PPComposerContainer
            return new PPComposerContainer();
        },

        fixInputRows: function() {
            fixInputRows();
            View.$emojiSelector.changeBottomMarginByInputHeight($(inputSelector).height());
        },

        focus: function() {
            $(inputSelector).focus();
        },

        blur: function() {
            $(inputSelector).blur();
        }
        
    }
    
})();

View.$conversationContent = (function() {

    /**
     * @constructor
     */
    function PPConversationContent(items) {
        var ctrl = Ctrl.$conversationContent.init();
        View.PPDiv.call(this, {
            id: id,
            'class': id + ' pp-unselectable pp-box-sizing-borderbox',
            event: {
                click: function() {
                    ctrl.onConversationContentClicked();
                },
                init: function() {
                    ctrl.onConversationContentInit();
                }
            }
        }, ctrl);
        if (items && items.length > 0) {
            for (var i=0; i<items.length; ++i) {
                this.add(new View.PPConversationPart(items[i]));
            }
        }

        $timeout( function() {
            // Bind mouse wheel event
            $( selector ).bind( 'mousewheel' ,function( e ) {
                var st = $(this).scrollTop();
                if (e.originalEvent.wheelDelta /120 > 0) {
                    if (st <= 0 ) { // Down
                        if (!View.$sheetHeader.isShowingTeamProfileFull()) {
                            View.$sheetHeader.showTeamProfileFull();
                        }
                    }
                } else { // Up
                    if (View.$sheetHeader.isShowingTeamProfileFull()) {
                        View.$sheetHeader.hideTeamProfileFull();
                    }
                }             
            } );

        } );
    }
    extend(PPConversationContent, View.PPDiv);

    var id = 'pp-conversation-content',
        selector = '#' + id;

    return {
        
        build: function(items) {
            return new PPConversationContent(items);
        },

        scrollToBottom: function() { //scroll to bottom
            $(selector).stop().animate({
                scrollTop: $(selector)[0].scrollHeight
            }, 600, 'swing');
            // $(selector).scrollTop($(selector)[0].scrollHeight);
        },

        html: function($el) {
            $(selector).html($el);
        },

        append: function(html) {
            $(selector).append(html);
        },

        show: function(fadeIn) {
            if (fadeIn) $(selector).show();
            else $(selector).fadeIn();
        }
    }
    
})();

View.$conversationContentContainer = (function() {

    var id = 'pp-conversation-container',
        selector = '.' + id,

        hide = function() {
            $(selector).hide();
        },

        show = function(fadeIn) {
            if (fadeIn) {
                $(selector).show();    
            } else {
                $(selector).fadeIn();    
            }
        },

        visible = function() {
            return $(selector).is(':visible');
        },

        build = function() {
            return new View.PPDiv(id)
                .add(View.$conversationContent.build())
                .add(View.$composerContainer.build());
        };
    
    return {
        hide: hide,
        show: show,
        visible: visible,

        build: build
    }
    
})();

((function(View) {

    /**
     * @constructor
     */
    function PPUploadingBar(item) {
        var ctrl = new Ctrl.PPUploadingBarCtrl();

        var id = "";
        switch(item.messageType) {
        case Service.PPMessage.TYPE.FILE:
            id = item.message.file.fileUploadId;
            break;

        case Service.PPMessage.TYPE.IMAGE:
            id = item.message.image.fileUploadId;
            break;
        }
        
        View.PPElement.call(this, 'span', {
            id: 'pp-uploading-bar-outer-' + id,
            'class': 'pp-uploading-bar-outer pp-font'
        }, ctrl);

        this.text(Service.Constants.i18n('UPLOADING_HINT'));
        
        this.add(new View.PPDiv({
            id: 'pp-uploading-bar-' + id,
            'class': 'pp-uploading-bar'
        })
                 .add(new View.PPDiv({
                     id: 'pp-uploading-bar-state-' + id,
                     'class': 'pp-uploading-bar-state'
                 })))
            .add(new View.PPElement('span', {
                id: 'pp-uploading-bar-remove-' + id,
                'class': 'pp-uploading-bar-remove',
                style: 'background-image:url(' + Configuration.assets_path + 'img/icon-upload-remove.png)',
                event: {
                    click: function() {
                        ctrl.onUploadingBarRemoveBtnClicked(id, item);
                    }
                }
            }));

        setTimeout(function() {
            ctrl.init(item, id);
        });
    }
    extend(PPUploadingBar, View.PPElement);

    View.PPUploadingBar = PPUploadingBar;
    
})(View));

/**
 * 鼠标放到小图标上面，弹出的卡片
 */
View.$hoverCard = (function() {

    // View
    function HoverCard() {
        var controller = Ctrl.$hoverCard.get();
        
        View.PPDiv.call(this, { //parent-container
            'class': 'pp-launcher-hovercard',
            id: 'pp-launcher-hovercard',
            style: 'display:none; transform-origin: 315px 100% 0px; transform: translate(0px 0px) scale(0.8, 0.8); opacity:0;',
            event: {
                mouseover: function() {
                    controller.onMouseOver();
                },
                mouseleave: function() {
                    controller.onMouseLeave();
                },
                click: function() {
                    controller.onHoverCardClicked();
                },
                init: function() {
                    controller.onHoverCardInit();
                }
            }
        }, controller);
    }
    extend(HoverCard, View.PPDiv);

    return {
        
        build: function() {
            return new HoverCard();
        },

        smoothTranisationToMessagePanel: function() {
            var duration = 300,
                windowHeight = window.innerHeight,

                conversationSelector = '#pp-conversation',
                welcomeSelector = '#pp-launcher-hovercard-welcome',
                textareaContainerSelector = '#pp-launcher-hovercard-textarea',
                hovercardSelector = '#pp-launcher-hovercard',
                ppMessageSelector = '#pp-messenger';

            $(conversationSelector)
                .removeClass('pp-conversation-content-maximize')
                .removeClass('pp-conversation-sheet-minimized');

            $(conversationSelector).css({boxShadow: "none"});
            
            $(welcomeSelector)
                .animate({ opacity: 0, marginBottom: "+=100"}, {duration: 100});

            $(textareaContainerSelector)
                .animate({paddingBottom: '31'}, {duration: duration});
            
            $(hovercardSelector)
                .css({ border: "none", borderLeft: "1px solid #dadee2"})
                .animate({ width: 368, paddingTop: windowHeight, borderRadius: 0, right: -20, bottom: -19}, {duration: duration});
            
            $(ppMessageSelector)
                .css({ opacity: 0.0, display: 'block'})
                .delay(duration)
                .animate({ opacity: 1.0}, {duration: 0, complete: function() {
                    $(welcomeSelector).removeAttr('style');
                    $(textareaContainerSelector).removeAttr('style');
                    $(hovercardSelector).removeAttr('style').hide();
                    $(ppMessageSelector).removeAttr('style');
                    $(conversationSelector).css({boxShadow: ""});
                }});
        }
    }
    
})();

((function(View) {

    View.$hoverCardContentCategorySingle = (function() {

        /**
         * build self
         */
        var updateHoverCard = function(appProfile) {
            var controller = Ctrl.$hoverCard.get(),
                hoverCardSelector = '#pp-launcher-hovercard',
                $container = $( hoverCardSelector );

            controller.updateInitState(true);

            $container
                .empty()
                .css('cursor', 'pointer')
                .append(getHoverCardCloseButtonHtml(controller).getElement()[0].outerHTML)
                .append(new View.PPDiv('pp-launcher-hovercard-welcome')
                        .add(getHoverCardAdminsHtml(appProfile.activeAdmins))
                        .add(getHoverCardWelcomeTextHtml(appProfile.appTeamName, appProfile.appWelcomeText))
                        .getElement()[0].outerHTML)
                .append(getHoverCardTextAreaHtml(controller).getElement()[0].outerHTML);
        },

            getHoverCardCloseButtonHtml = function(controller) { // close button

                var className = 'pp-launcher-hovercard-close',
                    backgroundImg = 'background-image: url(' + Configuration.assets_path + 'img/icon-close-white.png)',
                    backgroundColor = 'background-color: ' + View.Style.Color.hovercard_close_btn,
                    show = controller.isShowCloseButton() ? 'display:block' : 'display:none',
                    closeBtnName = Service.Constants.i18n('CLOSE');
                
                return new View.PPDiv({
                    'class': className + ' pp-font',
                    selector: '.' + className,
                    style: backgroundImg + ';' + backgroundColor + ';' + show,
                    event: {
                        click: function(e) {
                            controller.onHovercardCloseButtonClickEvent(e);
                        }
                    }
                }).text(closeBtnName);
            },

            /**
             * Get hoverCard welcome text 
             */
            getHoverCardWelcomeTextHtml = function(appTeamName, appWelcomeText) {
                return new View.PPDiv('pp-launcher-hovercard-text')
                    .add(new View.PPDiv('pp-launcher-hovercard-app-name').text(appTeamName)) // App Name
                    .add(new View.PPDiv('pp-launcher-hovercard-welcome-text').text(appWelcomeText));
            },

            /**
             * Get hoverCard textarea
             */
            getHoverCardTextAreaHtml = function(controller) {
                var placeHolder = Service.Constants.i18n('HOVER_CARD_TEXTAREA_HINT');
                return new View.PPDiv({
                    id: 'pp-launcher-hovercard-textarea',
                    className: 'pp-launcher-hovercard-textarea pp-box-sizing'
                })  // child-2
                    .add(new View.PPElement('textarea', {
                        placeholder: placeHolder,
                        id: 'pp-launcher-hovercard-textarea-textarea',
                        className: 'pp-launcher-hovercard-textarea-textarea pp-box-sizing-borderbox',
                        event: {
                            focus: function() {
                                controller.onTextareaFocus();
                            },
                            blur: function() {
                                controller.onTextareaUnFocus();
                            }
                        }
                    }));
            },

            /**
             * Server avatar
             */
            getHoverCardAdminsHtml = function(activeAdmins) {
                var container = new View.PPDiv('pp-launcher-hovercard-admins');
                var maxZIndex = 2147483003; //z-index
                var imgWidth = getHoverCardAdminAvatarWidth(activeAdmins);
                var imgStyle = 'width:' + imgWidth + '; height:' + imgWidth;
                var maxCount = 3;
                
                activeAdmins && $.each(activeAdmins, function(index, item) {
                    if (index < maxCount) {
                        container.add(new View.PPDiv({
                            'class': 'pp-launcher-admin-avatar',
                            style: 'z-index:' + (maxZIndex--),
                            user_uuid: item.user_uuid
                        })
                                      .add(new View.PPElement('img', {
                                          src: item.user_avatar,
                                          style: imgStyle
                                      })));
                    }
                });
                return container;
            },

            /**
             * Server avatar width
             */
            getHoverCardAdminAvatarWidth = function(activeAdmins) {
                var imgWidth = '46px';
                if (activeAdmins) {
                    var len = activeAdmins.length;
                    switch (len) {
                    case 1:
                        imgWidth = '84px';
                        break;

                    case 2:
                        imgWidth = '56px';
                        break;

                    default:
                        imgWidth = '46px';
                    }
                }
                return imgWidth;
            };

        return {
            updateHoverCard: updateHoverCard,
            updateUsers: updateUsers  
        }

        function updateUsers( users ) {

            users = users || [];
            $( '#' + 'pp-launcher-hovercard-admins' )
                .empty()
                .append( getHoverCardAdminsHtml( users ).getHTML() );
            
        }
        
    })();

    
})(View));

/**
 *
 * zoom-in `small-image` to `big-image` in a half-transparent window
 *
 * [Use]:
 * View.$imageViewer.show(jQuery(`The image that you want to zoom-in`));
 *
 */
View.$imageViewer = (function() {

    // Html code
    function ImageViewer(imgSrc, imgStyle) {
        View.PPDiv.call(this, {
            'class': 'pp-image-viewer'
        });
        
        this.add(new View.PPDiv({ 'class': 'pp-image-viewer-overlay' }))
            .add(new View.PPElement('img', {'class':'pp-zoomed-image', src: imgSrc, style: imgStyle}));
        
    }
    extend(ImageViewer, View.PPDiv);

    var viewerOverlay = '.pp-image-viewer-overlay', // jQuery element selectors
        containerSelector = '#pp-container',
        imageViewerSelector = '.pp-image-viewer',
        imgSelector = '.pp-image-viewer img',

        padding = 20, // zoomed image padding to body

        $scaleImage, // the image which you want to zoom-in
        smallImageAttrs, // contains small image's size and position info
        bigImageAttrs, // contains big image's size and position info

        initialImageStyle, // the initial style that will apply to image

        prepareToShowImageViewer = function($image) { // prepare show image
            $scaleImage = $image;

            // calc big image and small image size and position info
            calcSmallImageAttrs($scaleImage);
            calcBigImageAttrs(window.innerWidth, window.innerHeight, $scaleImage);

            // initial image style
            initialImageStyle = 'width:' + smallImageAttrs.width + 'px;' +
                'height:' + smallImageAttrs.height + 'px;' +
                'left:' + smallImageAttrs.left + 'px;' +
                'top:' + smallImageAttrs.top + 'px';
        },

        onImageViewerShow = function() { // on big image show callback

            // listen browser resize event
            $(window).on('resize.pp-image-viewer', onResize);

            // bind click event
            $(viewerOverlay).bind('click', onClick);
            $(imageViewerSelector + ' img').bind('click', onClick);

            // bind keyup event
            $(document).on('keyup.pp-image-viewer', onKeyUp);
        },

        onImageViewerClose = function() { // on big image hide

            // off keyup event
            $(document).off('keyup.pp-image-viewer');

            // off browser resize event
            $(window).on('resize.pp-image-viewer');
        },

        calcSmallImageAttrs = function($smallImage) { // calculate small image `width`,`height`,`left`,`top`                
            smallImageAttrs = {
                width: $smallImage.width(), // size info
                height: $smallImage.height(),
                left: $smallImage.offset().left - $(document).scrollLeft(), // position info
                top: $smallImage.offset().top - $(document).scrollTop()
            };
        },

        calcBigImageAttrs = function(windowWidth, windowHeight, $bigImage) { // calculate big image info
            var image = $bigImage[0],
                targetWidth = windowWidth - 2 * padding,
                targetHeight = windowHeight - 2 * padding,
                scale = Math.min(targetWidth / image.naturalWidth,
                                 targetHeight / image.naturalHeight); // zoom-in or zoom-out

            scale > 1 && (scale = 1); // scale <= 1

            var width = image.naturalWidth * scale,
                height = image.naturalHeight * scale,
                left = windowWidth / 2 - width / 2,
                top = windowHeight / 2 - height / 2;

            bigImageAttrs = {
                width: width, // size info
                height: height,
                left: left, // position info
                top: top
            };
        },

        show = function($image) { // show

            prepareToShowImageViewer($image);

            // append html to dom
            $(containerSelector).append (
                new ImageViewer($image[0].src, initialImageStyle).getElement()[0].outerHTML); // generate html code

            // after show
            onImageViewerShow();

            // animate small image --> big image
            $(imgSelector).animate(
                bigImageAttrs, {
                    duration: 100,
                    queue: false,
                    easing: 'easeInQuart'
                });

            // animation image overlay opacity 0 -> .8
            $(viewerOverlay).animate({
                opacity: .8,
                queue: false,
                easing: 'easeInQuart'
            }, 200);
            
            return this;
        },

        remove = function() { // remove self
            $(imageViewerSelector).remove();
        },

        resize = function(windowWidth, windowHeight) { // re caculate image's size and position
            calcBigImageAttrs(windowWidth, windowHeight, $scaleImage);
            $(imgSelector).css(bigImageAttrs);
        },

        close = function() { // close 

            calcSmallImageAttrs($scaleImage);

            // animate big image --> small image
            $(imgSelector)
                .animate(smallImageAttrs, {
                    queue: false,
                    duration: 200
                });

            // animate opacity .8 --> 0
            $(viewerOverlay)
                .animate({ opacity: 0 }, {
                    queue: false,
                    duration: 500
                });

            // waiting 700ms then remove image-viewer
            // `remove()` event can not add to `$.animate([complete])` callback,
            // it seems like that jQuery duration not so accurate,
            // so just set a more bigger duration to wait to remove it
            setTimeout(function() {
                remove();
            }, 700);

            // unbind event
            onImageViewerClose();
        },

        onClick = function() { // onClick Event
            close();
        },

        onKeyUp = function(e) { // on `Esc` Key pressed
            27 === e.keyCode && close(); // Esc
        },

        onResize = function(e) { // on browser size changed
            resize(window.innerWidth, window.innerHeight);
        };

    return {
        show: show
    }
    
})();

/**
 * 团队欢迎界面
 */
((function(View) {
    /**
     * item: 消息结构体
     */
    function AppProfileContainer(item) {
        var controller = new Ctrl.AppProfileContainerCtrl(item),
            self = this;
        
        View.PPDiv.call(this, 'pp-app-profile-container', controller);

        var appTeamName = controller.getAppTeamName();
        var appWelcomeText = controller.getWelcomeText();
        var activeAdmins = controller.getActiveAdmins();
        
        this.add(new View.PPDiv('pp-app-profile')
                 
                 .add(new View.PPDiv('pp-app-profile-activity')
                      .add(new View.PPDiv({
                          id: 'pp-app-profile-team',
                          'class': 'pp-app-profile-team pp-font pp-selectable'
                      }).text(appTeamName)))
                 
                 .add(self.appendActiveAdminsHtmlElements(activeAdmins))
                 
                 .add(new View.PPDiv({
                     id: 'pp-app-profile-text',
                     'class': 'pp-app-profile-text pp-font pp-selectable'
                 })
                      .add(new View.PPElement('p')
                           .text(appWelcomeText)))
                );
    }
    extend(AppProfileContainer, View.PPDiv);

    AppProfileContainer.prototype.appendActiveAdminsHtmlElements = function(activeAdmins) {
        var container = new View.PPDiv('pp-active-admins');
        activeAdmins && $.each(activeAdmins, function(index, item) {

            // if `item.user_uuid` is store in `Service.$users`,
            // then we try to get the user's info from `Service.$users`,
            // because user's info in `Service.$users` is always fresh.
            item = Service.$users.getUser( item.user_uuid ) &&
                Service.$users.getUser( item.user_uuid ).getInfo();
            
            container.add(new View.AppProfileContainerActiveAdmin( item )); 
        });
        return container;
    };

    View.AppProfileContainer = AppProfileContainer;
    
})(View));

/**
 * Single Active Admin
 */
((function(View) {

    function AppProfileContainerActiveAdmin(activeAdmin) {
        View.PPDiv.call(this, {
            'class': 'pp-active-admin',
            user_uuid: activeAdmin.user_uuid
        });

        var isOnline = activeAdmin.is_online,
            stateClass = 'state ' + ( isOnline ? 'online' : 'offline' ),

            getStateDesc = function(isOnline) {
                return '[' + ( isOnline ? Service.Constants.i18n('ONLINE') : Service.Constants.i18n('OFFLINE') ) + ']';
            },
            
            stateDesc = getStateDesc(isOnline);

        this.add(new View.PPDiv('pp-admin-avatar')
                 .add(new View.PPElement('img', {
                     src: activeAdmin.user_avatar
                 })))
            .add(new View.PPDiv({'class': 'pp-active-admin-name pp-font pp-selectable'})
                 .text(activeAdmin.user_fullname))
            .add(new View.PPDiv({
                'class': stateClass + ' pp-font'
            }).text(stateDesc));

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // TODO Because `AppProfileContainerActiveAdmin` destroy and recreate when open a new group item,
        // we should `unsubscribe` to avoid memory leak here
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        // Listen for user infochange event
        Service.$pubsub.subscribe('user/infochange/' + activeAdmin.user_uuid, function (topics, user) {

            var userInfo = user.getInfo(),
                
                $adminElement = $('#pp-active-admins').
                find('div[user_uuid=' + activeAdmin.user_uuid + ']'); // admin div

            // Change admin user name and icon
            if ($adminElement.length) {
                $adminElement.find('img').attr('src', userInfo.user_avatar);
                $adminElement.find('.pp-active-admin-name').text(userInfo.user_fullname);
            }
            
        });

        // Listen for user state change envent
        Service.$pubsub.subscribe('user/infochange/state/' + activeAdmin.user_uuid, function (topics, user) {

            var userInfo = user.getInfo(),
                
                $adminElement = $('#pp-active-admins').
                find('div[user_uuid=' + activeAdmin.user_uuid + ']'); // admin div

            // Change admin user name and icon
            if ($adminElement.length) {

                var $e = $adminElement.find('.state');

                if (userInfo.is_online) {
                    $e.removeClass('offline').addClass('online');
                } else {
                    $e.removeClass('online').addClass('offline');
                }
                $e.text(getStateDesc(userInfo.is_online));
            }
            
        });
    }
    extend(AppProfileContainerActiveAdmin, View.PPDiv);

    View.AppProfileContainerActiveAdmin = AppProfileContainerActiveAdmin;
    
})(View));

View.conversationPartTools = ( function() {

    ////////// API //////////
    
    return {
        buildExtra: buildExtra
    }

    ///////// Inner Impl ////////

    function buildExtra( item ) {
        var color = '#c9cbcf',
            text = item.extra.description,
            show = false;
        
        if ( Service.$tools.isMessageSendError( item ) ) {
            color = 'red';
            text = item.extra.errorDescription;
        } else if ( item.messageState === 'SENDING' ) {
            text = Service.Constants.i18n( 'SENDING' );
        }

        show = text && text.length > 0 && !Service.$tools.isUploading( item );

        return {
            style: 'color:' + color + "; display:" + ( show ? 'block' : 'none' ),
            text: text,
            show: show
        };
    }
    
} )();

((function(View) {

    /**
     * @constructor
     */
    function PPConversationPart(item) {
        var id = item.messageId;
        View.PPDiv.call(this, {
            id: 'pp-conversation-part-' + id,
            'class': 'pp-conversation-part'
        });

        switch(item.messageType) {
        case Service.PPMessage.TYPE.WELCOME:
            item && this.add(new View.AppProfileContainer(item));
            break;

        case Service.PPMessage.TYPE.TEXT:
            this.add((item.user.admin) ? new View.PPConversationPartTextByAdmin(item) : View.$userTextMessage.build(item));
            break;

        case Service.PPMessage.TYPE.EMOJI:
            this.add((item.user.admin) ? new View.PPConversationPartEmojiByAdmin(item) : View.$userEmojiMessage.build(item));
            break;

        case Service.PPMessage.TYPE.IMAGE:
            this.add((item.user.admin) ? View.$adminImageMessage.build(item) : View.$userImageMessage.build(item));
            break;

        case Service.PPMessage.TYPE.AUDIO:
            item.user.admin && this.add( View.$adminAudioMessage.build( item ) );
            break;

        case Service.PPMessage.TYPE.FILE:
            this.add((item.user.admin) ? new View.PPConversationPartFileByAdmin(item) : View.$userFileMessage.build(item));
            break;

        case Service.PPMessage.TYPE.TIMESTAMP:
            this.add(new View.PPConversationPartTimestamp(item));
            break;

        case Service.PPMessage.TYPE.SMS_EMAIL:
            this.add(View.$smsEmail.build());
            break;
        }
    }
    extend(PPConversationPart, View.PPDiv);

    View.PPConversationPart = PPConversationPart;
    
})(View));

View.$pulltoRefresh = (function() {

    function PulltoRefreshButton(text) {
        var ctrl = Ctrl.$pulltoRefreshController.get(),
            initialText = (text !== undefined ? text : ctrl.getLoadHistortyHintText());
        
        View.PPDiv.call(this, {
            id: id,
            'class': id + ' pp-conversation-part-center'
        });

        this.text(initialText);
    }
    extend(PulltoRefreshButton, View.PPDiv);

    var id = 'pp-conversation-part-pulltorefreshbutton',
        selector = '.' + id,

        build = function(text) {
            return new PulltoRefreshButton(text);
        },

        hide = function() {
            $(selector).hide();
        },

        show = function() {
            $(selector).show();
        },

        el = function() { // return jQuery('element');
            return $(selector);
        };

    return {
        build: build,

        hide: hide,
        show: show,

        el: el
    }
    
})();

((function(View) {

    /**
     * @constructor
     */
    function PPConversationPartEmojiByAdmin(item) {
        View.PPDiv.call(this, 'pp-conversation-part-emoji-by-admin');

        Service.$pubsub.subscribe('user/infochange/' + item.user.id, function(topics, user) {

            var selector = '#pp-conversation-part-' + item.messageId,
                userInfo = user.getInfo();

            // Change user avatar src
            $(selector)
                .find('.pp-conversation-part-emoji-by-admin-avatar')
                .attr('src', userInfo.user_avatar);

            // Change user name text
            $(selector)
                .find('.pp-conversation-part-serve-name')
                .text(userInfo.user_fullname);
            
        });

        this.add(new View.PPDiv('pp-conversation-part-emoji-by-admin-outer')
                 .add(new View.PPElement('img', {
                     src: item.user.avatar,
                     id: 'pp-conversation-part-emoji-by-admin-avatar'
                 }))
                 .add(new View.PPDiv('pp-conversation-part-emoji-by-admin-body-container')
                      .add(new View.PPDiv({
                          id: '',
                          'class': 'pp-conversation-part-serve-name pp-font'
                      }).text(item.user.name))
                      .add(new View.PPElement('span', {
                          id: 'pp-conversation-part-emoji-by-admin-body',
                          'class': 'pp-conversation-part-emoji-by-admin-body pp-selectable'
                      }).text(item.message.emoji.code))
                      .add(new View.PPElement('span', {
                          id: 'pp-conversation-part-emoji-by-admin-timestamp-' + item.messageId,
                          'class': 'pp-conversation-part-emoji-by-admin-timestamp pp-selectable pp-font'
                      }).text())));
    }
    extend(PPConversationPartEmojiByAdmin, View.PPDiv);

    View.PPConversationPartEmojiByAdmin = PPConversationPartEmojiByAdmin;
    
})(View));

View.$userEmojiMessage = ( function() {

    var prefix = 'pp-conversation-part-',
        prefixId = '#' + prefix,
        id = prefix + 'emoji-by-user',
        clsTextSelectable = 'pp-selectable';

    //////// API ////////////
    
    return {
        build: build,
        onSendFail: onSendFail,
        onSending: onSending,
        onSendFinish: onSendFinish
    }

    function build( item ) {
        return new PPConversationPartEmojiByUser( item );
    }

    function onSendFail( ppMessageJsonBody ) {
        addDescription( ppMessageJsonBody, ppMessageJsonBody.extra.errorDescription, 'red' );
    }

    function onSending( ppMessageJsonBody ) {
        addDescription( ppMessageJsonBody, Service.Constants.i18n( 'SENDING' ), undefined );
    }

    function onSendFinish( ppMessageJsonBody ) {
        removeDescription( ppMessageJsonBody );
    }

    function addDescription( ppMessageJsonBody, description, color ) {
        $( prefixId + ppMessageJsonBody.messageId )
            .find( '.extra' )
            .text( description )
            .css( { color: color } )
            .show();
    }

    function removeDescription( ppMessageJsonBody ) {
        $( prefixId + ppMessageJsonBody.messageId )
            .find( '.extra' )
            .text( '' )
            .css( { color: undefined } )
            .hide();
    }

    /**
     * @constructor
     */
    function PPConversationPartEmojiByUser(item) {
        View.PPDiv.call(this, id);

        var extra = View.conversationPartTools.buildExtra( item );

        this.add(new View.PPDiv({
            className: 'pp-emoji-container'
        })
                 .add(new View.PPDiv({
                     className: 'pp-emoji ' + clsTextSelectable
                 }).text(item.message.emoji.code))
                 .add(new View.PPDiv()
                      .add(new View.PPElement('span', {
                          className: 'extra ' + clsTextSelectable,
                          style: extra.style
                      })
                           .text( extra.text ))));
    }
    extend(PPConversationPartEmojiByUser, View.PPDiv);
    
} )();

((function(View) {

    /**
     * @constructor
     */
    function PPConversationPartFileByAdmin(item) {
        View.PPDiv.call(this, 'pp-conversation-part-file-by-admin');

        var userAvatar = item.user.avatar,
            userName = item.user.name,
            userId = item.user.id,
            fileUrl = item.message.file.fileUrl,
            fileName = item.message.file.fileName,
            messageId = item.messageId,

            // 当用户信息(通常：头像或姓名)改变的时候，回调
            onAdminUserInfoChangeEvent = function(topics, user) {

                var selector = '#pp-conversation-part-' + messageId,
                    userInfo = user.getInfo();

                // Change user avatar src
                $(selector)
                    .find('.pp-conversation-part-file-by-admin-avatar')
                    .attr('src', userInfo.user_avatar);

                // Change user name text
                $(selector)
                    .find('.pp-conversation-part-serve-name')
                    .text(userInfo.user_fullname);                    
                
            };

        // subscribe 'user/infochange/xxxx-xxx-xxxx(user_uuid)' event
        Service.$pubsub.subscribe("user/infochange/" + userId, onAdminUserInfoChangeEvent);

        this.add(new View.PPDiv('pp-conversation-part-file-by-admin-outer')
                 .add(new View.PPDiv('pp-conversation-part-file-by-admin-outer-2')
                      .add(new View.PPElement('img', {
                          'class': 'pp-conversation-part-file-by-admin-avatar',
                          src: userAvatar
                      }))
                      .add(new View.PPDiv('pp-conversation-part-file-by-admin-outer-3')
                           .add(new View.PPDiv({
                               id: '',
                               'class': 'pp-conversation-part-serve-name pp-font'
                           }).text(userName))
                           .add(new View.PPDiv('pp-conversation-part-file-by-admin-outer-4')
                                .add(new View.PPDiv('pp-conversation-part-file-by-admin-outer-5')
                                     .add(new View.PPDiv({
                                         id: 'pp-conversation-part-file-by-admin-upload-icon',
                                         style: 'background-image:url(' + Configuration.assets_path + 'img/icon-upload-white.png)'
                                     }))
                                     .add(new View.PPDiv('pp-conversation-part-file-by-admin-outer-6')
                                          .add(new View.PPElement('a', {
                                              href: fileUrl,
                                              download: fileName,
                                              'class': "pp-conversation-part-file-by-admin-file-link pp-font",
                                              title: fileName
                                          })
                                               .text(fileName
                                                    ))))
                                .add(new View.PPDiv('pp-conversation-part-file-by-admin-timestamp-container')
                                     .add(new View.PPElement('span', {
                                         'class': 'pp-selectable pp-font',
                                         id: 'pp-conversation-part-file-by-admin-timestamp-' + messageId
                                     })
                                          .text()))))));
    }
    extend(PPConversationPartFileByAdmin, View.PPDiv);

    View.PPConversationPartFileByAdmin = PPConversationPartFileByAdmin;
    
})(View));

View.$userFileMessage = ( function() {

    var fileSelectorPrefix = '#pp-conversation-part-file-by-user-o2-';

    //////// API ////////////

    return {
        build: build,
        onBeginUpload: onBeginUpload,
        onUploading: onUploading,
        onUploadDone: onUploadDone,
        onUploadFail: onUploadFail,
        onSendDone: onSendDone,
        onSending: onSending,
        onSendFail: onSendFail
    }

    function build( item ) {
        return new PPConversationPartFileByUser( item );
    }

    function onBeginUpload( ppMessageJsonBody ) {
        $( fileSelectorPrefix + ppMessageJsonBody.messageId ).css({ 'opacity': 0.6 });
    }

    function onUploading( ppMessageJsonBody, progress ) {
        if ( progress < 0 ) return;
        if ( progress <= 100 ) {
            $( '#pp-uploading-bar-state-' + ppMessageJsonBody.message.file.fileUploadId ).css( 'width', progress + "%" );
        }
    }

    function onUploadDone( ppMessageJsonBody ) {
        hideUploadBar( ppMessageJsonBody );
    }

    function onUploadFail( ppMessageJsonBody ) {
        hideUploadBar( ppMessageJsonBody );
    }

    function onSendDone( ppMessageJsonBody ) {
        $('#pp-conversation-part-file-by-user-o2-' + ppMessageJsonBody.messageId).css({
            'opacity': 1.0
        });
        if (ppMessageJsonBody.message.file.fileServerUrl) {
            $('#pp-conversation-part-file-by-user-a-' + ppMessageJsonBody.messageId)
                .attr('href', ppMessageJsonBody.message.file.fileServerUrl);   
        }

        removeDescription( ppMessageJsonBody );
    }

    function onSending( ppMessageJsonBody ) {
        addDescription( ppMessageJsonBody, Service.Constants.i18n( 'SENDING' ), undefined );
    }

    function onSendFail( ppMessageJsonBody ) {
        addDescription( ppMessageJsonBody, ppMessageJsonBody.extra.errorDescription, 'red' );
    }

    function hideUploadBar( ppMessageJsonBody ) {
        $('#pp-uploading-bar-outer-' + ppMessageJsonBody.message.file.fileUploadId).hide();
    }

    function addDescription( ppMessageJsonBody, description, color ) {
        $('#pp-conversation-part-file-by-user-timestamp-' + ppMessageJsonBody.messageId)
            .text( description ).css({
                'color': color,
                'display': 'block'
            });
    }

    function removeDescription( ppMessageJsonBody ) {
        $('#pp-conversation-part-file-by-user-timestamp-' + ppMessageJsonBody.messageId)
            .text( '' ).css({
                'color': undefined,
                'display': 'none'
            });
    }

    /**
     * @constructor
     */
    function PPConversationPartFileByUser(item) {
        View.PPDiv.call(this, {
            id: 'pp-conversation-part-file-by-user-' + item.messageId ,
            'class': 'pp-conversation-part-file-by-user'
        });

        var $tools = Service.$tools,
            error = Service.$tools.isMessageSendError( item ),
            extra = View.conversationPartTools.buildExtra( item ),
            showUploadingBar = $tools.isUploading(item),
            isIE = Service.$device.isIE();
        
        this.add(new View.PPDiv({
            id: 'pp-conversation-part-file-by-user-o-' + item.messageId,
            'class': 'pp-conversation-part-file-by-user-o'
        })
                 .add(new View.PPDiv({
                     id: 'pp-conversation-part-file-by-user-o2-' + item.messageId,
                     'class': 'pp-conversation-part-file-by-user-o2',
                     style: error ? 'opacity: 0.6' : ''
                 })
                      .add(new View.PPDiv({
                          id: 'pp-conversation-part-file-by-user-upload-icon',
                          style: 'background-image:url(' + Configuration.assets_path + 'img/icon-upload-white.png)'
                      }))
                      .add(new View.PPDiv({
                          'class': 'pp-conversation-part-file-by-user-link-container',
                          style: isIE ? 'margin-left: 0px;' : null // <- fix IE bug
                      })
                           .add(new View.PPElement('a', {
                               id: 'pp-conversation-part-file-by-user-a-' + item.messageId,
                               'class': 'pp-font',
                               title: item.message.file.fileName,
                               style: error ? 'cursor:default' : 'cursor:pointer',
                               href: item.message.file.fileServerUrl ? item.message.file.fileServerUrl : undefined
                           }).text(item.message.file.fileName
                                   // 'LongTextLongTextLongTextLongTextLongText'
                                  ))))
                 .add(new View.PPDiv({
                     id: 'pp-conversation-part-file-by-user-timestamp-' + item.messageId,
                     'class': 'pp-conversation-part-file-by-user-timestamp pp-selectable pp-font',
                     style: extra.style
                 })
                      .text( extra.text ))
                 .add(new View.PPDiv({
                     'class': 'pp-fixme'
                 })
                      .add(new View.PPUploadingBar(item).show(showUploadingBar))));
    }
    extend(PPConversationPartFileByUser, View.PPDiv);
    
} )();

((function(View) {

    View.$adminImageMessage = (function() {

        /**
         * @constructor
         */
        function PPConversationPartImageByAdmin(item) {
            View.PPDiv.call(this, 'pp-conversation-part-image-by-admin');

            var selector = '#pp-conversation-part-' + item.messageId + ' .pp-conversation-part-image-by-admin-img',
                
                onImageClick = function() { // 'click' event                    
                    if (isZoomable()) { // zoomable
                        View.$imageViewer.show($(selector));
                    } else { // open in a new window
                        window.open(item.message.image.url);
                    }
                },

                getImageInitialStyle = function() { // get style based `isZoomable()`

                    if (!isZoomable()) {
                        return 'cursor:pointer';
                    }

                    return null;
                    
                };

            // Listen for userInfo change event
            Service.$pubsub.subscribe('user/infochange/' + item.user.id, function(topics, user) {

                var selector = '#pp-conversation-part-' + item.messageId,
                    userInfo = user.getInfo();

                // Change user avatar
                $(selector)
                    .find('.pp-conversation-part-image-by-admin-avatar')
                    .attr('src', userInfo.user_avatar);

                // Change user name
                $(selector)
                    .find('.pp-conversation-part-serve-name')
                    .text(userInfo.user_fullname);
                
            });
            
            this.add(new View.PPDiv('pp-conversation-part-image-by-admin-o')
                     .add(new View.PPDiv('pp-conversation-part-image-by-admin-o1')
                          .add(new View.PPElement('img', {
                              src: item.user.avatar,
                              'class': 'pp-conversation-part-image-by-admin-avatar'
                          }))
                          .add(new View.PPDiv('pp-conversation-part-image-by-admin-o2')
                               .add(new View.PPDiv('pp-conversation-part-image-by-admin-o3')
                                    .add(new View.PPDiv({
                                        'class': 'pp-conversation-part-serve-name pp-font'
                                    }).text(item.user.name))
                                    .add(new View.PPDiv('pp-conversation-part-image-by-admin-o4')
                                         .add(new View.PPElement('img', {
                                             src: item.message.image.url,
                                             selector: selector, 
                                             'class': 'pp-conversation-part-image-by-admin-img pp-image-viewable',
                                             style: getImageInitialStyle(),
                                             event: {
                                                 click: onImageClick
                                             }
                                         }))))
                               .add(new View.PPDiv('pp-conversation-part-image-by-admin-timestamp-container')
                                    .add(new View.PPElement('span', {
                                        'class': 'pp-selectable pp-font',
                                        id: 'pp-conversation-part-image-by-admin-timestamp-' + item.messageId
                                    })
                                         .text())))));
        }
        extend(PPConversationPartImageByAdmin, View.PPDiv);

        var build = function(item) { // build a new AdminImage
            return new PPConversationPartImageByAdmin(item);
        },

            isZoomable = function() { // weather or not image can zoom-in zoom-out
                return true;
            };

        return {
            build: build
        }
        
    })();
    
})(View));

((function(View) {

    View.$userImageMessage = (function() {

        /**
         * @constructor HTML CODE
         */
        function PPConversationPartImageByUser(item) {
            View.PPDiv.call(this, 'pp-conversation-part-image-by-user');
            
            var MAX_WIDTH = 242, // img max-width 242px

                showUploadingBar = Service.$tools.isUploading(item),
                messageId = item.messageId,
                imgSelector = '#pp-conversation-part-' + messageId + ' .pp-conversation-part-image-by-user-img',
                extra = View.conversationPartTools.buildExtra( item ),
                shouldOpacity = Service.$tools.isMessageSendError(item) || showUploadingBar,
                imageHref = item.message.image.url,
                imageViewable = isZoomable(),
                imageClass = 'pp-conversation-part-image-by-user-img' + (imageViewable ? ' pp-image-viewable' : ''),

                onImageClickEvent = function(event) { // on image click event callback
                    if (imageViewable) {
                        openInViewer($(imgSelector));
                    } else {
                        window.open($(imgSelector).attr('src'));
                    }
                },

                // because our `max-width` is fixed, `height` is detect autociamally in other browsers instead of IE9,
                // so we need to calculate `mx-height` dynamically in IE9 browser.
                // getImageMaxHeight = function() {
                //     return $(imgSelector).width() / MAX_WIDTH * $(imgSelector).height();
                // },

                getImageInitialStyle = function() {
                    var style = '';

                    style += shouldOpacity ? 'opacity: .6' : '';

                    if (!imageViewable) style += 'cursor:pointer';

                    return style;
                },

                // $image: `jQuery(img)`
                openInViewer = function($image) {
                    View.$imageViewer.show($image);
                };
            
            this.add(new View.PPDiv('pp-conversation-part-image-by-user-o')
                     .add(new View.PPElement('img', {
                         id: 'pp-conversation-part-image-by-user-img-' + item.messageId,
                         'class': imageClass,
                         src: item.message.image.data || item.message.image.url,
                         style: getImageInitialStyle(),
                         event: {
                             click: onImageClickEvent
                         }
                     }))
                     .add(new View.PPDiv({
                         id: 'pp-conversation-part-image-by-user-timestamp-' + item.messageId,
                         'class': 'pp-conversation-part-image-by-user-timestamp pp-selectable'
                     })
                          .add(new View.PPElement('span', {
                              id: 'pp-conversation-part-image-by-user-timestamp-span-' + item.messageId,
                              'class': 'pp-conversation-part-image-by-user-timestamp-span pp-font',
                              style: extra.style
                          })
                               .text( extra.text ))
                          .show(!showUploadingBar))
                     .add(new View.PPDiv({
                         'class': 'pp-fixme'
                     })
                          .add(new View.PPUploadingBar(item).show(showUploadingBar))));
        }
        extend(PPConversationPartImageByUser, View.PPDiv);

        var isZoomable = function() { // is image can zoom
            return true;
        },

            build = function(item) { // generate a new ConversationPartImageByUser instance
                return new PPConversationPartImageByUser(item);
            },

            getImageSelector = function(messageId) { // get image selector
                return '#pp-conversation-part-image-by-user-img-' + messageId;
            },

            getImageTimestampContainerSelector = function(messageId) { //
                return '#pp-conversation-part-image-by-user-timestamp-' + messageId;
            },

            getImageTimestampSelector = function(messageId) {
                return '#pp-conversation-part-image-by-user-timestamp-span-' + messageId;
            };

        ///////// Public API ////////

        return {
            build: build,

            onBeginUpload: onBeginUpload,
            onUploading: onUploading,
            onUploadDone: onUploadDone,
            onUploadFail: onUploadFail,
            onSending: onSending,
            onSendFail: onSendFail,
            onSendDone: onSendDone
        }

        ///////// Inner Impl ////////

        function onUploading( ppMessageJsonBody, progress ) {
            if (progress < 0) return;
            if (progress <= 100) {
                $('#pp-uploading-bar-state-' + ppMessageJsonBody.message.image.fileUploadId).css('width', progress + "%");
            }
        }

        function onUploadDone( ppMessageJsonBody ) {
            hideUploadBar( ppMessageJsonBody );
        }

        function onUploadFail( ppMessageJsonBody ) {
            hideUploadBar( ppMessageJsonBody );            
        }

        function onSending( ppMessageJsonBody ) {
            addDescription( ppMessageJsonBody, Service.Constants.i18n( 'SENDING' ), undefined );
        }

        function onBeginUpload( ppMessageJsonBody ) { // on begin upload
            var imageSelector = getImageSelector( ppMessageJsonBody.messageId );

            // set image opacity from 1 to half-opacity
            $(imageSelector).css({ 'opacity': 0.6 });
        }

        function onSendFail( ppMessageJsonBody ) {
            // change cursor
            $(getImageSelector(messageId)).css({
                'opacity': 0.6,
                'cursor': 'default'
            });

            addDescription( ppMessageJsonBody, ppMessageJsonBody.extra.errorDescription, 'red' );
        }

        function onSendDone( ppMessageJsonBody ) {
            $( getImageSelector( ppMessageJsonBody.messageId ) ).css({
                'opacity': 1.0
            });
            removeDescription( ppMessageJsonBody );
        }

        function hideUploadBar( ppMessageJsonBody ) {
            $('#pp-uploading-bar-outer-' + ppMessageJsonBody.message.image.fileUploadId).hide();
        }

        function removeDescription( ppMessageJsonBody ) {
            $( getImageTimestampContainerSelector( ppMessageJsonBody.messageId ) ).hide();
            $( getImageTimestampSelector( ppMessageJsonBody.messageId ) ).text( '' ).css({
                'color': undefined,
                'display': 'none'
            });
        }

        function addDescription( ppMessageJsonBody, description, color ) {
            $( getImageTimestampContainerSelector( ppMessageJsonBody.messageId ) ).show();
            $( getImageTimestampSelector( ppMessageJsonBody.messageId ) ).text( description ).css({
                'color': color,
                'display': 'block'
            });
        }
        
    })();
    
})(View));

((function(View) {

    /**
     * @constructor
     */
    function PPConversationPartTextByAdmin(item) {
        View.PPDiv.call(this, 'pp-conversation-part-text-by-admin');

        var html = View.$textUrlChecker.match(item.message.text.body).trustAsHtml();
        var defaultServeNameMarginLeft = '37px';

        Service.$pubsub.subscribe('user/infochange/' + item.user.id, function(topics, user) {

            var selector = '#pp-conversation-part-' + item.messageId,
                userInfo = user.getInfo();

            // Change user avatar src
            $(selector)
                .find('.pp-conversation-part-text-by-admin-avatar')
                .attr('src', userInfo.user_avatar);

            // Change user name text
            $(selector)
                .find('.pp-conversation-part-serve-name')
                .text(userInfo.user_fullname);           
            
        });
        
        this.add(new View.PPDiv('pp-conversation-part-text-by-admin-outer')
                 .add(new View.PPDiv('pp-conversation-part-text-by-admin-outer-2')
                      .add(new View.PPElement('img', {
                          id: 'pp-conversation-part-text-by-admin-avatar',
                          src: item.user.avatar
                      }))
                      .add(new View.PPDiv('pp-conversation-part-text-by-admin-outer-3')
                           .add(new View.PPDiv()
                                .add(new View.PPDiv({
                                    id: '',
                                    style: 'margin-left:' + defaultServeNameMarginLeft,
                                    'class': 'pp-conversation-part-serve-name pp-font'
                                }).text(item.user.name))
                                .add(new View.PPDiv('pp-conversation-part-text-by-admin-body-container')
                                     .add(new View.PPDiv({
                                         id: 'pp-conversation-part-text-by-admin-body',
                                         'class': 'pp-conversation-part-text-by-admin-body pp-font pp-text-link-admin pp-selectable'
                                     })
                                          .html(html)))
                                .add(new View.PPDiv('pp-conversation-part-text-by-admin-triangle')))
                           .add(new View.PPDiv('pp-conversation-part-text-by-admin-timestamp-container')
                                .add(new View.PPElement('span', {
                                    'class': 'pp-selectable pp-font',
                                    id: 'pp-conversation-part-text-by-admin-timestamp-' + item.messageId
                                }))))));
    }
    extend(PPConversationPartTextByAdmin, View.PPDiv);

    View.PPConversationPartTextByAdmin = PPConversationPartTextByAdmin;
    
})(View));

View.$userTextMessage = ( function() {

    var Div = View.PPDiv,
        prefix = 'pp-conversation-part-',
        prefixId = '#' + prefix;

    //////// API ///////////
    
    return {
        build: build,
        onSendFail: onSendFail,
        onSending: onSending,
        onSendDone: onSendDone
    }

    function build( item ) {
        return new PPConversationPartTextByUser( item );
    }

    function onSending( ppMessageJsonBody ) {
        addDescription( ppMessageJsonBody, Service.Constants.i18n( 'SENDING' ), undefined );
    }

    function onSendDone( ppMessageJsonBody ) {
        removeDescription( ppMessageJsonBody );
    }

    function onSendFail( ppMessageJsonBody ) {
        addDescription( ppMessageJsonBody, ppMessageJsonBody.extra.errorDescription, 'red' );
    }

    function addDescription( ppMessageJsonBody, description, color ) {
        $( prefixId + ppMessageJsonBody.messageId )
            .find( '.extra' )
            .text( description )
            .css({ 'color': color })
            .show();
    }

    function removeDescription( ppMessageJsonBody ) {
        $( prefixId + ppMessageJsonBody.messageId )
            .find( '.extra' )
            .text( '' )
            .css({ 'color': undefined })
            .hide();
    }

    /**
     * @constructor
     */
    function PPConversationPartTextByUser( item ) {
        Div.call(this, 'pp-conversation-part-text-by-user');

        var html = View.$textUrlChecker.match(item.message.text.body).trustAsHtml(),
            extra = View.conversationPartTools.buildExtra( item );
        
        this.add(new Div( 'pp-conversation-part-text-by-user-outer' )
                 .add(new Div( 'pp-wrapper' )
                      .add(new Div({ className: 'pp-conversation-part-text-by-user-body-outer', style: 'background-color:' + View.Style.Color.main_color })
                           .add(new Div({
                               id: 'pp-conversation-part-text-by-user-body',
                               'class': 'pp-conversation-part-text-by-user-body pp-font pp-text-link-user pp-selectable'
                           })
                                .html(html)))
                      .add(new Div({ className: 'pp-conversation-part-text-by-user-triangle', style: 'border-left:4px solid ' + View.Style.Color.main_color })))
                 .add(new Div('pp-conversation-part-text-by-user-timestamp-outer')
                      .add(new View.Span({
                          'class': 'extra pp-selectable',
                          style: extra.style
                      }).text( extra.text ))));
        
    }
    extend(PPConversationPartTextByUser, Div);
    
} )();

View.$adminAudioMessage = ( function() {

    ////////////////
    /// View ////////
    ///////////////
    function AdminAudioMessageView( item ) {
        View.Div.call( this, { className: 'msg-audio-admin' } );

        var voiceImgBackground = 'url(' + Configuration.assets_path + 'img/icon-down.png) 0 -2427px',
            audio = item.message.audio,
            duration = audio.duration(),
            durationStr = duration + "''",
            audioBodySelector = getConversationAudioBodyHtmlSelector( item.messageId ),
            messageId = item.messageId,
            subscriber,
            
            onClick = function( e ) { // `client` event

                var audioId = audio.id(),
                    player = Service.$audioContext;
                
                if ( player.isPlaying( audio ) ) {
                    player.stop( audio );
                } else {
                    subscriber = Service.$pubsub.subscribe( 'audio/' + audioId, onAudioStateChange );

                    audio.markRead();
                    markRead( messageId );
                    
                    player.play( audio );
                }

                return true;
                
            };

        
        this.add( new View.Img( { src: item.user.avatar, className: 'pp-avatar' } ) )
            .add( new View.Div( { className: 'pp-content' } )
                  .add( new View.Span( { className: 'pp-name' } ).text( item.user.name ) )
                  .add( new View.Div( { className: 'pp-voice', uuid: audio.id() } )
                        .add( new View.Div( { className: 'pp-triangle' } ) )
                        .add( new View.Div( { className: 'pp-body',
                                              style: 'width:' + getVoiceViewLength( duration) + 'px',
                                              selector: audioBodySelector,
                                              event: {
                                                  click: onClick
                                              } } )
                              .add( new View.Element( 'i', { style: 'background:' + voiceImgBackground } ) ) )
                        .add( new View.Span( { className: 'pp-dura' } ).text( durationStr ) )
                        .add( new View.Div( { className: 'pp-unread' } ) ))
                  .add( new View.Span( { className: 'pp-desc' } ) ));

        // Initialize when `new`
        initialize(); 

        function initialize() {
            $timeout( function() {
                
                if ( !audio.canPlay() ) markError( messageId );

                if ( audio.hasRead() ) markRead( messageId );
                
            } );
        }

        function getVoiceViewLength( duration ) {
            var MIN = 45,
                MAX = 120,
                
                MAX_DURATION = 300,
                MIN_DURATION = 1;

            if ( duration > MAX_DURATION ) duration = MAX_DURATION;
            if ( duration < 0 ) duration = MIN_DURATION;
            
            return MIN + ( MAX - MIN ) * duration / MAX_DURATION;
        }

        function onAudioStateChange( topics, data ) {

            var STATE = Service.$audioContext.STATE,
                $pubsub = Service.$pubsub;

            switch ( data.state ) {
            case STATE.NULL:
                stopAudioAnimation( messageId, data.audioId );
                subscriber && $pubsub.unsubscribe( subscriber );
                subscriber = undefined;
                break;

            case STATE.ERROR:
                stopAudioAnimation( messageId, data.audioId );
                subscriber && $pubsub.unsubscribe( subscriber );
                subscriber = undefined;

                audio.markError();
                markError( messageId );
                break;

            case STATE.PLAYING:
                playAudioAnimation( messageId, data.audioId );
                break;
            }
            
        }
        
    }
    extend( AdminAudioMessageView, View.Div );

    ////// API /////////
    return {
        build: build,

        playAudioAnimation: playAudioAnimation,
        stopAudioAnimation: stopAudioAnimation
    }

    function build( message ) {
        return new AdminAudioMessageView( message );
    }

    function playAudioAnimation( messageId ) {

        var WIDTHS = [ 8.3, 13, 23 ],
            $el = findAudioView( messageId ),
            eventId = 'voice-' + messageId,
            index = 0;
        
        Service.$task.repeat( eventId, function() {
            $el.css( 'width', WIDTHS [ index++ % WIDTHS.length ] );
        }, 500 );
        
    }

    function stopAudioAnimation( messageId ) {
        Service.$task.cancelRepeat( 'voice-' + messageId );
        findAudioView( messageId ).css( 'width', 23 );
    }

    function markRead( messageId ) {
        $( getConversationHtmlSelector( messageId ) ).find( '.pp-unread' ).hide();
    }

    function clearError( messageId ) {
        findAudioDescView( messageId ).hide();
    }

    function markError( messageId ) {
        findAudioDescView( messageId )
            .css( 'color', 'red' )
            .text( Service.Constants.i18n( 'AUDIO_PLAY_ERROR' ) )
            .show();
    }

    function findAudioDescView( messageId ) {
        return $( getConversationHtmlSelector( messageId ) ).find( '.pp-desc' );
    }

    function findAudioView( messageId ) {
        return $( getConversationHtmlSelector( messageId ) )
            .find( '.pp-body' )
            .find( 'i' );
    }

    function getConversationHtmlSelector( messageId ) {
        return '#pp-conversation-part-' + messageId;
    }

    function getConversationAudioBodyHtmlSelector( messageId ) {
        return getConversationHtmlSelector( messageId ) + ' .pp-body';
    }
    
} )();

((function(View) {

    /**
     * @constructor
     */
    function PPConversationPartTimestamp(item) {
        View.PPDiv.call(this, {
            id: 'pp-conversation-part-timestamp-' + item.messageId ,
            'class': 'pp-conversation-part-center pp-font'
        });

        this.add(new View.PPDiv({
            'class': 'pp-conversation-part-timestamp-time'
        }).text(item.message.timestamp.timeStr));
    }
    extend(PPConversationPartTimestamp, View.PPDiv);

    View.PPConversationPartTimestamp = PPConversationPartTimestamp;
    
})(View));

View.$smsEmail = (function() {

    var classPrefix = 'msg-sms-email-'
        iconBack = Configuration.assets_path + 'img/icon-back.png',

        activeOption = 'EMAIL',
        clearContext = function() {
            $( '.' + classPrefix + 'options-container a' ).removeClass( classPrefix + 'options-container-active' );
            $( '.' + classPrefix + 'input input' ).focus().val( '' );
        },
        optionEmailElementClick = function() {
            clearContext();
            $( this ).addClass( classPrefix + 'options-container-active' );
            activeOption = 'EMAIL';
            $( '.' + classPrefix + 'input input' ).attr( { type: 'email', placeholder: 'email@domain.com' } );
        },
        optionSmsElementClick = function() {
            clearContext();
            $( this ).addClass( classPrefix + 'options-container-active' );
            activeOption = 'SMS';
            $( '.' + classPrefix + 'input input' ).attr( { type: 'text', placeholder: '+86 123 456 7890' } );
        },
        submitBtnClick = function() {
            var val = $( '.' + classPrefix + 'input input' ).val();
            if (activeOption === 'EMAIL') {
                if ( val === '' ) {
                    $( '.' + classPrefix + 'error' )
                        .text( "This email doesn't look quite right" )
                } else {
                    _submit( val );
                }
            } else if (activeOption === 'SMS') {
                if ( val === '' ) {
                    $( '.' + classPrefix + 'error' )
                        .text( "This number is missing a few digits" );
                } else {
                    _submit( activeOption, val );
                }
            }

            function _submit( optionType, val ) {
                var $input = $( '.' + classPrefix + 'input input' ),
                    $submitBtn = $( '.' + classPrefix + 'submit-button' );

                $input.prop( 'disabled', true );
                $submitBtn.prop( 'disabled', true );
                Ctrl.$smsEmail.submit( val, function( ok ) {
                    if ( ok ) {
                        if (activeOption === 'EMAIL') {
                            $( '.' + classPrefix + 'options-container a:eq(1)' ).hide();
                        } else {
                            $( '.' + classPrefix + 'options-container a:eq(0)' ).hide();
                        }

                        $( '.' + classPrefix + 'submit-container' ).hide();
                        $( '.' + classPrefix + 'options-container a' ).prop( 'disabled', true );
                        $( '.' + classPrefix + 'title' ).text( "You'll be notified here and by" );
                        $( '.' + classPrefix + 'error' ).hide();
                        $input.addClass( classPrefix + 'input-success' ).prop( 'disabled', true );
                    } else {
                        $input.prop( 'disabled', false );
                        $submitBtn.prop( 'disabled', false );
                    }
                } );
            }
        };

    function SmsEmail( item ) {
        View.Div.call( this, { className: classPrefix + 'admin' } );
        
        this.add( new View.P( classPrefix + 'title' ).text( 'Get notified' ) )
            .add( new View.Div( classPrefix + 'options-container' )
                .add( new View.Element( 'a', { className: classPrefix + 'options-container-active',
                                               selector: '.' + classPrefix + 'options-container a:eq(0)', 
                                               event: { click: optionEmailElementClick }  
                                             } ).text( 'Email' ) )
                .add( new View.Element( 'a', { selector: '.' + classPrefix + 'options-container a:eq(1)', 
                                               event: { click: optionSmsElementClick }  
                                             } ).text( 'SMS' ) ) )
            .add( new View.Div( classPrefix + 'input-container' )
                  .add( new View.Div( classPrefix + 'input' )
                        .add( new View.Element( 'input', { selector: '.' + classPrefix + 'input input',
                                                           event: {
                                                               init: function() { $( this ).focus(); }
                                                           },
                                                           type: 'email', 
                                                           placeholder: 'email@domain.com', 
                                                           autocomplete: 'off' } ) ) )
                  .add( new View.Div( classPrefix + 'submit-container' )
                        .add( new View.Div( { className: classPrefix + 'submit-button', 
                                              selector: '.' + classPrefix + 'submit-button',
                                              event: { click: submitBtnClick } } )
                              .add( new View.Div( {className: classPrefix + 'submit-icon', style: 'background-image:url(' + iconBack  + ')' } ) )
                              .add( new View.Div( classPrefix + 'valid-icon' ) ) ) ))
            .add( new View.P( classPrefix + 'error' ) );
    }
    extend (SmsEmail, View.Div);
    
    return {
        build: build
    }

    function build() {
        return new SmsEmail();
    }

}());

((function(View) {

    /**
     * @constructor
     */
    function PPEmojiSelectorGroupIcon(emoji, index, ctrl) {
        View.PPElement.call(this, 'span', {
            title: emoji.title,
            selector: '.pp-emoji-selector-panel-header span:eq(' + index + ')',
            event: {
                click: function() {
                    ctrl.selectGroup(index);
                },
                mouseleave: function() {
                    ctrl.onEmojiGroupIconMouseLeave(index);
                },
                mouseover: function() {
                    ctrl.onEmojiGroupIconMouseOver(index);
                }
            }
        });
        
        this.text(emoji.value);
    }
    extend(PPEmojiSelectorGroupIcon, View.PPElement);

    View.PPEmojiSelectorGroupIcon = PPEmojiSelectorGroupIcon;
    
})(View));

((function(View) {

    /**
     * @constructor
     */
    function PPEmojiSelectorPanelHeader(items, ctrl) {
        View.PPDiv.call(this, {
            id: 'pp-emoji-selector-panel-header',
            style: 'background-color:' + View.Style.Color.base
        }, ctrl);

        if (items && items.length > 0) {
            for (var i=0; i<items.length; ++i) {
                this.add(new View.PPEmojiSelectorGroupIcon(items[i], i, ctrl));
            }
        }
    }
    extend(PPEmojiSelectorPanelHeader, View.PPDiv);

    View.PPEmojiSelectorPanelHeader = PPEmojiSelectorPanelHeader;
    
})(View));

((function(View) {

    /**
     * @constructor
     */
    function PPEmojiIcon(emoji, index, ctrl) {
        View.PPElement.call(this, 'span', {
            title: emoji.title,
            selector: '#pp-emoji-selector-content > span:eq(' + index + ')',
            event: {
                click: function() {
                    ctrl.onEmojiIconClicked(index, emoji);
                },
                
                mouseover: function() {
                    ctrl.onEmojiIconMouseOver(index, emoji);
                },
                
                mouseleave: function() {
                    ctrl.onEmojiIconMouseLeave(index, emoji);
                }
                
            }
        }, ctrl);

        this.text(emoji.value);
    }
    extend(PPEmojiIcon, View.PPElement);

    View.PPEmojiIcon = PPEmojiIcon;
    
})(View));

((function(View) {

    /**
     * @constructor
     */
    function PPEmojiSelectorContent(ctrl) {
        View.PPDiv.call(this, {
            id: 'pp-emoji-selector-content',
            'class': 'pp-emoji-selector-content pp-box-sizing'
        }, ctrl);
        setTimeout(function() {
            ctrl.selectGroup(0);
        });
    }
    extend(PPEmojiSelectorContent, View.PPDiv);

    View.PPEmojiSelectorContent = PPEmojiSelectorContent;
    
})(View));

((function(View) {

    View.$emojiSelector = (function() {
        
        /**
         * @constructor
         */
        function PPEmojiSelector() {
            var ctrl = Ctrl.$emojiSelector.get();
            View.PPDiv.call(this, {
                id: emojiSelectorId,
                'class': emojiSelectorClass + ' pp-box-sizing pp-unselectable',
                event: {
                    init: function() {
                        $(emojiSelectorSelector).css({
                            'display': 'none'
                        });
                    }
                }
            }, ctrl);
            
            this.add(new View.PPEmojiSelectorPanelHeader(ctrl.getDefaultEmojiGroup(), ctrl))
                .add(new View.PPEmojiSelectorContent(ctrl))
                .add(new View.PPDiv('pp-emoji-selector-triangle'))
                .add(new View.PPDiv('pp-emoji-selector-triangle-mask'));
        }
        extend(PPEmojiSelector, View.PPDiv);

        var emojiSelectorId = 'pp-emoji-selector',
            emojiSelectorClass = emojiSelectorId,
            emojiSelectorSelector = '#' + emojiSelectorId,
            emojiSelectorToolsContainerSelector = '#pp-composer-container-tools-container';

        return {
            build: function() {
                return new PPEmojiSelector();
            },

            changeBottomMarginByInputHeight: function(height) {
                var fixBottom = height + 3; // 3 is fix number
                
                $(emojiSelectorToolsContainerSelector).css('bottom', fixBottom);
            }
        }
        
    })();
    
})(View));

/**
 * 
 * Given a string, test whether or not it includes a link url.
 *
 * [Example]:
 *
 * var p = "abcde www.baidu.com defgeh https://ppmessage.cn xyz"
 *
 * var urlChecker = new View.TextUrlChecker();
 * var html = urlChecker.match(p).trustAsHtml();
 * console.log(html);
 * // abcde <a href='www.baidu.com' target='_blank'>www.baidu.com</a> defgeh <a href='https://ppmessage.cn' target='_blank'>https://ppmessage.cn</a> xyz
 *
 * p = "123456abcdef";
 * var nonHtml = urlChecker.match(p).trustAsHtml();
 * console.log(nonHtml);
 * // 123456abcdef
 *
 */
((function(View) {

    /**
     * source: source
     * include: true/false
     *
     * matchIndexArray:
     *     [{begin:1, end:5, url:xxx}, {begin:8, end:10, url:xxx}, ...]
     */
    function TextUrlCheckerResult(source, include, matchIndexArray) {
        this.source = source;
        this.include = include;
        this.matchIndexArray = matchIndexArray;
    }
    TextUrlCheckerResult.prototype.trustAsHtml = function(cssClass) {
        if (!this.include) {
            return this._encodeHtmlEntity(this.source);
        }
        var source = this.source;
        var matchIndexArray = this.matchIndexArray;
        var html = "";
        var sourceBegin = 0;
        var that = this;
        $.each(matchIndexArray, function(index, item) {
            html += that._encodeHtmlEntity(source.substring(sourceBegin, item.begin));
            
            //build link
            var fixHref = /^https?:\/\//.test(item.url) ? item.url : 'http://' + item.url;
            html += "<a href='" + fixHref + "' target='_blank'";
            if (cssClass) html += " class='" + cssClass + "'";
            html += ">";
            html += item.url;
            html += "</a>";

            sourceBegin = item.end;
        });
        if (sourceBegin < source.length) {
            html += this._encodeHtmlEntity(source.substring(sourceBegin, source.length));
        }
        return html;
    };

    //http://www.w3schools.com/html/html_entities.asp
    TextUrlCheckerResult.prototype._encodeHtmlEntity = function(text) {
        var res = text;
        res = res.replace(/</g, '&lt;');
        res = res.replace(/>/g, '&gt;');
        return res;
    };

    function TextUrlChecker() {
    }

    TextUrlChecker.UrlPattern = /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[a-zA-Z0-9\/\-\.=_&%#?:;|]{2,}|www\.[^\s"']+\.[a-zA-Z0-9\/\-\.=_&%#?:;|]{2,})/g;

    TextUrlChecker.prototype.match = function(text) {
        var myArray;
        var matchIndexArray = [];
        var re = TextUrlChecker.UrlPattern;
        while ((myArray = re.exec(text)) !== null) {
            matchIndexArray.push({
                begin: myArray.index,
                end: re.lastIndex,
                url: myArray[0]
            });
        }
        return new TextUrlCheckerResult(text, matchIndexArray.length != 0, matchIndexArray);
    }

    View.TextUrlChecker = TextUrlChecker;
    
})(View));

/**
 * 得到主色调，整体风格，颜色搭配等
 *
 * [Example]:
 *
 * var Style = View.Style.init(); // Don't forget to call `init` method before your first use
 * console.log( 'launcher color is: ', Style.Color.launcher_background_color );
 *
 */
View.Style = ( function() {

    var COLOR,

        api = {
            init: init
        };

    /////// API /////////////

    return api;

    //////// Internal ///////////
    
    function init() {
        api [ 'Color' ] = color();
        return api;
    }

    function color() {
        if ( COLOR !== undefined ) return COLOR;
        
        var mainColor =
            // Try get from `ppcom_launcher_color` first
            ( Service.$app.app() && Service.$app.app().ppcom_launcher_color ) || '#1F8CEB',
            gray = 'white',                
            darkerGray = '#E4E4E4';

        return {
            main_color: mainColor,
            launcher_background_color: mainColor, //小泡背景颜色 /* #1F8CEB; */
            base: gray, //灰色
            base_darker: darkerGray, //深灰色

            hovercard_close_btn: 'rgba(40,45,50,.4)', // hovercard_close_button_background_color
        };
    }
    
} )();

/**
 * 根据 ppSettings.view 来配置和管理 View
 *
 * Example:
 * 
 * var viewSettings = new View.PPSettings().init(ppSettings);
 * viewSettings.getLauncherBottomMargin();
 * viewSettings.getLauncherRightMargin();
 * viewSettings.isShowLauncher();
 *
 */
((function(View) {

    function PPSettings() {
        this._ppSettings = null;
    }

    PPSettings.DEFAULT_BOTTOM_MARGIN = "20px";
    PPSettings.DEFAULT_RIGHT_MARGIN = "20px";

    /**
     * Do not forget to init ppSettings
     */
    PPSettings.prototype.init = function(ppSettings) {
        this._ppSettings = ppSettings;
        return this;
    };

    /**
     * 右下角距离网页底部边缘距离，默认20px
     */
    PPSettings.prototype.getLauncherBottomMargin = function() {
        return this._getValueFromPPSettingsView('launcher_bottom_margin', PPSettings.DEFAULT_BOTTOM_MARGIN);
    };

    /**
     * 右下角距离网页右侧边缘距离，默认20px
     */
    PPSettings.prototype.getLauncherRightMargin = function() {
        return this._getValueFromPPSettingsView('launcher_right_margin', PPSettings.DEFAULT_RIGHT_MARGIN);
    };

    /**
     * `PP`加载的时候，是否默认显示小泡
     */
    PPSettings.prototype.isShowLauncher = function() {
        return this._getValueFromPPSettingsView('launcher_is_show', true);
    };

    /**
     * 从 `_ppSettings.view` 中取得`key`的值，如果为空的话，那么用`defaultValue`来替代
     */
    PPSettings.prototype._getValueFromPPSettingsView = function(key, defaultValue) {
        var value = defaultValue;
        if (this._ppSettings && this._ppSettings.view && key in this._ppSettings.view) {
            value = this._ppSettings.view[key];
        }
        return value;
    };

    View.PPSettings = PPSettings;
    
})(View));

//
// [ View ] <-----------> [ Controller ] <------------> [ Entity ]
//
((function(Ctrl) {

    /**
     * @constructor
     */
    function PPBaseCtrl(modal) {
        
        var _modal = modal;

        this.empty = function(selector) {
            $( selector ).empty();
        };

        this.show = function(selector, show) {
            $( selector ).css('display', show ? 'block' : 'none');
        };

        this.getModal = function() {
            return _modal;
        };

        this.setModal = function(modal) {
            _modal = modal;
        };
        
    }
    
    Ctrl.PPBaseCtrl = PPBaseCtrl;
    
})(Ctrl));

((function(Ctrl) {

    function AppProfileContainerCtrl(msgItem) {
        Ctrl.PPBaseCtrl.call(this);

        var welcome = msgItem.message.welcome;

        this.getAppTeamName = function() {
            return welcome.appTeamName;
        };

        this.getWelcomeText = function() {
            return welcome.appWelcomeText;
        };

        this.getActiveAdmins = function() {
            return welcome.activeAdmins;
        };
        
    }
    extend(AppProfileContainerCtrl, Ctrl.PPBaseCtrl);

    Ctrl.AppProfileContainerCtrl = AppProfileContainerCtrl;
    
})(Ctrl));

Ctrl.$composerContainer = (function() {

    function PPComposerContainerCtrl() {
        Ctrl.PPBaseCtrl.call(this);

        var $tools = Service.$tools,
            $device = Service.$device,
            Constants = Service.Constants,

            inMobile = $device.isMobileBrowser(),

            self = this,
            
            selector = '#pp-composer-container',
            composerContainerEmojiBtnSelector = '#pp-composer-container-emoji-btn',
            composerContainerTextareaSelector = '#pp-composer-container-textarea',
            conversationContentSelector = 'pp-conversation-content', //NOTE: No '#'
            composerContainerFileSelector = '#pp-composer-container-file-selector',
            composerContainerWarning = '#pp-composer-container-warning',

            // After send text finish , place cursor at the beginning of textarea
            resetCursor = function() {

                // find element
                var txtElement = $(composerContainerTextareaSelector)[0];
                
                if (txtElement.setSelectionRange) { 
                    txtElement.focus(); 
                    txtElement.setSelectionRange(0, 0); 
                } else if (txtElement.createTextRange) { 
                    var range = txtElement.createTextRange();  
                    range.moveStart('character', 0); 
                    range.select(); 
                }     
            };

        this.getTextareaPaddingStyle = function() {
            return this.isShowEmojiIcon() ? 'padding: 18px 70px 18px 30px' : 'padding: 18px 45px 18px 30px';
        };

        this.hide = function() {
            $(selector).css('margin-bottom', '-59px');
        };

        this.show = function(cb) {
            $(selector).animate({
                'margin-bottom': '0px'
            }, 200, function() {
                if (cb) cb();
            });
        };

        this.onEmojiSelectorSiblingClicked = function() {
            Ctrl.$emojiSelector.get().showSelector(false);
        };
        
        this.onEmojiSelectorBtnClicked = function() {
            Ctrl.$emojiSelector.get().toggleSelector();
        };

        this.onEmojiSelectorBtnMouseOver = function() {
            $(composerContainerEmojiBtnSelector).css('opacity', 1.0);
        };

        this.onEmojiSelectorBtnMouseLeave = function() {
            $(composerContainerEmojiBtnSelector).css('opacity', 0.4);
        };

        this.onFileSelectorBtnClicked = function() {
            Ctrl.$emojiSelector.get().showSelector(false);
            $("#pp-composer-container-input").trigger('click');
        };

        this.onFileSelectorBtnMouseOver = function() {
            $(composerContainerFileSelector).css('opacity', 1.0);
        };

        this.onFileSelectorBtnMouseLeave = function() {
            $(composerContainerFileSelector).css('opacity', 0.4);
        };

        // 显示不正常的：
        this.onChatTextareaFocus = function() {
            Ctrl.$groupMembers.hide();
            View.$conversationContent.scrollToBottom();
            $( composerContainerTextareaSelector ).addClass('pp-textarea-focus');
        };

        this.onTextareaFocusOut = function() {
            $(composerContainerTextareaSelector).removeClass('pp-textarea-focus');
        };

        this.onTextareaChange = function() {
            if (!this.isSendButtonShow()) {
                return;
            }
            var text = $(composerContainerTextareaSelector).val();
            var enableSendButton = text && text.length > 0;
            this.disableSendButton(!enableSendButton);
        };

        this.onChatTextareaKeyDown = function(event) {        
            if (event.which == 13) {
                event.preventDefault(); // Don't make a new line
                this.sendText();
            }
        };

        this.sendText = function() {            
            var text = $(composerContainerTextareaSelector).val();
            if (text) {
                Ctrl.$emojiSelector.get().showSelector(false);
                $(composerContainerTextareaSelector).val('');
                $(composerContainerTextareaSelector).focus();
                View.$composerContainer.fixInputRows();
                $(composerContainerTextareaSelector)[0].rows = 1;

                // Send text message
                new Service.PPMessage.Builder( Service.PPMessage.TYPE.TEXT )
                    .textMessageBody(text)
                    .build().send();

                // Place cursor to the begining
                // resetCursor();
            }
            this.disableSendButton(true);
        };

        this.onTextareaInit = function() {
            if ($device.isIE()) {
                $(composerContainerTextareaSelector).val('');
            }
        };

        this.onFileSelect = function(file) {
            
            var filePath = $(file).val();
            var isImage = $tools.isImage(filePath);
            var f = file.files[0];

            //read file info and send it
            var fileReader = new FileReader();
            fileReader.onloadend = function(e) {
                // Image 
                if (isImage) {
                    if (e.target && e.target.result) {

                        // Send image message
                        new Service.PPMessage.Builder( Service.PPMessage.TYPE.IMAGE )
                            .imageBody({
                                file: f, url: filePath, data: e.target.result
                            })
                            .build().send();
                        
                    }
                } else {
                    // Not a Image
                    var fileName = filePath;
                    var slash = -1;
                    if ((slash = filePath.lastIndexOf('\\')) > 0) {
                        fileName = filePath.substring(slash + 1);
                    }

                    // Send file message
                    new Service.PPMessage.Builder( Service.PPMessage.TYPE.FILE )
                        .fileBody({
                            fileUrl: filePath,
                            file: f,
                            fileName: fileName,
                            fileSize: e.total
                        })
                        .build().send();

                }
            };
            fileReader.onerror = function(e) {
                Service.$debug.d('FileReader upload file error. filePath: %s, error: %s.', filePath, e);
            };

            if (file && file.files[0]) {
                var size = file.files[0].size;
                if (size > Constants.MAX_UPLOAD_SIZE) {
                    //TODO
                    var hint = Constants.i18n('MAXIMUM_UPLOAD_SIZE_HINT') + Constants.MAX_UPLOAD_SIZE_STR;
                    
                    $(composerContainerWarning).css('display', 'block');
                    $('#pp-composer-container-warning-span').text(hint);
                    setTimeout(function() {
                        $(composerContainerWarning).animate({
                            'opacity': 0.01
                        }, 3000, function() {
                            $(composerContainerWarning).css('display', 'none');
                            $(composerContainerWarning).css('opacity', '1.0');
                        });
                    }, 2000);
                } else {
                    fileReader.readAsDataURL(file.files[0]);
                }
                //clear it
                $(file).val('');
            }
        };

        this.isShowEmojiIcon = function() {
            return $tools.isShowEmojiIcon();
        };

        this.isSendButtonShow = function() {
            //return inMobile;
            //FIXME: send not working for android/ios
            return false;
        };

        this.onSendButtonInit = function() {
            this.disableSendButton(true);
        };

        this.onSendButtonMouseDown = function(e) {
            e.stopImmediatePropagation();
            e.preventDefault(); // prevent fire focus event

            this.sendText();
        };

        this.disableSendButton = function(disable) {
            // $('#pp-composer-send-button').prop('disabled', disable);
            $('#pp-composer-send-button').css('background', disable ? '#CCCCCC' : '#0074b0');
        };

        this.resetCursor = resetCursor;
    };
    extend(PPComposerContainerCtrl, Ctrl.PPBaseCtrl);

    var instance = null,

        get = function() {
            if (instance == null) {
                instance = new PPComposerContainerCtrl();
            }
            return instance;
        };

    return {
        get: get
    }
    
})();

//
// $conversationContent ----( conversation_uuid )-----> [ modal - 1 ,
//                                                        modal - 2 ,
//                                                        modal - 3 ,
//                                                        ...       ]
//
// $conversationContent.init(); // call only once
//
Ctrl.$conversationContent = (function() {

    var self = this,

        DEFAULT_SHOW_TIMEOUT = 200,

        activeConversation, // VERY VERY IMPORTANT

        selector = '#pp-conversation-content',
        conversationSelector = 'pp-conversation',

        // call once
        init = function() {

            // on new message arrived
            Service.$pubsub.subscribe('msgArrived/chat', function(topics, ppMessage) {

                var body = ppMessage.getBody(),
                    groupId = body.conversation.uuid;

                appendMessage( body );
                View.$conversationContent.scrollToBottom();    
                
            });

            // some one typing ...
            Service.$pubsub.subscribe('ws/typing', function ( topics, typingMessage ) {

                // We are in chatting panel and the `conversation_uuid` equal current chatting group
                // We only watching the current chatting conversation and unwatch it immediately once close current conversation
                if ( View.$conversationContentContainer.visible() ) {

                    var conversationId = getConversationId();
                    if ( conversationId ) {
                        
                        var EVENT_ID = 'typing', // default typing event identifier
                            eventId = EVENT_ID, // typing event identifier

                            oldHeaderTitle,
                            $sheetHeaderCtrl = Ctrl.$sheetheader,
                            setHeaderTitle = View.$sheetHeader.setTitle, // We only change title in `view`, not affect the `modal`
                            getHeaderTitle = $sheetHeaderCtrl.getHeaderTitle; // so `getHeaderTitle` always return the origin header title

                        Service.$schedule
                            .schedule(function() {
                                oldHeaderTitle = getHeaderTitle();
                                setHeaderTitle(Service.Constants.i18n('TYPING'));
                            }, eventId )
                            .after(function() {
                                setHeaderTitle(oldHeaderTitle);
                            })
                            .onCancel(function() {
                                setHeaderTitle(oldHeaderTitle);
                            })
                            .start();
                        
                    }
                    
                }
                
            });

            // user online or offline
            Service.$pubsub.subscribe ( 'ws/online', function ( topics, onlineMessage ) {
                // `user_uuid` may not exist, may be `welcome info` is downloading or some other reasons
                if (!Service.$users.exist(onlineMessage.user_uuid)) {
                    return;
                }
	            if (onlineMessage.mobile == "UNCHANGED" && onlineMessage.browser == "UNCHANGED") {
                    return;
	            }
                var user = Service.$users.getUser(onlineMessage.user_uuid).getInfo();
                if (onlineMessage.mobile != "UNCHANGED") {
                    user.is_mobile_online = (onlineMessage.mobile=="ONLINE");
                }
                if (onlineMessage.browser != "UNCHANGED") {
                    user.is_browser_online = (onlineMessage.browser=="ONLINE");
                }
                var is_online = user.is_mobile_online || user.is_browser_online;
                if (is_online !== user.is_online) {
                    Service.$users.getUser(user.user_uuid).update({user_uuid: user.user_uuid, is_online: is_online});
                }
            });
            
            return this;
        },

        // get modal associated with `conversationId`
        // @param `conversationId` is @optional
        getModal = function( conversationId ) {
            var uuid = conversationId || getConversationId();
            return uuid && Modal.$conversationContentGroup.get( uuid );
        },

        prependMessages = function(msgs, callback) { // add msgs(message array) at head

            var chatBox = $(selector),
                
                // Store current scrollPosition
                scrollPosition = chatBox[0].scrollHeight,

                html = '';
            
            $.each(msgs, function(index, item) {
                html += new View.PPConversationPart(msgs[index]).getElement()[0].outerHTML;
            });

            chatBox.prepend(html);
            chatBox.scrollTop(chatBox[0].scrollHeight - scrollPosition);
            
            if (callback) callback();
        },

        loadHistorys = function(beforeUpdateViewCallback, completeCallback) {

            var conversationId = getConversationId();

            if ( conversationId ) {
                
                // load history
                getConversationHistory( conversationId, function( list, loadable ) {

                    if (beforeUpdateViewCallback) beforeUpdateViewCallback();

                    // tell modal is can load more historys
                    getModal() && getModal().setLoadable(loadable);
                    
                    // update view
                    prependMessages(list, function() {
                        if (completeCallback) completeCallback(list); 
                    });
                });
                
            }
            
        },

        // TODO:
        // 'click' event will conflict with 'onStartMove' event
        onConversationContentClicked = function() { // 'click' event

            Ctrl.$emojiSelector.get().showSelector(false); // hide emoji-selector panel
            Ctrl.$groupMembers.hide(); // hide `group-members` if exist

            if (Service.$device.isMobileBrowser()) { // hide keyboard if on mobile browser
                View.$composerContainer.blur();
            }
            
        },
    
        getConversationHistory = function( conversationId, callback ) {
            getModal().getConversationHistory( conversationId, callback );
        },

        /**
         * 聊天信息初始化
         */
        onConversationContentInit = function() {
            // add pull to refresh button to get history
            // 
            // There seems like some bug in `pulltorefresh.jquery.js` library, in mobile browser, when click `conversation-content` element,
            // it will never trigger `click` event, instead of, if not trigger `move` event, will end up with trigger `end` event,
            // so we trigger `click` event when `end` event callback happens on this situtation.
            $(selector).append(View.$pulltoRefresh.build().getHTML());
        },

        /**
         * Append Message at tail
         */
        appendMessage = function( message ) {

            var modal = getModal( message.conversation.uuid );
            
            if ( modal ) {
                var timestampMsg = modal.addMessage(message);
                if ( timestampMsg ) {
                    $(selector).append(new View.PPConversationPartTimestamp( timestampMsg ).getElement()[0].outerHTML);
                }
                $(selector).append(new View.PPConversationPart( message ).getElement()[0].outerHTML);                
            }

        },

        // push a new messageid to messageIdArrays for message duplicate check
        updateMessageIdsArray = function( messageId ) {
            getModal() && getModal().updateMessageIdsArray(messageId);
        },

        // show conversation-content panel with callback
        //
        // @param settings:
        // {
        //     delay: 200,
        //     fadeIn: true/false, default: true
        // }
        show = function( conversation, settings, callback) {
            var delay = ( settings && settings.delay && settings.delay ) || DEFAULT_SHOW_TIMEOUT,
                fadeIn = ( settings && settings.fadeIn && settings.fadeIn ) || true,

                showCallback = function() {// Make callback
                    $timeout(function() {

                        // replace origin `click` event to pulltorefresh.js
                        Ctrl.$pulltoRefreshController
                            .get( Ctrl.$conversationContent )
                            .loadable(isLoadable())
                            .onend( onConversationContentClicked )
                            .bindEvent();

                        // When the user second pressed `launcher` to open PPCom,
                        // then the keyboard will cover the textarea in mobile browser,
                        // currently, the best way is let the user trigger `focus` event manually
                        if (!Service.$device.isMobileBrowser()) {
                            View.$composerContainer.focus();
                        }
                        
                        // show
                        View.$conversationContentContainer.show( fadeIn );

                        // callback
                        if (callback) callback();                
                    }, delay);
                };

            // We need to disable body scroll, so let textarea move up correctly on iPhone/iPod... devices when focus,
            // avoid move up too high
            // @see `sheetheaderctrl.js` `minimize` methods
            if (Service.$device.isIOS()) {
                Service.$device.disableScroll();
            }

            // Make sure `conversation` is ok, and really exist
            if ( conversation && conversation.token ) {

                var old = activeConversation;

                if ( old !== conversation ) {
                    onHide( old ); // `onHide` old conversation
                    onStart( conversation ); // `onStart` new conversation
                } else {
                    onResume( conversation ); // same conversation call `onResume` event
                }

                showCallback();   
            }
            
        },

        isLoadable = function() {
            return getModal() && getModal().isLoadable();
        };

    return {
        init: init,
        show: show,
        hide: hide,

        // Events
        onConversationContentClicked: onConversationContentClicked,
        onConversationContentInit: onConversationContentInit,

        appendMessage: appendMessage,
        loadHistorys: loadHistorys,
        updateMessageIdsArray: updateMessageIdsArray,

        isLoadable: isLoadable
    }

    ///////////////////////////////////////////////////////////
    //// Conversation Content State Control ( Life Cycle ) ////
    ///////////////////////////////////////////////////////////
    
    ////////////// `onStart` -> `onResume` -> `onHide /////////

    function onStart ( conversation ) {

        activeConversation = conversation;
        
        Ctrl.$conversationPanel.mode( Ctrl.$conversationPanel.MODE.CONTENT );

        // If this method has been called, generally this was clicked by user manually, so we consider
        // this is an ACTIVE CLICK
        Ctrl.$hoverCard.get().notifyUserActiveClickPPCom();
        
        __Monitor.report( __MonitorEvent.show, activeConversation );

        // watch conversation typing
        // Or we can delay `watch action` after the service user send the first message ?
        conversation && conversation.uuid && Service.$notifyTyping
            .get( Service.$notification )
            .watch( conversation.uuid );

        onResume( conversation );
    }

    // reload all data associated with this `conversation`
    function onResume( conversation ) {
        
        // Update view associated with this conversation
        // CLEAR data except for `pull to refresh` element
        // NOTE: `html` method will remove the events bind to `pull to refresh` element, so you MUST bind events again
        View.$conversationContent.html( View.$pulltoRefresh.el() );
        var messageArray = getModal() && getModal().getMessages() || [],
            html = '';
        $.each(messageArray, function(index, item) {
            html += new View.PPConversationPart(messageArray[index]).getElement()[0].outerHTML;
        });
        View.$conversationContent.append(html);

        // Clear unread count associated with this `conversation`
        //
        // because currently, when user click to the `conversation-list` panel, the html are all removed and
        // re create again based the conversation list's new state, so it needn't call the method
        // `View.$groupContentItem.hideUnread( getConversationId() );`
        var m = Modal.$conversationContentGroup.get ( getConversationId() );
        Ctrl.$sheetheader.decrUnread ( m.unreadCount() );
        m.clearUnread();

        __Monitor.report( __MonitorEvent.resume, activeConversation );
        
    }

    function onHide ( conversation ) {

        // unWatch conversation typing
        conversation && conversation.uuid &&
            Service.$notifyTyping.get( Service.$notification )
            .unWatch( conversation.uuid );

        // Close audio player
        Service.$audioContext.close();

        if ( conversation ) __Monitor.report( __MonitorEvent.hide, conversation );
        
    }

    function hide() {
        View.$conversationContentContainer.hide();
        onHide( activeConversation );
        activeConversation = undefined;
    }

    /////// Tools ///////////
    
    function getToken() {
        return activeConversation && activeConversation.token;
    }

    function getConversationId() {
        return activeConversation && activeConversation.uuid;
    }
    
})();

Ctrl.$conversationList = ( function() {

    //////// API /////////
    return {
        show: show,
        showItem: showItem,        
        hide: hide
    }

    /////// Implementation ///
    function show() {
        Ctrl.$conversationPanel.mode( Ctrl.$conversationPanel.MODE.LIST );

        View.$loading.show();
        Service.$conversationManager.asyncGetList( function( conversationList ) {
            
            // update view
            View.$groupContent
                .update( prepareData( conversationList ) )
                .show();
            
            Ctrl.$conversationContent.hide();
            View.$loading.hide();

            markUnreadState ( conversationList );
            conversationDescriptionLoader( conversationList ).load( function( token, description, timestamp ) {
                View.$groupContentItem.description( token, description );
                View.$groupContentItem.timestamp( token, new timeago().format( timestamp ) );
            } );
            
        } );

        function prepareData( conversationList ) {

            var viewData = [];
            conversationList && $.each( conversationList, function( index, item ) {

                var uuid = item.token,
                    icon,
                    name,
                    summary;

                var conversationData = item.conversation_data || item;
                icon = Service.$tools.icon.get( conversationData.conversation_icon );
                name = conversationData.conversation_name;

                viewData.push( {
                    uuid: uuid,
                    icon: icon,
                    name: name,
                    summary: summary
                } );
                
            } );
            return viewData;
            
        }

        function markUnreadState ( conversationList ) {

            conversationList && $.each( conversationList, function( index, item ) {

                var token = item.token,
                    m = Modal.$conversationContentGroup.get ( token ),
                    $groupItemView = View.$groupContentItem;
                
                if ( m.unreadCount() > 0 ) {
                    $groupItemView.showUnread( token , m.unreadCount() );
                } else {
                    $groupItemView.hideUnread( token );
                }       
                
            } );
            
        }
    }

    /////// showItem /////////
    function showItem( token ) {

        var $conversationManager = Service.$conversationManager,
            conversation = $conversationManager.find( token ),
            TYPE = $conversationManager.TYPE;
            
        if ( conversation !== undefined ) {
            before();
            showItemConversation( conversation );
        }

        function before() {
            View.$loading.show(); // show loading view
            View.$groupContent.hide(); // Hide group-content-view
        }

        function showItemConversation( conversation ) {
            show( token );
        }

        function show( token ) {
            
            if ( token !== undefined ) {
                var $manager = Service.$conversationManager;            
                $manager.activeConversation( token );
                Ctrl.$conversationContent
                    .show( $manager.activeConversation(), {}, onSuccessCallback );                
            } else {
                onErrorCallback();
            }

        }

        function onErrorCallback() {
            View.$loading.hide(); // hide loading view
            View.$groupContent.show(); // Hide group-content-view
        }

        function onSuccessCallback() {
            Ctrl.$conversationPanel.mode( Ctrl.$conversationPanel.MODE.CONTENT );
            
            View.$loading.hide(); // hide loading view
            View.$composerContainer.focus(); // focus
        }
        
    }

    ///////// hide ///////////
    function hide() {
        
    }

    //////// conversationDescLoader /////
    function conversationDescriptionLoader( conversationList ) {

        return {
            load: load
        }

        function load( callback ) {
            conversationList && $.each( conversationList, function( index, item ) {
                    
                // 1. try to find latest_message from local
                var modal = Modal.$conversationContentGroup.get ( item.token );
                if ( modal && !modal.isEmpty() ) {
                    var lastMsg = modal.getMessages()[ modal.getMessages().length - 1 ];
                    if ( callback ) callback( item.token, 
                                              Service.PPMessage.getMessageSummary( lastMsg ),
                                              lastMsg.messageTimestamp * 1000 );
                    return;
                }
                    
                // 2. try to find from item.latest_message
                if ( item.latest_message ) {
                    new Service
                        .ApiMessageAdapter( Service.$json.parse( item.latest_message.message_body ) )
                        .asyncGetPPMessage( function( ppMessage, success ) {
                            
                            if ( success ) {
                                if ( callback ) callback( item.token, 
                                                          success ? ppMessage.getMessageSummary() : "",
                                                          ppMessage.getBody().messageTimestamp * 1000 );
                            }
                                
                        } );
                }
                
            } );
        }
    }
    
} )();

//
// conversation-panel manage :
//
// - conversation-list : `MODE.LIST`
// - conversation-content : `MODE.CONTENT`
// - conversation-waiting : `MODE.WAITING`
//
Ctrl.$conversationPanel = ( function() {

    var MODE = { LIST: 'LIST', CONTENT: 'CONTENT', WAITING: 'WAITING' },
        cMode = MODE.CONTENT,
        POLLING_QUEUE_LENGTH_EVENT_ID = 'POLLING_QUEUE_LENGTH_EVENT_ID';

    subscribeEvent();

    //////// API //////////
    return {
        MODE: MODE,
        mode: mode,

        stopPollingWaitingQueueLength: stopPollingWaitingQueueLength,
        isOpen: isOpen
    }

    ////// Implementation //

    function mode( m ) { //Query current mode
        
        if ( m === undefined ) {
            return cMode;    
        }

        cMode = m;

        switch ( cMode ) {
        case MODE.LIST:
            modeList();
            stopPollingWaitingQueueLength();
            break;

        case MODE.CONTENT:
            // Strictly speaking ... We show `dropDownMenu` should decide by the conversation members should > 1
            // for simply, we always show it here, the count of conversation's members seldom not > 1
            View.$sheetHeader.showDropDownButton();
            View.$sheetHeader.showGroupButton(); // show group button
            View.$sheetHeader.showTeamProfile();
            stopPollingWaitingQueueLength();
            break;

        case MODE.WAITING:
            modeList();
            View.$groupContent.hide();
            Ctrl.$conversationContent.hide();
            View.$loading.show();
            Ctrl.$sheetheader.setHeaderTitle( Service.Constants.i18n( 'WAITING_AVALIABLE_CONVERSATION' ) );
            startPollingWaitingQueueLength();
            break;
        }
    }

    function isOpen() {
        return View.$launcher.state() == View.$launcher.STATE.CLOSE;
    }

    // =======helpers==========

    function modeList() {
        Service.$schedule.cancelAll(); // Cancel all sechedule tasks
        View.$sheetHeader.hideGroupButton();
        View.$sheetHeader.hideDropDownButton();
        Ctrl.$groupMembers.hide();
    }

    function subscribeEvent() {
        var $pubsub = Service.$pubsub,
            $conversationManager = Service.$conversationManager,
            WAITING_TOPIC = $conversationManager.EVENT.WAITING,
            AVALIABLE_TOPIC = $conversationManager.EVENT.AVALIABLE,
            TIMEOUT_DELAY = 200;
        
        $pubsub.subscribe( WAITING_TOPIC, function( topics, data ) {
            //
            // Only when the launcher is not showing ( that is: messagePanel is showing ),
            // we enter to `MODE.WAITING` mode.
            //
            // We should call the api `Ctrl.$launcher.get().isLauncherShow` after
            // the ( hide launcher && show messagePanel ) css animation finished ( about 300ms ) here, otherwise,
            // we may get a wrong value here ( because the css animation is executing )
            //
            $timeout( function() {

                !Ctrl.$launcher.get().isLauncherShow() && mode( MODE.WAITING );
                
            }, TIMEOUT_DELAY );            
        } );

        $pubsub.subscribe( AVALIABLE_TOPIC, function( topics, data ) {
            if ( mode() !== MODE.WAITING ) return;
            
            Ctrl.$sheetheader.setHeaderTitle();
            
            View.$groupContent.hide();
            Ctrl.$conversationContent.show(
                Service.$conversationManager.activeConversation(),
                { fadeIn: false, delay: 0 },
                function() {
                    mode( MODE.CONTENT );
                    View.$loading.hide();
                    View.$composerContainer.focus();
                } );
        } );
    }

    function startPollingWaitingQueueLength() {
        Service.$polling.run( { eventID: POLLING_QUEUE_LENGTH_EVENT_ID,
                                apiFunc: Service.$api.getWaitingQueueLength,
                                apiRequestParams: {
                                    app_uuid: Service.$app.appId(),
                                    user_uuid: Service.$user.quickId()
                                },
                                onGet: onGet } );
    }

    function stopPollingWaitingQueueLength() {
        Service.$polling.cancel( { eventID: POLLING_QUEUE_LENGTH_EVENT_ID } );
        Service.$conversationAgency.cancel();
        View.$loading.hide();
    }

    function onGet( response, success ) {
        if ( success ) {
            var text = Service.$tools.format( Service.Constants.i18n( 'WAITING_LENGTH_HINT' ), response.length );
            View.$loading.text( text );
            //Service.$debug.h().d(response);
            if (response.conversation_uuid) {
                Service.$pubsub.publish(Service.$conversationManager.EVENT.CONVERSATION_UUID_AVALIABLE, response.conversation_uuid);
            }
        }
    }
    
} )();

Ctrl.$emojiSelector = ( function() {

    var instance;
    
    return {
        get: function() {
            if ( !instance ) {
                instance = new PPEmojiSelectorCtrl();
            }
            return instance;
        }
    }

    function PPEmojiSelectorCtrl() {
        Ctrl.PPBaseCtrl.call(this);

        var _groupIndex = -1,
            self = this,

            chatBoxSelector = "#pp-composer-container-textarea",
            emojiSelector = '#pp-emoji-selector',

            // find $(emoji) at the specified index
            findEmoji = function(index) {
                var selector = '#pp-emoji-selector-content > span:eq(' + index + ')';
                return $(selector);
            },

            // find $(groupEmoji) at the sepcified index
            findGroupEmoji = function(index) {
                var selector = '.pp-emoji-selector-panel-header span:eq(' + index + ')';
                return $(selector);
            },

            // get group title by groupIndex
            findGroupTitle = function(index) {
                return self.getDefaultEmojiGroup()[index].title;
            };
        
        this._showSelector = false;

        this.toggleSelector = function() {
            this._showSelector = !this._showSelector;
            this.showSelector(this._showSelector);
            View.$composerContainer.focus();
        };

        this.showSelector = function(show) {
            this._showSelector = show;
            this.show(emojiSelector, this._showSelector);
            this.show('#pp-emoji-selector-sibling', this._showSelector);
        };

        this.getDefaultEmojiGroup = function() {
            return [{
                value: Service.$emoji.getEmojiCode('People', 'smile').value,
                title: 'People'
            },{
                value: Service.$emoji.getEmojiCode('Nature', 'cherry_blossom').value,
                title: 'Nature'
            },{
                value: Service.$emoji.getEmojiCode('Objects', 'bell').value,
                title: 'Objects'
            },{
                value: Service.$emoji.getEmojiCode('Places', 'blue_car').value,
                title: 'Places'
            },{
                value: Service.$emoji.getEmojiCode('Symbols', 'capital_abcd').value,
                title: 'Symbols'
            }];
        };

        this.onEmojiIconClicked = function(index, emoji) {

            //get emoji body
            var txtToAdd = findEmoji(index)[0].textContent;

            if (!$(chatBoxSelector).val()) {
                this.showSelector(false);

                // Send emoji message
                new Service.PPMessage.Builder( Service.PPMessage.TYPE.EMOJI )
                    .emojiMessageCode(txtToAdd)
                    .build().send();
                
            } else {
                //find insert position
                var caretPos = document.getElementById("pp-composer-container-textarea").selectionStart;
                var textAreaTxt = $(chatBoxSelector).val();
                var text = textAreaTxt.substring(0, caretPos) + txtToAdd + textAreaTxt.substring(caretPos);
                //insert emoji to textarea
                $(chatBoxSelector).val(text);
                //focus , move cursor to the right position
                $(chatBoxSelector)[0].focus();
                $(chatBoxSelector)[0].setSelectionRange(caretPos + txtToAdd.length, caretPos + txtToAdd.length);

                View.$composerContainer.fixInputRows();
            }
        };

        this.onEmojiIconMouseOver = function(index, emoji) {
            findEmoji(index).css({
                'background-color': '#E4E4E4'});
        };

        this.onEmojiIconMouseLeave = function(index, emoji) {
            findEmoji(index).css({
                'background-color': '#FFF'});
        };

        /**
         * Emoji group icon on mouse leave event
         */
        this.onEmojiGroupIconMouseLeave = function(groupIndex) {
            // Same group
            if (_groupIndex == groupIndex) return;
            
            findGroupEmoji(groupIndex).css('background-color', View.Style.Color.base);
        };

        /**
         * Emoji group icon on mouse over event
         */
        this.onEmojiGroupIconMouseOver = function(groupIndex) {
            // Same group
            if (_groupIndex == groupIndex) return;
            
            findGroupEmoji(groupIndex).css('background-color', View.Style.Color.base_darker);
        };

        /**
         * filter emoji function
         */
        this._filterEmojiFunc = function(emojiKey) {
            var that = this;
            if (Service.$device.isIE()) {
                var index = $.inArray(emojiKey, that._IE_EMOJI_FILTER_ARRAY);
                return index >= 0;
            } else if (Service.$device.isWindowsPlatform()) {
                if (Service.$device.isFirefox()) {
                    var index = $.inArray(emojiKey, that._WINDOWS_FIREFOX_EMOJI_FILTER_ARRAY);
                    return index >= 0;
                }
            }
            return false;
        };

        this.selectGroup = function(groupIndex) {
            // Same group
            if (_groupIndex == groupIndex) return;
            
            var _groupItems = [],
                _cacheGroupIndex = _groupIndex,
                groupTitle = findGroupTitle(groupIndex);

            // Cache group index
            _groupIndex = groupIndex;
            
            // Filter Emojis to _groupItems
            var emojis = Service.$emoji.getEmojiGroup(groupTitle, this._filterEmojiFunc);
            for (var emoji in emojis) {
                var obj = emojis[emoji];
                _groupItems.push({
                    value: obj.value,
                    title: obj.title
                });
            }

            // Clear last active group css style
            if (_cacheGroupIndex != -1) {
                findGroupEmoji(_cacheGroupIndex).removeClass('active');   
            }
            // Active the new group one
            findGroupEmoji(groupIndex).removeAttr('style').addClass('active');

            // update emojis under the group
            this.empty('.pp-emoji-selector-content');

            var self = this;
            var html = '';
            $.each(_groupItems, function(index, item) {
                html += new View.PPEmojiIcon(item, index, self).getElement()[0].outerHTML;
            });
            $('.pp-emoji-selector-content').append(html);

        };
        
    }
    extend(PPEmojiSelectorCtrl, Ctrl.PPBaseCtrl);

    PPEmojiSelectorCtrl._IE_EMOJI_FILTER_ARRAY = ['grinning', 'stuck_out_tongue', 'open_mouth', 'confused'];
    PPEmojiSelectorCtrl._WINDOWS_FIREFOX_EMOJI_FILTER_ARRAY = ['grinning', 'stuck_out_tongue', 'open_mouth', 'confused'];
    
} )();

Ctrl.$groupMembers = ( function() {

    ////////// API /////////////
    return {
        show: show,
        hide: hide,
        isShow: isShow,

        onMemberClicked: triggerMemberClickEvent
    }

    //////// Implementation ////////

    function show() {

        // 1. get current group identifier
        var token = findConversationId();

        // 2. show it
        View.$sheetHeader.changeDropDownButtonToShowState();
        View.$groupMembers.show( token );
        
    }

    function hide( animate ) {

        // 1. get current group identifier
        var token = findConversationId();

        // 2. hide it
        View.$sheetHeader.changeDropDownButtonToHideState();
        View.$groupMembers.hide( token, animate );
        
    }

    function isShow() {
        return View.$groupMembers.isShow();
    }

    function findConversationId() {
        var activeConversation = Service.$conversationManager.activeConversation();
        return activeConversation && activeConversation.token;
    }

    function triggerMemberClickEvent( userId, callback ) {
        View.$sheetHeader.hideTeamProfileFull( function() {

            Service.$conversationManager.asyncGetConversation( {
                user_uuid: userId
            } , function ( conversation ) {
                
                conversation && Service.$conversationManager.activeConversation( conversation.token );
                Ctrl.$conversationContent.show( conversation );
                $onResult( undefined, callback );
                
            } );

        } );
    }
    
} )();

/**
 *
 * [Example]:
 * var launcherHoverCardCtrl = Ctrl.$hoverCard;
 * launcherHoverCardCtrl.showHoverCard(); // 显示HoverCard
 * launcherHoverCardCtrl.hideHoverCard(); // 隐藏HoverCard
 *
 */
Ctrl.$hoverCard = (function() {

    function HoverCardController() {
        Ctrl.PPBaseCtrl.call(this);

        var _timeoutEvent = null,
            _isShowing = false,
            _isPageLoadEndShowing = false, // When PPCom load end, hoverCard will show automatically if need
            _inited = false,

            self = this,

            // jQuery Elements Selectors
            ppMessageSelector = '#pp-messenger',
            hovercardSelector = '#pp-launcher-hovercard',
            conversationSelector = '#pp-conversation',
            welcomeSelector = '#pp-launcher-hovercard-welcome',
            textareaSelector = '#pp-launcher-hovercard-textarea-textarea',
            textareaContainerSelector = '#pp-launcher-hovercard-textarea',
            textareaFocusClass = 'pp-textarea-focus',
            closeBtnSelector = '#pp-container .pp-launcher-hovercard-close',

            closeButtonIsClickedCookieKey = 'pp-showed-hovercard',
            closeButtonIsClickedCookieExpire = 30 * 24 * 3600, // 30 days

            $hoverCardView, // We use this to update html content in hovercard
            $hoverCardController, // We use this to delegate hovercard's events

            _clearTimeoutEvent = function() { //清除定时事件
                if (_timeoutEvent != null) {
                    $clearTimeout(_timeoutEvent);
                    _timeoutEvent = null;
                    return;
                }
            },

            _hasTimeoutEventPending = function() { //是否有定时事件正在执行
                return _timeoutEvent != null;
            },

            // -------------------------
            // CLOSE BUTTON EVENT START
            // -------------------------
            
            isShowCloseButton = function() { // is show close button ?
                return false;
                // var clicked = Service.$cookies.get(closeButtonIsClickedCookieKey);
                // return !clicked || clicked !== 'true';
            },

            isShowHoverCardOnPageLoadEnd = function() { // show Hovercard when inited finish ?
                return false;
                // return isShowCloseButton();
            },

            updateCloseButtonCookieState = function() { // store clicked-close-button info to cookie

                if (Service.$cookies.get(closeButtonIsClickedCookieKey) === undefined) {
                    
                    Service.$cookies.set(closeButtonIsClickedCookieKey, 'true', {
                        expires: closeButtonIsClickedCookieExpire
                    });
                    
                }

            },

            notifyUserActiveClickPPCom = function() { // user has active click `PPMessage`
                _isPageLoadEndShowing = false;

                // updateCloseButtonCookieState(); // mark user clicked
                // $(closeBtnSelector).hide(); // hide close button
            },

            // Delegate Launcher click event
            interceptLauncherClickEvent = function() {
                return $hoverCardController && $hoverCardController.interceptLauncherClickEvent(self);
            };

        /**
         * HoverCard Initialization Event
         */
        this.onHoverCardInit = function() {
            // Nothing to do, delay `this.asyncPrepareHoverCardInfo`
        };

        this.asyncPrepareHoverCardInfo = function( callback ) {
            
            if ( this.isInited() ) {
                $onResult( true, callback );
                return;
            }
            
            Service.$conversationManager.asyncGetDefaultConversation( function( response ) {

                if ( response ) {
                    
                    self.updateInitState(true); // Notify welcome info has download successful

                    var view = View.$hoverCardContentCategorySingle,
                        controller = Ctrl.$hoverCardCategorySingle,
                        hovercardWelcome = buildWelcomeInfo( response.app_name, response.app_welcome, response.user_list );

                    view.updateHoverCard( hovercardWelcome );
                    controller.delegateHoverCardInitEvent( hovercardWelcome );

                    $hoverCardView = view;
                    $hoverCardController = controller;
                    
                }

                $onResult( !!response, callback );
                
            } );
        };

        /**
         * 是否初始化成功，从网上拿来信息成功
         */
        this.isInited = function() {
            return _inited;
        };

        /**
         * 更新是否初始化成功的状态
         */
        this.updateInitState = function(success) {
            _inited = success;
        };

        this.onTextareaFocus = function() {
            $(textareaSelector).addClass(textareaFocusClass);
        };

        this.onTextareaUnFocus = function() {
            $(textareaSelector).removeClass(textareaFocusClass);        
        };

        this.onMouseOver = function() {
            this.showHoverCard();
        };

        this.onMouseLeave = function() {
            this.hideHoverCard();
        };

        /**
         * HoverCard 点击事件：
         */
        this.onHoverCardClicked = function() {
            notifyUserActiveClickPPCom();

            $hoverCardController && $hoverCardController.delegateHoverCardClickEvent(this);
        };

        /**
         * 隐藏 HoverCard，并通过动画平滑过渡到 聊天面板 界面
         */
        this.smoothTranisationToMessagePanel = function() {
            View.$hoverCard.smoothTranisationToMessagePanel();

            Ctrl.$conversationContent
                .show( Service.$conversationManager.activeConversation(), { fadeIn: false, delay: 0 }, function() {
                    View.$composerContainer.focus(); // focus
                } );
        };

        /**
         * 隐藏 HoverCard
         *
         * Note：HoverCard并不是立刻隐藏的，而是在设定了一个定时事件，默认500ms之后才会触发隐藏事件。
         *
         * 定时事件可通过`_hasTimeoutEventPending()` 查询是否存在，可通过`_clearTimeoutEvent()`来清除它
         * 
         */
        this.hideHoverCard = function() {
            _timeoutEvent = $timeout(function() {
                self.hideHoverCardNow();
            }, 500);
        };

        /**
         * 立刻隐藏 HoverCard
         */
        this.hideHoverCardNow = function() {
            if (_isPageLoadEndShowing) return; // Force user to click `close` button manually to hide me
            
            var hoverCard = $(hovercardSelector);
            hoverCard.css({transform: "315px 100%"})
                .animate({scale:.8,x:0,y:0,opacity:0}, 90, function() {
                    hoverCard.hide();
                    _isShowing = false;
                    _clearTimeoutEvent(); 
                });
        };

        /**
         * 显示 HoverCard
         */
        this.showHoverCard = function() {
            
            if (_hasTimeoutEventPending()) {
                _clearTimeoutEvent();
                return;
            }

            if (_isShowing) {
                return;   
            }

            if (!_inited) {
                return;
            }
            
            // var anim = "cubic-bezier(0.1, 0.0, 0.2, 1)";
            var hoverCard = $( hovercardSelector );
            hoverCard.stop().clearQueue().removeAttr('style');
            hoverCard.show()
                .css({ transformOrigin: "315 100%",x: 0,y: 0 })
                .animate({opacity: 0,scale: .8,x:0,y:0}, {
                    duration: 0
                })
                .animate({scale:1, x:0,y:0}, {queue: false, duration: 250})
                .animate({opacity: 1}, {
                    duration: 170
                });

            $hoverCardController && $hoverCardController.onShow();
            
            _isShowing = true;
        };

        // -------------------------
        // CLOSE BUTTON EVENT START
        // -------------------------
        this.onHovercardCloseButtonClickEvent = function(e) { // on user press close button on the right-top corner
            e.stopImmediatePropagation();

            notifyUserActiveClickPPCom();

            self.hideHoverCardNow(); // hide hovercard
        };

        this.isShowCloseButton = isShowCloseButton; // is show close button

        this.notifyUserActiveClickPPCom = notifyUserActiveClickPPCom; // On user active click `PPCom`

        this.interceptLauncherClickEvent = interceptLauncherClickEvent;

    }
    extend(HoverCardController, Ctrl.PPBaseCtrl);

    var instance = null, // singletion

        get = function() {
            if (!instance) {
                instance = new HoverCardController();
            }
            return instance;
        };
    
    return {
        get: get
    }

    ////////// Tools ///////////
    function buildWelcomeInfo ( team, welcomeText, serviceUsers ) {
        return {
            appTeamName: team,
            appWelcomeText: welcomeText,
            
            activeAdmins: (function() {
                
                var users = [];

                serviceUsers && $.each(serviceUsers, function( index, item ) {
                    
                    var infoAdapter = Service.$users.adapter( item );
                    if ( infoAdapter.user_uuid !== Service.$user.getUser().getInfo().user_uuid ) {
                        users.push( Service.$users.getOrCreateUser( infoAdapter ).getInfo() );                        
                    }

                });

                return users;
                
            })()
        };
    }
    
})();

((function(Ctrl) {

    Ctrl.$hoverCardCategorySingle = (function() {

        return {
            delegateHoverCardClickEvent: onHoverCardClick,
            delegateHoverCardInitEvent: onHoverCardInit,
            interceptLauncherClickEvent: interceptLauncherClickEvent,
            onShow: onShow
        }

        function onShow() {

            // Dynamically load the users on the welcome hovercard 
            
            var vipConversation = Service.$conversationManager.vipConversation();
            if ( vipConversation ) {
                
                Service.$conversation.asyncGetUser( vipConversation.token, function( userArray ) {

                    View.$hoverCardContentCategorySingle.updateUsers( userArray );
                    
                }, { reuse: true }); // <= reuse the exist users in local
                
            }
            
        }
        
        function interceptLauncherClickEvent($hoverCardController) {
            return false;
        }

        function onHoverCardClick($hoverCardController) {
            Ctrl.$launcher.get().hideLauncher();
            View.$launcherPreview.text( '' ).hide();
            $hoverCardController.smoothTranisationToMessagePanel();
        }

        function onHoverCardInit(appWelcomeInfo) {

            // Listen user info change event
            // appWelcomeInfo &&
            //     appWelcomeInfo.activeAdmins &&
            //     $.each(appWelcomeInfo.activeAdmins, function(index, item) {
            
            //         Service.$pubsub.subscribe('user/infochange/' + item.user_uuid, function (topics, user) {

            //             var userInfo = user.getInfo();

            //             // Change hovercard admin user_avatar
            //             $('.pp-launcher-hovercard-admins')
            //                 .find('div[user_uuid=' + item.user_uuid + ']')
            //                 .find('img')
            //                 .attr('src', userInfo.user_avatar);                     
            
            //         });
            
            //     });
        }
        
    })();
    
})(Ctrl));

// TODO: refactor
Ctrl.$launcher = (function() {

    var _launcherIcon = "",
        _clickToOpenConversation = "";

    function PPLauncherCtrl() {

        var self = this,

            _showHoverCard = function() {
                Ctrl.$hoverCard.get().showHoverCard();
            },

            _hideHoverCard = function() {
                Ctrl.$hoverCard.get().hideHoverCard();
            };

        this.onClickEvent = function() { // Launcher onClick event
            if (!PP.isOpen()) {
                this.setUnreadBadgeNum(0);
                this.setLauncherIcon("");
                // clearn message on showing
                messageOnShowing = undefined;
            }
            PP.toggle();

            // // If hoverCard delegate launcher click event, we will not show MessageBox
            // if (!Ctrl.$hoverCard.get().interceptLauncherClickEvent()) {
            //     var $hoverCardController = Ctrl.$hoverCard.get();
            //     $hoverCardController.asyncPrepareHoverCardInfo( function( prepareSucc ) {
            //         self.showMessageBox();
            //     } );
            // }
        },

        this.shouldShowLauncherWhenInit = function() { // 是否默认显示小泡
            return View.$settings.isShowLauncher();
        },

        // Open messageBox and hide Launcher
        this.showMessageBox = function() {
            var $hoverCardController = Ctrl.$hoverCard.get();
            $hoverCardController.asyncPrepareHoverCardInfo( function( prepareSucc ) {
                var messageOnShowingOld = messageOnShowing;
                View.$launcher.showMessageBox();

                if ( Ctrl.$conversationPanel.mode() === Ctrl.$conversationPanel.MODE.CONTENT ) {
                    Ctrl.$conversationContent
                        .show( Service.$conversationManager.activeConversation(), { fadeIn: false, delay: 0 }, function() {
                            View.$composerContainer.focus(); // focus
                        } );
                } else if ( Ctrl.$conversationPanel.mode() === Ctrl.$conversationPanel.MODE.LIST ) {
                    Ctrl.$conversationList.show();
                }

            } );
        },

        this.onMouseOverEvent = function() {
            _isMouseOver = true;

            if (!this.shouldShowHoverCardOnMouseOver()) {
                return;
            }

            var $hoverCardController = Ctrl.$hoverCard.get();
            $hoverCardController.asyncPrepareHoverCardInfo( function( prepareSucc ) {
                prepareSucc && _showHoverCard();
            } );
        },

        this.onMouseLeaveEvent = function() {
            _isMouseOver = false;
            _hideHoverCard();
        },

        this.isMouseOver = function() {
            return _isMouseOver;
        },

        this.recordOpenConversationItem = function(message) {
            _clickToOpenConversation = message;
        },

        this.getLauncherIcon = function() {
            return _launcherIcon || Service.Constants.ICON_DEFAULT_LAUNCHER;
        },

        this.getLauncherBottomMargin = function() {
            return View.$settings.getLauncherBottomMargin();
        },

        this.getLauncherRightMargin = function() {
            return View.$settings.getLauncherRightMargin();
        },

        this.shouldShowHoverCardOnMouseOver = function() {
            return !Service.$device.isMobileBrowser() && Ctrl.$conversationPanel.mode() === Ctrl.$conversationPanel.MODE.CONTENT;
        },

        this.launcherInit = function() {
        },

        this.setLauncherIcon = function(icon) {
            _launcherIcon = icon;
            $('#pp-launcher-icon').attr('src', this.getLauncherIcon());
        },

        /**
         * 当前小泡是否处于显示状态
         *
         */
        this.isLauncherShow = function() {
            //Note: 不能使用 `$('#pp-launcher-button').hasClass('pp-launcher-button-maximize')` 来判断，因为在一开始`pp-launcher-button`，这两个`class`均没有
            return this.shouldShowLauncherWhenInit() && !$('#pp-launcher-button').hasClass('pp-launcher-button-minimized');
        },

        this.onLauncherInit = function() {
        },

        // unreadNumber <= 0: hidden; unreadNumber>0: show
        this.setUnreadBadgeNum = function(unreadNumber) {
            var show = unreadNumber > 0;
            _unreadBadgeNum = show ? (unreadNumber > 99 ? 99 : unreadNumber) : 0;
            show ? $( '#pp-launcher-badge' ).show() : $( '#pp-launcher-badge' ).hide();
            $('#pp-launcher-badge').text(_unreadBadgeNum);
        },

        this.getUnreadBadgeNum = function() {
            return _unreadBadgeNum;
        },

        this.clear = function() {
            _unreadBadgeNum = 0;
            _launcherIcon = "";
            _clickToOpenConversation = "";
        },

        /**
         * Hide launcher
         */
        this.hideLauncher = function() {
            View.$launcher.hideLauncher();

            this.setUnreadBadgeNum(0);
            this.setLauncherIcon("");

            // clearn message on showing
            messageOnShowing = undefined;
        };

        // on message arrived ...
        Service.$pubsub.subscribe('msgArrived/launcher', function(topics, ppMessage) {
            
            self.setUnreadBadgeNum( self.getUnreadBadgeNum() + 1 );
            self.setLauncherIcon( ppMessage.getBody().user.avatar );
            self.recordOpenConversationItem( ppMessage.getBody() );

            // record the new one
            // so when we click launcher, directyle open chating panel, rather than group list panel
            messageOnShowing = ppMessage.getBody();
            
        });
        
    };

    var _unreadBadgeNum = 0,
        _isMouseOver = false,
        messageOnShowing,

        instance,

        get = function() {
            if (!instance) {
                instance = new PPLauncherCtrl();
            }
            return instance;
        };
    
    return {
        get: get,
    }
    
})();

Ctrl.$pulltoRefreshController = (function() {

    function PulltoRefreshController() {
        Ctrl.PPBaseCtrl.call(this);

        var Constants = Service.Constants,
            device = Service.$device,
            
            inMobile = device.isMobileBrowser(),
            loadHistoryHintText = inMobile ? Constants.i18n('LOAD_HISTORY_MOBILE_HINT') : Constants.i18n('LOAD_HISTORY_HINT'),
            loadingHistoryText = Constants.i18n('LOADING_HISTORY'),
            noMoreHistoryText = Constants.i18n('NO_MORE_HISTORY'),
            
            loadable = true, // can load history

            self = this,

            conversationContentCtrl,

            selector = '#pp-conversation-part-pulltorefreshbutton',
            conversationContentSelector = '#pp-conversation-content',

            onEndEventCallback = null, // onend event

            // bind pull2refresh event
            bindPull2RefreshEvent = function() {
                $(conversationContentSelector).pullToRefresh()
                
                    .on("start.pulltorefresh", function (evt, y){
                        Service.$debug.d('Start!! ' + evt + ', '+y)
                    })
                
                    .on("move.pulltorefresh", function (evt, percentage){
                        Service.$debug.d('Move.. ' + evt + ', '+percentage)
                    })
                
                    .on("end.pulltorefresh", function (evt){
                        Service.$debug.d('End.. ' + evt);

                        onEndEventCallback && onEndEventCallback(evt); // callback onend event
                    })
                
                    .on("refresh.pulltorefresh", function (evt, y){
                        Service.$debug.d('Refresh.. ' + evt + ', '+y)
                        loadHistory();
                    });
            },

            beforeRefreshContentView = function() {
                // We destroy `pulltorefresh` button we begin loading
                $(selector).remove();
            },

            afterRefreshContentView = function(historyArray) {
                var hasMoreHistory = conversationContentCtrl.isLoadable(),
                    text = hasMoreHistory ? loadHistoryHintText : noMoreHistoryText;

                // After `refresh` we add `pulltorefresh` button again
                $(conversationContentSelector).prepend(View.$pulltoRefresh.build(text).getHTML());
                setLoadable(hasMoreHistory);

                self.bindEvent();
            },

            loadHistory = function() {
                // on loading state or no more history state
                if (!loadable) return;

                // change text to indicate loading
                $(selector).text(loadingHistoryText);
                setLoadable(false);

                conversationContentCtrl.loadHistorys(function() {
                    // begin loading
                    beforeRefreshContentView();
                }, function(list) {
                    afterRefreshContentView(list);
                });

            },

            setLoadable = function(click) {
                loadable = click;
                $(selector).css('cursor', loadable ? 'pointer' : 'default');
            };
        
        this.getLoadHistortyHintText = function() {
            return loadHistoryHintText;
        };

        this.onLoadHistoryButtonClick = function() {
            if (!inMobile) loadHistory();
        };

        this.loadable = function(loadable) {
            setLoadable(loadable);
            $(selector).text(loadable ? loadHistoryHintText : noMoreHistoryText);
            return this;
        };

        this.bindEvent = function() {
            // in mobile
            // bind `pull-to-refresh` event
            if (inMobile) {
                bindPull2RefreshEvent();
            } else {
                // bind click event on `pc`
                View.$pulltoRefresh.el().bind('click', self.onLoadHistoryButtonClick);
            }
            return this;
        };

        this.onend = function(onEndEvent) { // pulltorefresh onend callback
            onEndEventCallback = onEndEvent;
            return this;
        };

        this.init = function( $conversationContentCtrl ) {
            // The `pulltorefresh` view will try to call `get()` method with empty params
            // So we should prevent empty `$conversationContentCtrl` assigned to `$pulltoRefresh` controller
            if ( $conversationContentCtrl ) {
                conversationContentCtrl = $conversationContentCtrl
            }
            return this;
        };
    }
    extend(PulltoRefreshController, Ctrl.PPBaseCtrl);

    var instance = null,

        get = function( $conversationContentCtrl ) {
            if (instance == null) {
                instance = new PulltoRefreshController();
            }
            return instance.init( $conversationContentCtrl );
        };
    
    return {
        get: get
    }
    
})();

Ctrl.$sheetheader = (function() {

    var $device = Service.$device;

    return {
        onSheetHeaderInit: onSheetHeaderInit,
        
        getHeaderTitle: getHeaderTitle,
        onSheetHeaderClicked: onSheetHeaderClicked,
        setHeaderTitle: setHeaderTitle,
        
        minimize: minimize,
        closed: closed,
        
        incrUnread: incrUnread,
        decrUnread: decrUnread,
    }

    ///////// Implenmentation ///////
    function minimize() {

        // We disable body scroll when user click launcher in mobile browser,
        // So we need to enable it again when the user press minimize button
        // @see `launcherctrl.js` `showMessageBox` methods
        if ($device.isIOS()) {
            $device.enableScroll();
        }

        View.$launcher.showLauncher( View.$launcher.STATE.NORMAL );
        View.$conversation.hide();

        // Cancel all sechedule tasks
        Service.$schedule.cancelAll();
        Service.$sheetHeader.close(false);

        cancelAnyWaitingToCreateConversations();

    }

    function getHeaderTitle() {
        return Service.$sheetHeader.getHeaderTitle();
    }

    function onSheetHeaderClicked() {
        Ctrl.$emojiSelector.get().showSelector(false);
    }

    function setHeaderTitle(title) {
        title = title || getHeaderTitle();
        Service.$sheetHeader.setHeaderTitle(title);
        View.$sheetHeader.setTitle(title);
    }

    function closed() {
        return Service.$sheetHeader.closed();
    }

    function onSheetHeaderInit() {
        Service.$sheetHeader.asyncGetHeaderTitle(function(title) {
            setHeaderTitle(title);
        });

        // decide should show group button, when app init
        Service.$conversationManager.asyncGetList( function( conversationList ) {

            var len = ( conversationList || [] ).length;
            // more than one conversations, so show `conversations` button in the sheetHeader
            if ( len > 1 ) {
                View.$sheetHeader.showGroupButton();
            }
            
        } );
        
    }

    function incrUnread() {
        Service.$sheetHeader.incrUnreadCount();
        View.$sheetHeader.setUnreadCount(Service.$sheetHeader.unreadCount());
    }

    function decrUnread( count ) {
        Service.$sheetHeader.decrUnreadCount ( count );
        View.$sheetHeader.setUnreadCount(Service.$sheetHeader.unreadCount());
    }

    function cancelAnyWaitingToCreateConversations() {
        var $conversationAgency = Service.$conversationAgency,
            inRequestingGroupConversation = false,
            DELAY_TIME = 300; // Waiting the css animation completed

        Ctrl.$conversationPanel.stopPollingWaitingQueueLength();
        $timeout( function() {
            setHeaderTitle();
            // resume to `MODE.LIST` mode if we are waiting group conversations
            inRequestingGroupConversation && Ctrl.$conversationList.show();
            // resume to `MODE.CONTENT` mode if we are waiting default conversations
            !$conversationAgency.isDefaultConversationAvaliable() &&
                Ctrl.$conversationPanel.mode( Ctrl.$conversationPanel.MODE.CONTENT );
        }, DELAY_TIME );
    }
    
})();

((function(Ctrl) {

    function PPUploadingBarCtrl() {
        Ctrl.PPBaseCtrl.call(this);

        var _updateWidth = function(fileUploadId) {
            var w = Service.$fileUploader.getUploadProgress(fileUploadId);
            if (w < 0) {
                return;
            }
            if (w <= 100) {
                $('#pp-uploading-bar-state-' + fileUploadId).css('width', w + "%");
                $timeout(function() {
                    _updateWidth(fileUploadId);
                }, 100);
            }
        };
        
        this.init = function(data, fileUploadId) {

        };

        this.onUploadingBarRemoveBtnClicked = function(fileUploadId, data) {
            Service.$uploader.cancel(fileUploadId);
        };
    }
    extend(PPUploadingBarCtrl, Ctrl.PPBaseCtrl);

    Ctrl.PPUploadingBarCtrl = PPUploadingBarCtrl;
    
})(Ctrl));

Ctrl.$smsEmail = (function(){
    
    return {
        submit: submit
    }

    // option: email or mobile
    function submit( option, callback ) {
        if ( Service.$tools.validateEmail( option ) ) { // email
            
        } else if ( Service.$tools.validatePhoneNumber( option ) ) { // phone
            
        }

        $timeout(function() {
            callback && callback( true );
        }, 3000);
    }

}());

((function(Modal) {

    function ConversationContentModal(groupId) {
        
        var $api = Service.$api, // $api Service
            $json = Service.$json, // $json Service
            $tools = Service.$tools,
            $notification = Service.$notification,
            $notifyMsg = Service.$notifyMsg,

            id = groupId, // group identifier

            self = this,

            inMobile = Service.$device.isMobileBrowser(), // is in mobile

            isAddedWelcomeInfo = false,
            loadable = true, // can load history (has more historys)
            unreadCount = 0, // unread count associated with this group `id`

            // add PCWelcome msg
            getPCWelcomeMsg = function(appProfileInfo) {

                if (!appProfileInfo) return;
                
                var Builder = Service.PPMessage.Builder,

                    welcome = {
                        appTeamName: appProfileInfo.appTeamName,
                        appWelcomeText: appProfileInfo.appWelcomeText,
                        activeAdmins: appProfileInfo.activeAdmins
                    },

                    welcomeMsg = new Builder( 'WELCOME' )
                    .messageState( Service.PPMessage.STATE.FINISH )
                    .conversationId(Service.$tools.getUUID())
                    .welcomeBody(welcome)
                    .build()
                    .getBody();
                
                return welcomeMsg;
            },

            getMobileWelcomeMsg = function() { // add mobile welcome msg
                var Builder = Service.PPMessage.Builder,
                    // welcome text in mobile
                    welcomeText = Service.Constants.i18n('WELCOME_MSG'),
                    // welcome msg in mobile
                    welcomeMsg = new Builder( Service.PPMessage.TYPE.TEXT )
                    .messageState( Service.PPMessage.STATE.FINISH )
                    .conversationId(Service.$tools.getUUID())
                    .textMessageBody(welcomeText)
                    .admin(true)
                    .userName(Service.Constants.i18n('DEFAULT_SERVE_NAME'))
                    .build()
                    .getBody();

                return welcomeMsg;
            },

            getWelcomeMsg = function ( welcomeInfo ) {
                
                // Welcome msg
                if (inMobile) {
                    // return getMobileWelcomeMsg();
                } else {
                    // if welcomeInfo fetched from server is presented
                    if (welcomeInfo) {
                        return getPCWelcomeMsg(welcomeInfo);
                    }
                }
                
            },

            pushWelcomeMessage = function( messageArray, welcome ) {

                if ( welcome ) {
                    isAddedWelcomeInfo = true;
                    messageArray.push ( welcome );    
                }
                
                return messageArray;
            },

            getInitChatMessages = function() {
                return pushWelcomeMessage( [], getWelcomeMsg() );
            },
            
            chatMessages = getInitChatMessages(), // Store messages
            
            // Cache messages Ids (for check is message exist) if message.id exist
            //
            // NOTE:
            // - Store message id: send by websocket/api
            // - Store message id: receive by websocket
            // - Won't store message id: history messages, see function `unshiftMessageArrays`
            // - No promise the ids will order by timestamp
            chatMessagesIds = [],
            
            isMessageIdExist = function(messageId) {
                return $.inArray(messageId, chatMessagesIds) != -1;
            },
            isMessageExist = function(msg) { // Is message exist
                
                if (!msg.messageId) return false;
                
                return isMessageIdExist(msg.messageId);
            },

            loadMessageHistorysMaxId = null, // max id

            loadMessageHistorys = function(conversationId, callback) { // get message historys by conversationId

                // conversation id is empty
                if (!conversationId) {
                    if (callback) callback([], false);
                    return;
                }
                
                // get message history by api
                $api.pageMessageHistory({
                    conversation_uuid: conversationId,
                    max_uuid: loadMessageHistorysMaxId
                }, function(response) { // On get message history success callback

                    // Update page offset and max id for next load
                    loadMessageHistorysMaxId =
                        ( response.list && response.list.length > 0 ) ?
                        response.list[response.list.length-1].uuid :
                        null;

                    // Convert response api message array to ppMessage array
                    var ppMessageArray = [];
                    (function apiMessageArrayToPPMessageArray(index, length, apiMessageArray, completeCallback) {

                        if (index < length) {
                            new Service.ApiMessageAdapter($json.parse(apiMessageArray[index].message_body))
                                .asyncGetPPMessage(function(ppMessage, succ) {
                                    
                                    // If not exist , add it 
                                    if (succ && !isMessageExist(ppMessage.getBody())) {
                                        ppMessageArray.push(ppMessage.getBody());
                                    }
                                    apiMessageArrayToPPMessageArray(index + 1, length, apiMessageArray, completeCallback);
                                });
                        } else {
                            // complete
                            if (completeCallback) completeCallback();
                        }
                        
                    })(0, ( response.list && response.list.length ) || 0, response.list || [], function() {
                        
                        // apiMessageArray -> ppMessageArray completed
                        //
                        // HISTORY MESSAGE ORDER
                        // |     newer      | <-- big timestamp
                        // |     ......     |
                        // |     older      | <-- small timestamp
                        //
                        // We need to add history message timestamp to array here:
                        //
                        //
                        var messageHistorysWithTimestamp = addTimestampsToHistoryMessageArrays(ppMessageArray);
                        // Store message historys to `chatMessages`
                        unshiftMessageArrays(messageHistorysWithTimestamp);
                        if (callback) {
                            var loadable = messageHistorysWithTimestamp.length > 0;
                            // Only contain a timestamp message, so we consider there are no more history here
                            if (messageHistorysWithTimestamp.length === 1 && 
                               messageHistorysWithTimestamp[0].messageType === Service.PPMessage.TYPE.TIMESTAMP ) {
                                loadable = false;
                            }
                            callback(messageHistorysWithTimestamp, loadable);
                        }
                        
                    });
                    
                }, function(error) { // On get message history error callback
                    if (callback) callback([], false);
                });
                
            },

            DEFAULT_MESSAGE_TIMESTAMP_DELAY = 5 * 60, // 5 minutes

            messageTimestampDelay = DEFAULT_MESSAGE_TIMESTAMP_DELAY,

            // |     new-01     |
            // |     new-02     |
            // |     .....      |
            // |     new-xx     | <-- `lastMessageTimestamp`
            lastMessageTimestamp = null, // last message timestamp

            // |     old-01     |
            // |     old-02     |
            // |     ......     |
            // |     old-20     | <-- `historyMoreOldMessageTimestamp`
            historyMoreOldMessageTimestamp = null, // history more old message timestamp
            
            shouldAddMessageTimestamp = function(msg) {
                
                var lastTimestamp = lastMessageTimestamp,
                    newTimestamp = msg.messageTimestamp,
                    shouldUpdateLastTimestamp = Service.$messageToolsModule.isMessage(msg);

                // Update lastMessageTimestamp if need
                lastMessageTimestamp = shouldUpdateLastTimestamp ?
                    (newTimestamp ? newTimestamp : lastMessageTimestamp) : lastMessageTimestamp;

                if (!shouldUpdateLastTimestamp || !newTimestamp ) return false; // not a legal message
                
                if (!lastTimestamp) return true; // normally , if lastTimestamp is not set, meaning this message is the first message
                
                if (newTimestamp - lastTimestamp <= messageTimestampDelay) return false;

                return true;
            },

            // Return history message arrays with timestamps
            addTimestampsToHistoryMessageArrays = function(historyMessageArray) {
                if (!historyMessageArray) return historyMessageArray;

                // Empty, meaning we have reached the begining of the whole historys
                if (historyMessageArray.length === 0) {
                    if (historyMoreOldMessageTimestamp != null) {
                        historyMessageArray.push(buildTimestampMessage(historyMoreOldMessageTimestamp));
                        historyMoreOldMessageTimestamp = null; // Then , we reset to `null`
                    }
                    return historyMessageArray;
                }

                var resultArray = []; // store result

                var lastOne = historyMoreOldMessageTimestamp || historyMessageArray[0].messageTimestamp;
                $.each(historyMessageArray, function(index, item) {
                    
                    var shouldAdd = lastOne - item.messageTimestamp > messageTimestampDelay;
                    if (shouldAdd) {
                        resultArray.unshift(buildTimestampMessage(lastOne)); // push timestamp if need
                    }

                    resultArray.unshift(item); // push message

                    lastOne = item.messageTimestamp;
                });

                // Cache timestamp
                historyMoreOldMessageTimestamp = historyMessageArray[historyMessageArray.length - 1].messageTimestamp;
                
                return resultArray;
            },

            // add message arrays (generally: history message arrays) to head of `chatMessages` array
            // @description
            //     assume `chatMessages` = [a,b,c];
            //            `messageArrays` = [1,2,3,4,5];
            //
            //     result `chatMessages` would be `[1,2,3,4,5,a,b,c]`
            unshiftMessageArrays = function(messageArrays) {
                if (!messageArrays || messageArrays.length == 0) return;

                var reverseArr = messageArrays.slice().reverse(); // make a copy
                $.each(reverseArr, function(index, item) {
                    chatMessages.unshift(item);
                });
            },
            
            buildTimestampMessage = function(messageTimestamp) {
                
                var time = messageTimestamp * 1000,
                    timeStr = Service.Constants.I18N[Service.$language.getLanguage()].timeFormat(time);
                
                return new Service.PPMessage.Builder( 'TIMESTAMP' )
                    .id($tools.getUUID())
                    .timestampBody({
                        time: time,
                        timeStr: timeStr
                    })
                    .messageState( Service.PPMessage.STATE.FINISH )
                    .build()
                    .getBody();
            },
            
            tryLoadLostMessages = function(maxId) {

                if (chatMessages.length == 0) {
                    // no messages no lost
                    return;
                }
                
                maxId = maxId ? maxId : (function() {

                    // find message max id ( normally the last one ) [xx, xx, xx, ...]
                    var len = chatMessages.length;
                    while ( len-- ) {
                        var candidate = chatMessages [ len ];
                        if ( Service.$messageToolsModule.isMessage( candidate ) ) {
                            return candidate.messageId;
                        }
                    }

                    return undefined;
                }());

                if ( maxId === undefined || maxId === null ) {
                    // no messages no lost
                    return;
                }
            
                $api.pageMessageHistory({
                    conversation_uuid: id,
                    min_uuid: maxId
                }, function(response) {
                    if (response.error_code == 0) {
                        if (response.list.length > 0) {

                            $.each(response.list, function(index, item) {
                                var messageInJsonFormat = item.message_body && Service.$json.parse( item.message_body );
                                $notifyMsg.get($notification, messageInJsonFormat).dispatch();
                            });

                            tryLoadLostMessages(response.list[response.list.length-1].uuid);
                        }
                    }
                });
            }
        
        ;

        // add a new messageId
        this.updateMessageIdsArray = function(messageId) {
            if (!isMessageIdExist(messageId)) {
                chatMessagesIds.push(messageId);   
            }
        };

        // Clear data
        this.clear = function() {
            chatMessages = [];
            chatMessagesIds = [];
            loadMessageHistorysMaxId = null;
            lastMessageTimestamp = null;
        };

        // load message history
        this.getConversationHistory = function(conversationId, callback) {
            loadMessageHistorys(conversationId, callback);
        };

        // Append a new messgae
        // @return if should append timestamp, return timestamp message, else null.
        this.addMessage = function(msg) {
            
            // message exist
            if (msg.messageId && isMessageExist(msg)) return null;

            // check and decide whether or not should add timestamp message
            var addTimestampMessage = shouldAddMessageTimestamp(msg);
            var timestampMsg = null;
            if (addTimestampMessage) {
                timestampMsg = buildTimestampMessage(msg.messageTimestamp);
                chatMessages.push(timestampMsg);
            }
            
            chatMessages.push(msg); // append it
            Service.$messageStore.map( msg.messageId, id ); // append it to global message store
            
            // append message id
            if (msg.messageId) self.updateMessageIdsArray(msg.messageId);

            return timestampMsg;
        };

        // find msg by msgId
        this.find = function ( msgId ) {
            if ( !isMessageIdExist( msgId ) ) return;

            var len = chatMessages.length;
            while( len-- ) {
                if ( chatMessages [ len ].messageId === msgId ) {
                    return chatMessages [ len ];
                }
            }
            return msgId;
        };

        // Is chat messages empty
        this.isEmpty = function() {
            return chatMessages.length == 0;
        };

        // get all messages
        this.getMessages = function() {
            return chatMessages;
        };

        // Can load more historys
        this.setLoadable = function(l) {
            loadable = l;
        };

        // Is historys loadable
        this.isLoadable = function() {
            return loadable;
        };

        // can add welcomeInfo
        this.canAddWelcomeInfo = function() {
            return this.isEmpty() && !isAddedWelcomeInfo;
        };

        // push welcome info
        this.addWelcomeInfo = function(welcomeInfo) {
            var welcome = getWelcomeMsg( welcomeInfo );
            pushWelcomeMessage( this.getMessages(), welcome );
            return welcome;
        };

        // -----------
        // UNREAD COUNT
        // -----------
        this.unreadCount = function() {
            return unreadCount;
        };

        this.incrUnreadCount = function() {
            unreadCount++;            
        };

        this.clearUnread = function() {
            unreadCount = 0;
        };

        this.token = function() {
            return id;
        };

        this.tryLoadLostMessages = function() {
            tryLoadLostMessages();
        };
    }

    Modal.ConversationContentModal = ConversationContentModal;
    
})(Modal));

Modal.$conversationContentGroup = (function() {

    var conversationContentArray = {
        // broadcast: modal of `broadcast`,
        // 
        // group_uuid_1: modal of `group_uuid_1`,
        // group_uuid_2: modal of `group_uuid_2`,
        // ...
    };


    function create(groupIdentifier) {
        return new Modal.ConversationContentModal(groupIdentifier);
    }

    function exist( groupIdentifier ) {
        return conversationContentArray [groupIdentifier] !== undefined;
    }

    return {
        get: function(groupIdentifier) {
            var modal;
            if (!exist(groupIdentifier)) {
                modal = conversationContentArray [groupIdentifier] = create(groupIdentifier);
            } else {
                modal = conversationContentArray [groupIdentifier];                
            }
            return modal;
        },

        set: function(groupIdentifier, modal) {
        
            if (!modal) throw new Error('Modal == null');
            if (exist(groupIdentifier)) throw new Error('Modal ' + groupIdentifier + ' exist!');
            
            conversationContentArray [groupIdentifier] = modal;
        },

        exist: function(groupIdentifier) {
            exist(groupIdentifier);
        },

        tryLoadLostMessages: function() {
            $.each(conversationContentArray, function(groupIdentifier, modal) {
                modal.tryLoadLostMessages();
            });
        }
    }
    
})();

// Boot all services when create fn
Service.PPStartUp.bootServices();

return fn;
}

function PPModule(jQuery) {
    
    var fn,

        buildFn = function(jQuery) { // build a NEW ppmessage instance
            return PPMessage(jQuery);
        },
        
        getFn = function(jQuery) { // get a fn
            if (!existFn()) {
                fn = buildFn(jQuery);

                // Faciliate our debug to see the inner world of `PP` object by call `PP.fn.xxx`
                // Consider to remove this line when put `PP` on release mode
                PP.fn = fn;
            }
            return fn;
        },

        existFn = function() { // Does fn exist ?
            return fn !== undefined;
        },

        cleanFn = function() { // Clear fn
            fn = undefined;
        },

        PP = {

            /**
             * major.minor.status.revision
             *
             * status: 0 for alpha
             *         1 for beta
             *         2 for release candiate
             *         3 for (final) release
             */
            version : '0.2.0.6',

            /**
             * Boot PPCom with ppSettings
             */
            boot : function(ppSettings, callback) {
                ppSettings = ppSettings || window.ppSettings;
                ppSettings && getFn(jQuery).Service.$publicApi.boot(ppSettings, callback);
            },

            /**
             * Show PPCom MessageBox
             */
            show : function() {
                existFn(jQuery) && getFn(jQuery).Service.$publicApi.show();
            },

            /**
             * Hide PPCom MessageBox
             */
            hide : function() {
                existFn(jQuery) && getFn(jQuery).Service.$publicApi.hide();
            },

	    // Show PPCom MesssageBox
	    open : function() {
		PP && PP.show();
	    },
	    
	    // Hide PPCom MessageBox
	    close : function() {
		PP && PP.hide();
	    },
	    
	    // Check is PPCom MessageBox opened
	    isOpen : function() {
		return existFn(jQuery) && getFn(jQuery).Service.$publicApi.isOpen();
	    },

	    // Toggle PPCom MessageBox
	    toggle : function() {
		if (PP.isOpen()) {
		    PP.close();
		} else {
		    PP.open();
		}
	    },

            /**
             * PPCom MessageBox onShow event callback
             */
            onShow : function(event) {
                existFn(jQuery) && getFn(jQuery).Service.$publicApi.onShow(event);
            },

            /**
             * PPCom MessageBox onHide event callback
             */
            onHide : function(event) {
                existFn(jQuery) && getFn(jQuery).Service.$publicApi.onHide(event);
            },

            /**
             * This method will effectively clear out any user data that you have been passing through the JS API. 
             * You should call the shutdown method anytime a user logs out of your application.
             *
             * [Note]: This will cause PPCom fully dismiss from your application.
             */
            shutdown : function() {
                existFn(jQuery) && getFn(jQuery).Service.$publicApi.shutdown();
                cleanFn();
            },

            /**
             * Update PPCom by ppSettings
             */
            update : function(ppSettings) {
                ppSettings = ppSettings || window.ppSettings;
                if ( existFn(jQuery) && getFn(jQuery).Service.$publicApi.update(ppSettings) ) {
                    PP.shutdown();
                    PP.boot(ppSettings);
                }
            }

        };

    return PP;
    
}

function JQueryModule () {

/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( jQuery.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





return jQuery;
} );

return jQuery.noConflict(true);
}

((function() {
    
    var w = window;
    if ( w &&
         ( w.PP === undefined || w.pp === null ) ) {
        w.PP = PPModule(JQueryModule());
        w.PP.boot();
    }
    
})());

/**
 * 用以方便合并文件，放在最终合并文件的最末尾
 *
 */
})());
